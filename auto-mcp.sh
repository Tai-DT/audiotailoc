#!/bin/bash

# üöÄ Auto MCP Manager cho Audio T√†i L·ªôc
# Script t·ª± ƒë·ªông qu·∫£n l√Ω c√°c MCP servers

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="/Users/macbook/Desktop/Code/audiotailoc"
MCP_CONFIG="$HOME/.mcp"
MEMORY_FILE="$MCP_CONFIG/memory.json"

# T·∫°o th∆∞ m·ª•c MCP n·∫øu ch∆∞a c√≥
mkdir -p "$MCP_CONFIG"

# T·∫°o file memory m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
if [ ! -f "$MEMORY_FILE" ]; then
    echo '{"conversations": [], "facts": [], "preferences": {}}' > "$MEMORY_FILE"
    echo "‚úÖ ƒê√£ t·∫°o file memory t·∫°i $MEMORY_FILE"
fi

# Function ƒë·ªÉ ki·ªÉm tra v√† c√†i ƒë·∫∑t dependencies
check_dependencies() {
    echo "üîç ƒêang ki·ªÉm tra dependencies..."

    # Ki·ªÉm tra Node.js
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return 1
    fi

    # Ki·ªÉm tra npm
    if ! command -v npm &> /dev/null; then
        echo "‚ùå npm ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return 1
    fi

    # C√†i ƒë·∫∑t MCP servers n·∫øu ch∆∞a c√≥
    if ! npm list -g @playwright/mcp &> /dev/null; then
        echo "üì¶ ƒêang c√†i ƒë·∫∑t @playwright/mcp..."
        npm install -g @playwright/mcp
    fi

    if ! npm list -g @modelcontextprotocol/server-memory &> /dev/null; then
        echo "üì¶ ƒêang c√†i ƒë·∫∑t @modelcontextprotocol/server-memory..."
        npm install -g @modelcontextprotocol/server-memory
    fi

    if ! npm list -g @browsermcp/mcp &> /dev/null; then
        echo "üì¶ ƒêang c√†i ƒë·∫∑t @browsermcp/mcp..."
        npm install -g @browsermcp/mcp
    fi

    echo "‚úÖ T·∫•t c·∫£ dependencies ƒë√£ s·∫µn s√†ng"
    return 0
}

# Function ƒë·ªÉ kh·ªüi ƒë·ªông MCP servers
start_mcp_servers() {
    echo "üöÄ ƒêang kh·ªüi ƒë·ªông MCP servers..."

    # T·∫°o script kh·ªüi ƒë·ªông cho t·ª´ng server
    cat > "$MCP_CONFIG/start-playwright.sh" << 'EOF'
#!/bin/bash
echo "üé≠ Starting Playwright MCP Server..."
npx @playwright/mcp@latest
EOF

    cat > "$MCP_CONFIG/start-memory.sh" << EOF
#!/bin/bash
echo "üß† Starting Memory MCP Server..."
MEMORY_FILE_PATH="$MEMORY_FILE" npx -y @modelcontextprotocol/server-memory
EOF

    cat > "$MCP_CONFIG/start-browser.sh" << 'EOF'
#!/bin/bash
echo "üåê Starting Browser MCP Server..."
npx @browsermcp/mcp@latest
EOF

    # L√†m executable
    chmod +x "$MCP_CONFIG/start-playwright.sh"
    chmod +x "$MCP_CONFIG/start-memory.sh"
    chmod +x "$MCP_CONFIG/start-browser.sh"

    echo "‚úÖ ƒê√£ t·∫°o scripts kh·ªüi ƒë·ªông MCP servers"
    echo "üìç Scripts location: $MCP_CONFIG/"
}

# Function ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
check_status() {
    echo "üìä MCP Servers Status:"
    echo "======================"

    # Ki·ªÉm tra Playwright
    if pgrep -f "playwright" > /dev/null; then
        echo "‚úÖ Playwright MCP: Running"
    else
        echo "‚ùå Playwright MCP: Stopped"
    fi

    # Ki·ªÉm tra Memory
    if pgrep -f "server-memory" > /dev/null; then
        echo "‚úÖ Memory MCP: Running"
    else
        echo "‚ùå Memory MCP: Stopped"
    fi

    # Ki·ªÉm tra Browser
    if pgrep -f "browsermcp" > /dev/null; then
        echo "‚úÖ Browser MCP: Running"
    else
        echo "‚ùå Browser MCP: Stopped"
    fi

    echo ""
    echo "üìÅ Memory file: $MEMORY_FILE"
    echo "üìÅ MCP config: $HOME/Library/Application Support/Code/User/mcp.json"
}

# Function ƒë·ªÉ test c√°c servers
test_servers() {
    echo "üß™ Testing MCP servers..."

    # Test Playwright
    echo "Testing Playwright MCP..."
    timeout 5s npx @playwright/mcp@latest --help > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ Playwright MCP: OK"
    else
        echo "‚ùå Playwright MCP: Failed"
    fi

    # Test Memory
    echo "Testing Memory MCP..."
    timeout 5s bash "$MCP_CONFIG/start-memory.sh" > /dev/null 2>&1 &
    sleep 2
    if pgrep -f "server-memory" > /dev/null; then
        echo "‚úÖ Memory MCP: OK"
        pkill -f "server-memory"
    else
        echo "‚ùå Memory MCP: Failed"
    fi

    # Test Browser
    echo "Testing Browser MCP..."
    timeout 5s npx @browsermcp/mcp@latest --help > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ Browser MCP: OK"
    else
        echo "‚ùå Browser MCP: Failed"
    fi
}

# Function ƒë·ªÉ d·ª´ng t·∫•t c·∫£ servers
stop_servers() {
    echo "üõë ƒêang d·ª´ng t·∫•t c·∫£ MCP servers..."

    # D·ª´ng Playwright
    pkill -f "playwright" 2>/dev/null && echo "‚úÖ ƒê√£ d·ª´ng Playwright MCP"

    # D·ª´ng Memory
    pkill -f "server-memory" 2>/dev/null && echo "‚úÖ ƒê√£ d·ª´ng Memory MCP"

    # D·ª´ng Browser
    pkill -f "browsermcp" 2>/dev/null && echo "‚úÖ ƒê√£ d·ª´ng Browser MCP"

    echo "‚úÖ T·∫•t c·∫£ MCP servers ƒë√£ ƒë∆∞·ª£c d·ª´ng"
}

# Function ƒë·ªÉ kh·ªüi ƒë·ªông t·∫•t c·∫£ servers
start_all_servers() {
    echo "üöÄ ƒêang kh·ªüi ƒë·ªông t·∫•t c·∫£ MCP servers..."

    # D·ª´ng servers c≈© tr∆∞·ªõc
    stop_servers

    # Kh·ªüi ƒë·ªông Playwright
    echo "üé≠ Starting Playwright MCP..."
    nohup "$MCP_CONFIG/start-playwright.sh" > "$MCP_CONFIG/playwright.log" 2>&1 &
    echo $! > "$MCP_CONFIG/playwright.pid"

    # Kh·ªüi ƒë·ªông Memory
    echo "üß† Starting Memory MCP..."
    nohup "$MCP_CONFIG/start-memory.sh" > "$MCP_CONFIG/memory.log" 2>&1 &
    echo $! > "$MCP_CONFIG/memory.pid"

    # Kh·ªüi ƒë·ªông Browser
    echo "üåê Starting Browser MCP..."
    nohup "$MCP_CONFIG/start-browser.sh" > "$MCP_CONFIG/browser.log" 2>&1 &
    echo $! > "$MCP_CONFIG/browser.pid"

    sleep 2
    check_status
}

# Main script logic
case "$1" in
    "start")
        check_dependencies && start_all_servers
        ;;
    "stop")
        stop_servers
        ;;
    "restart")
        stop_servers
        sleep 2
        check_dependencies && start_all_servers
        ;;
    "status")
        check_status
        ;;
    "test")
        test_servers
        ;;
    "setup")
        check_dependencies && start_mcp_servers
        ;;
    "logs")
        echo "üìã MCP Server Logs:"
        echo "==================="
        echo "Playwright: $MCP_CONFIG/playwright.log"
        echo "Memory: $MCP_CONFIG/memory.log"
        echo "Browser: $MCP_CONFIG/browser.log"
        echo ""
        echo "Use 'tail -f <log_file>' to view logs"
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|test|setup|logs}"
        echo ""
        echo "Auto MCP Manager cho Audio T√†i L·ªôc:"
        echo "  start   - Kh·ªüi ƒë·ªông t·∫•t c·∫£ MCP servers"
        echo "  stop    - D·ª´ng t·∫•t c·∫£ MCP servers"
        echo "  restart - Restart t·∫•t c·∫£ MCP servers"
        echo "  status  - Hi·ªÉn th·ªã tr·∫°ng th√°i c√°c servers"
        echo "  test    - Test c√°c MCP servers"
        echo "  setup   - Thi·∫øt l·∫≠p MCP servers"
        echo "  logs    - Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n logs"
        exit 1
        ;;
esac
