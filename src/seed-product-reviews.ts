/*
  Product Reviews Seed Script - T·∫°o d·ªØ li·ªáu reviews cho c√°c s·∫£n ph·∫©m
  Usage: npx ts-node src/seed-product-reviews.ts
*/
import { PrismaClient } from '@prisma/client';
import 'dotenv/config';

const prisma = new PrismaClient();

async function main() {
  console.log('üåü Seeding product reviews...');

  // Get all products
  const products = await prisma.products.findMany({
    where: { isDeleted: false, isActive: true },
    take: 50 // Limit to first 50 products
  });

  if (products.length === 0) {
    console.log('‚ùå No products found. Please seed products first.');
    return;
  }

  console.log(`üì¶ Found ${products.length} products to create reviews for`);

  // Create or get some users for reviews
  const users = [];
  for (let i = 1; i <= 10; i++) {
    let user = await prisma.users.findFirst({
      where: { email: `reviewer${i}@example.com` }
    });

    if (!user) {
      user = await prisma.users.create({
        data: {
          id: `user_${i}`,
          email: `reviewer${i}@example.com`,
          password: '$2a$10$PasswordHashHere', // Use bcrypt hash in production
          name: `Reviewer ${i}`,
          role: 'USER',
          updatedAt: new Date()
        }
      });
    }

    users.push(user);
  }

  console.log(`üë• Using ${users.length} users to create reviews`);

  // Sample review templates
  const reviewTemplates = [
    {
      title: 'S·∫£n ph·∫©m tuy·ªát v·ªùi, ch·∫•t l∆∞·ª£ng cao!',
      comments: [
        'T√¥i r·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y. √Çm thanh r·∫•t r√µ r√†ng v√† chi ti·∫øt.',
        'Ch·∫•t l∆∞·ª£ng build r·∫•t t·ªët, x·ª©ng ƒë√°ng v·ªõi gi√° ti·ªÅn b·ªè ra.',
        'D·ªÖ d√†ng setup v√† s·ª≠ d·ª•ng. R·∫•t recommend cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.',
        '√Çm thanh hay h∆°n nhi·ªÅu so v·ªõi expectation. Bass r·∫•t m·∫°nh v√† s√¢u.',
        'Thi·∫øt k·∫ø ƒë·∫πp, ph√π h·ª£p v·ªõi kh√¥ng gian ph√≤ng kh√°ch hi·ªán ƒë·∫°i.'
      ]
    },
    {
      title: 'Gi√° tr·ªã t·ªët cho ti·ªÅn b·ªè ra',
      comments: [
        'V·ªõi m·ª©c gi√° n√†y, ƒë√¢y l√† l·ª±a ch·ªçn t·ªët nh·∫•t tr√™n th·ªã tr∆∞·ªùng.',
        'Ch·∫•t l∆∞·ª£ng √¢m thanh v∆∞·ª£t tr·ªôi so v·ªõi c√°c s·∫£n ph·∫©m c√πng ph√¢n kh√∫c.',
        'ƒê√£ s·ª≠ d·ª•ng ƒë∆∞·ª£c 3 th√°ng, ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh, kh√¥ng c√≥ v·∫•n ƒë·ªÅ g√¨.',
        '√Çm thanh balanced, ph√π h·ª£p v·ªõi nhi·ªÅu th·ªÉ lo·∫°i nh·∫°c kh√°c nhau.',
        'B·∫£o h√†nh v√† d·ªãch v·ª• h·∫≠u m√£i r·∫•t t·ªët t·ª´ Audio T√†i L·ªôc.'
      ]
    },
    {
      title: '√Çm thanh xu·∫•t s·∫Øc',
      comments: [
        '√Çm thanh trong tr·∫ªo, chi ti·∫øt cao, bass s√¢u v√† m·∫°nh m·∫Ω.',
        'Mid v√† treble r·∫•t r√µ r√†ng, kh√¥ng b·ªã ch√≥i hay m·ªù.',
        'Ph√π h·ª£p cho c·∫£ nghe nh·∫°c v√† xem phim.',
        'C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh EQ ƒë·ªÉ ph√π h·ª£p v·ªõi s·ªü th√≠ch c√° nh√¢n.',
        'So v·ªõi c√°c s·∫£n ph·∫©m kh√°c c√πng gi√°, ƒë√¢y l√† l·ª±a ch·ªçn t·ªët nh·∫•t.'
      ]
    },
    {
      title: 'D·ªÖ s·ª≠ d·ª•ng, ph√π h·ª£p v·ªõi ng∆∞·ªùi m·ªõi',
      comments: [
        'Giao di·ªán ƒë∆°n gi·∫£n, d·ªÖ thao t√°c v√† ƒëi·ªÅu ch·ªânh.',
        'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng r√µ r√†ng, setup nhanh ch√≥ng.',
        'C√≥ nhi·ªÅu preset √¢m thanh cho ng∆∞·ªùi m·ªõi s·ª≠ d·ª•ng.',
        'K·∫øt n·ªëi bluetooth ·ªïn ƒë·ªãnh, kh√¥ng b·ªã lag.',
        'Ph√π h·ª£p cho gia ƒë√¨nh c√≥ tr·∫ª em s·ª≠ d·ª•ng.'
      ]
    },
    {
      title: 'Thi·∫øt k·∫ø ƒë·∫πp, ch·∫•t l∆∞·ª£ng cao',
      comments: [
        'Thi·∫øt k·∫ø sang tr·ªçng, ph√π h·ª£p v·ªõi n·ªôi th·∫•t hi·ªán ƒë·∫°i.',
        'V·∫≠t li·ªáu cao c·∫•p, ch·∫Øc ch·∫Øn v√† b·ªÅn b·ªâ.',
        'K√≠ch th∆∞·ªõc v·ª´a ph·∫£i, kh√¥ng chi·∫øm nhi·ªÅu di·ªán t√≠ch.',
        'M√†u s·∫Øc ƒë·∫πp, kh√¥ng b·ªã x∆∞·ªõc hay b√°m d·∫•u tay.',
        'Logo v√† branding r·∫•t tinh t·∫ø v√† chuy√™n nghi·ªáp.'
      ]
    }
  ];

  // Create reviews for each product
  let totalReviews = 0;
  for (const product of products) {
    // Random number of reviews per product (2-8 reviews)
    const numReviews = Math.floor(Math.random() * 7) + 2;

    for (let i = 0; i < numReviews; i++) {
      const template = reviewTemplates[Math.floor(Math.random() * reviewTemplates.length)];
      const comment = template.comments[Math.floor(Math.random() * template.comments.length)];

      // Random rating (3-5 stars, weighted towards higher ratings)
      const ratings = [3, 4, 4, 4, 5, 5, 5, 5];
      const rating = ratings[Math.floor(Math.random() * ratings.length)];

      // Random user
      const user = users[Math.floor(Math.random() * users.length)];

      // Random verification status (70% verified)
      const isVerified = Math.random() < 0.7;

      // Random creation date within last 6 months
      const now = new Date();
      const sixMonthsAgo = new Date(now.getTime() - (6 * 30 * 24 * 60 * 60 * 1000));
      const createdAt = new Date(sixMonthsAgo.getTime() + Math.random() * (now.getTime() - sixMonthsAgo.getTime()));

      try {
        const review = await prisma.product_reviews.create({
          data: {
            userId: user.id,
            productId: product.id,
            rating: rating,
            title: template.title,
            comment: comment,
            isVerified: isVerified,
            status: 'APPROVED',
            upvotes: Math.floor(Math.random() * 15), // 0-15 upvotes
            downvotes: Math.floor(Math.random() * 3), // 0-2 downvotes
            createdAt: createdAt,
            updatedAt: createdAt
          }
        });

        totalReviews++;

        // Add some review votes (optional)
        if (Math.random() < 0.3) { // 30% chance to add votes
          const numVotes = Math.floor(Math.random() * 3) + 1; // 1-3 votes
          for (let v = 0; v < numVotes; v++) {
            const voter = users[Math.floor(Math.random() * users.length)];
            if (voter.id !== user.id) { // Don't vote for own review
              try {
                await prisma.product_review_votes.create({
                  data: {
                    reviewId: review.id,
                    userId: voter.id,
                    isUpvote: Math.random() < 0.8 // 80% upvotes
                  }
                });
              } catch (voteError) {
                // Ignore duplicate vote errors
              }
            }
          }
        }

      } catch (error) {
        console.error(`‚ùå Error creating review for product ${product.name}:`, error.message);
      }
    }
  }

  console.log(`\n‚úÖ Successfully created ${totalReviews} product reviews!`);

  // Show summary statistics
  const totalReviewCount = await prisma.product_reviews.count();
  const verifiedCount = await prisma.product_reviews.count({ where: { isVerified: true } });
  const avgRating = await prisma.product_reviews.aggregate({ _avg: { rating: true } });

  console.log('\nüìä Reviews Summary:');
  console.log(`   ‚Ä¢ Total Reviews: ${totalReviewCount}`);
  console.log(`   ‚Ä¢ Verified Reviews: ${verifiedCount} (${((verifiedCount/totalReviewCount)*100).toFixed(1)}%)`);
  console.log(`   ‚Ä¢ Average Rating: ${avgRating._avg.rating?.toFixed(2) || 'N/A'}/5.0`);

  // Show reviews per product
  console.log('\nüìã Reviews per Product:');
  for (const product of products.slice(0, 10)) { // Show first 10 products
    const reviewCount = await prisma.product_reviews.count({ where: { productId: product.id } });
    if (reviewCount > 0) {
      console.log(`   ‚Ä¢ ${product.name}: ${reviewCount} reviews`);
    }
  }

  console.log('\nüéØ Reviews seeding completed successfully!');
  console.log('üì± Dashboard: http://localhost:3001');
  console.log('üîê Login: admin@audiotailoc.com / password123');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå Seeding failed:', e);
    await prisma.$disconnect();
    process.exit(1);
  });
