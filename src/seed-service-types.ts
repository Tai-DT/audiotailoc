/*
  Service Types Seed Script - T·∫°o d·ªØ li·ªáu m·∫´u cho Service Types
  Usage: npx ts-node src/seed-service-types.ts
*/
import { PrismaClient } from '@prisma/client';
import 'dotenv/config';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding service types...');

  const serviceTypes = [
    {
      id: 'st-home-theater',
      name: 'Home Theater',
      description: 'H·ªá th·ªëng √¢m thanh r·∫°p phim gia ƒë√¨nh v·ªõi c√¥ng ngh·ªá surround sound hi·ªán ƒë·∫°i',
      icon: 'üé¨',
      color: '#3B82F6',
      sortOrder: 1,
      slug: 'home-theater',
      isActive: true,
      updatedAt: new Date(),
    },
    {
      id: 'st-commercial-audio',
      name: 'Commercial Audio',
      description: 'Gi·∫£i ph√°p √¢m thanh chuy√™n nghi·ªáp cho vƒÉn ph√≤ng, c·ª≠a h√†ng v√† kh√¥ng gian th∆∞∆°ng m·∫°i',
      icon: 'üè¢',
      color: '#10B981',
      sortOrder: 2,
      slug: 'commercial-audio',
      isActive: true,
      updatedAt: new Date(),
    },
    {
      id: 'st-karaoke-system',
      name: 'Karaoke System',
      description: 'H·ªá th·ªëng karaoke chuy√™n nghi·ªáp cho ph√≤ng h√°t v√† gi·∫£i tr√≠',
      icon: 'üé§',
      color: '#F59E0B',
      sortOrder: 3,
      slug: 'karaoke-system',
      isActive: true,
      updatedAt: new Date(),
    },
    {
      id: 'st-restaurant-audio',
      name: 'Restaurant Audio',
      description: '√Çm thanh ch·∫•t l∆∞·ª£ng cao cho nh√† h√†ng v√† qu√°n ƒÉn',
      icon: 'üçΩÔ∏è',
      color: '#EF4444',
      sortOrder: 4,
      slug: 'restaurant-audio',
      isActive: true,
      updatedAt: new Date(),
    },
    {
      id: 'st-studio-recording',
      name: 'Studio Recording',
      description: 'Thi·∫øt b·ªã thu √¢m chuy√™n nghi·ªáp cho studio v√† podcast',
      icon: 'üéµ',
      color: '#8B5CF6',
      sortOrder: 5,
      slug: 'studio-recording',
      isActive: true,
      updatedAt: new Date(),
    },
    {
      id: 'st-conference-system',
      name: 'Conference System',
      description: 'H·ªá th·ªëng √¢m thanh h·ªôi ngh·ªã v√† h·ªôi th·∫£o chuy√™n nghi·ªáp',
      icon: 'üéôÔ∏è',
      color: '#06B6D4',
      sortOrder: 6,
      slug: 'conference-system',
      isActive: true,
      updatedAt: new Date(),
    },
    {
      id: 'st-outdoor-audio',
      name: 'Outdoor Audio',
      description: 'Gi·∫£i ph√°p √¢m thanh ngo√†i tr·ªùi ch·ªëng th·ªùi ti·∫øt',
      icon: 'üåû',
      color: '#84CC16',
      sortOrder: 7,
      slug: 'outdoor-audio',
      isActive: true,
      updatedAt: new Date(),
    },
    {
      id: 'st-sound-reinforcement',
      name: 'Sound Reinforcement',
      description: 'H·ªá th·ªëng khu·∫øch ƒë·∫°i √¢m thanh cho s·ª± ki·ªán v√† bi·ªÉu di·ªÖn',
      icon: 'üîä',
      color: '#F97316',
      sortOrder: 8,
      slug: 'sound-reinforcement',
      isActive: true,
      updatedAt: new Date(),
    },
  ];

  console.log(`üìù Creating ${serviceTypes.length} service types...`);

  for (const serviceTypeData of serviceTypes) {
    try {
      // Check if service type exists
      const existing = await prisma.service_types.findUnique({
        where: { slug: serviceTypeData.slug }
      });

      if (existing) {
        console.log(`‚úì Updating service type: ${serviceTypeData.name}`);
        await prisma.service_types.update({
          where: { slug: serviceTypeData.slug },
          data: serviceTypeData
        });
      } else {
        console.log(`‚úì Creating service type: ${serviceTypeData.name}`);
        await prisma.service_types.create({
          data: serviceTypeData
        });
      }
    } catch (error) {
      console.error(`‚úó Error with service type ${serviceTypeData.name}:`, error);
    }
  }

  console.log('‚úÖ Service types seeding completed!');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå Seeding failed:', e);
    await prisma.$disconnect();
    process.exit(1);
  });