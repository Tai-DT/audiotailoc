type Product = {
  id: string;
  slug: string;
  name: string;
  description?: string | null;
  priceCents: number;
  imageUrl?: string | null;
};

type ProductList = { items: Product[]; total: number; page: number; pageSize: number };
type Category = { id: string; slug: string; name: string };

async function fetchProducts(params: { page?: number; pageSize?: number }): Promise<ProductList> {
  const base = process.env.NEXT_PUBLIC_API_BASE_URL;
  if (!base) throw new Error('Missing NEXT_PUBLIC_API_BASE_URL');
  const u = new URL(`${base}/catalog/products`);
  if (params.page) u.searchParams.set('page', String(params.page));
  if (params.pageSize) u.searchParams.set('pageSize', String(params.pageSize));
  const res = await fetch(u.toString(), { cache: 'no-store' });
  if (!res.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m');
  const data = (await res.json()) as ProductList;
  return data;
}

import Link from 'next/link';
import Image from 'next/image';
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'S·∫£n ph·∫©m',
  description: 'Kh√°m ph√° b·ªô s∆∞u t·∫≠p ƒë·∫ßy ƒë·ªß c√°c s·∫£n ph·∫©m audio ch·∫•t l∆∞·ª£ng cao. Tai nghe, loa, ampli v√† ph·ª• ki·ªán √¢m thanh ch√≠nh h√£ng v·ªõi nhi·ªÅu l·ª±a ch·ªçn gi√° c·∫£.',
  openGraph: {
    title: 'S·∫£n ph·∫©m Audio - Audio T√†i L·ªôc',
    description: 'Kh√°m ph√° b·ªô s∆∞u t·∫≠p ƒë·∫ßy ƒë·ªß c√°c s·∫£n ph·∫©m audio ch·∫•t l∆∞·ª£ng cao.',
    url: '/products',
  },
};
async function fetchCategories(): Promise<Category[]> {
  const base = process.env.NEXT_PUBLIC_API_BASE_URL;
  if (!base) throw new Error('Missing NEXT_PUBLIC_API_BASE_URL');
  const res = await fetch(`${base}/catalog/categories`, { cache: 'no-store' });
  if (!res.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i danh m·ª•c');
  return (await res.json()) as Category[];
}

async function searchProducts(params: { q?: string; page?: number; pageSize?: number; categoryId?: string; minPrice?: number; maxPrice?: number }) {
  const base = process.env.NEXT_PUBLIC_API_BASE_URL;
  if (!base) throw new Error('Missing NEXT_PUBLIC_API_BASE_URL');
  // Try AI semantic search first
  if (params.q) {
    try {
      const u1 = new URL(`${base}/ai/search`);
      u1.searchParams.set('q', String(params.q));
      const ai = await fetch(u1.toString(), { cache: 'no-store' }).then((r) => r.json());
      const items = Array.isArray(ai.items) ? ai.items : ai;
      const hits = (items || []).map((it: any) => ({
        id: it.product?.id || it.id,
        slug: it.product?.slug || it.slug,
        name: it.product?.name || it.title || 'K·∫øt qu·∫£',
        description: it.product?.description || it.content || null,
        priceCents: it.product?.priceCents || 0,
        imageUrl: it.product?.imageUrl || null,
      })) as Product[];
      return { hits, estimatedTotalHits: hits.length, page: params.page || 1, pageSize: params.pageSize || hits.length } as any;
    } catch {}
  }
  // Fallback keyword search
  const u = new URL(`${base}/catalog/search`);
  if (params.q) u.searchParams.set('q', String(params.q));
  if (params.page) u.searchParams.set('page', String(params.page));
  if (params.pageSize) u.searchParams.set('pageSize', String(params.pageSize));
  if (params.categoryId) u.searchParams.set('categoryId', params.categoryId);
  if (typeof params.minPrice === 'number') u.searchParams.set('minPrice', String(params.minPrice));
  if (typeof params.maxPrice === 'number') u.searchParams.set('maxPrice', String(params.maxPrice));
  const res = await fetch(u.toString(), { cache: 'no-store' });
  if (!res.ok) throw new Error('Kh√¥ng th·ªÉ t√¨m ki·∫øm');
  return (await res.json()) as { hits: Product[]; estimatedTotalHits?: number; page: number; pageSize: number; facetDistribution?: { categoryId?: Record<string, number> } };
}

export default async function ProductsPage({ searchParams }: { searchParams: Promise<{ page?: string; q?: string; categoryId?: string; minPrice?: string; maxPrice?: string }> }) {
  const sp = await searchParams;
  const page = Math.max(1, parseInt(String(sp?.page ?? '1'), 10) || 1);
  const pageSize = 12;
  const q = sp?.q ?? '';
  const categoryId = sp?.categoryId || undefined;
  const minPrice = sp?.minPrice ? Number(sp.minPrice) : undefined;
  const maxPrice = sp?.maxPrice ? Number(sp.maxPrice) : undefined;
  const cats = await fetchCategories();
  let items: Product[] = [];
  let total = 0;
  if (q || categoryId || typeof minPrice === 'number' || typeof maxPrice === 'number') {
    const res = await searchProducts({ q, page, pageSize, categoryId, minPrice, maxPrice });
    items = res.hits;
    total = res.estimatedTotalHits ?? res.hits.length;
  } else {
    const list = await fetchProducts({ page, pageSize });
    items = list.items;
    total = list.total;
  }
  const totalPages = Math.max(1, Math.ceil(total / pageSize));
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-4">Danh s√°ch s·∫£n ph·∫©m</h1>
        <form className="flex flex-wrap gap-4 items-center p-4 bg-gray-50 rounded-lg">
          <input
            type="text"
            name="q"
            placeholder="T√¨m ki·∫øm..."
            defaultValue={q}
            className="flex-1 min-w-[200px] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <select
            name="categoryId"
            defaultValue={categoryId ?? ''}
            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            aria-label="Ch·ªçn danh m·ª•c s·∫£n ph·∫©m"
          >
            <option value="">T·∫•t c·∫£ danh m·ª•c</option>
            {cats.map((c) => (
              <option key={c.id} value={c.id}>
                {c.name}
              </option>
            ))}
          </select>
          <input
            name="minPrice"
            type="number"
            min={0}
            placeholder="Gi√° t·ª´"
            defaultValue={minPrice ?? ''}
            className="w-32 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <input
            name="maxPrice"
            type="number"
            min={0}
            placeholder="Gi√° ƒë·∫øn"
            defaultValue={maxPrice ?? ''}
            className="w-32 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button
            type="submit"
            className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            L·ªçc
          </button>
        </form>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mb-8">
        {items.map((p) => (
          <div key={p.id} className="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow overflow-hidden">
            <div className="aspect-square relative overflow-hidden">
              {p.imageUrl ? (
                <Image
                  src={p.imageUrl}
                  alt={p.name}
                  fill
                  className="object-cover hover:scale-105 transition-transform duration-300"
                  sizes="(max-width: 768px) 50vw, (max-width: 1200px) 33vw, 25vw"
                />
              ) : (
                <div className="w-full h-full bg-gray-100 flex items-center justify-center">
                  <span className="text-gray-400 text-4xl">üéµ</span>
                </div>
              )}
            </div>
            <div className="p-4">
              <h3 className="font-semibold text-lg mb-2 line-clamp-2">
                <Link href={`/products/${p.slug}`} className="hover:text-blue-600 transition-colors">
                  {p.name}
                </Link>
              </h3>
              <p className="text-gray-600 text-sm mb-3 line-clamp-2">
                {p.description ?? 'Kh√¥ng c√≥ m√¥ t·∫£'}
              </p>
              <div className="flex items-center justify-between">
                <span className="text-xl font-bold text-blue-600">
                  {(p.priceCents / 100).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>
      {/* Pagination */}
      <div className="flex items-center justify-center space-x-4">
        {page > 1 ? (
          <Link
            href={`/products?${new URLSearchParams({ q, page: String(page - 1), categoryId: categoryId ?? '', minPrice: String(minPrice ?? ''), maxPrice: String(maxPrice ?? '') }).toString()}`}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            ‚Üê Trang tr∆∞·ªõc
          </Link>
        ) : (
          <div className="px-4 py-2 bg-gray-300 text-gray-500 rounded-md cursor-not-allowed">
            ‚Üê Trang tr∆∞·ªõc
          </div>
        )}

        <span className="px-4 py-2 bg-gray-100 rounded-md font-medium">
          Trang {page}/{totalPages}
        </span>

        {page < totalPages ? (
          <Link
            href={`/products?${new URLSearchParams({ q, page: String(page + 1), categoryId: categoryId ?? '', minPrice: String(minPrice ?? ''), maxPrice: String(maxPrice ?? '') }).toString()}`}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            Trang sau ‚Üí
          </Link>
        ) : (
          <div className="px-4 py-2 bg-gray-300 text-gray-500 rounded-md cursor-not-allowed">
            Trang sau ‚Üí
          </div>
        )}
      </div>
    </div>
  );
}
