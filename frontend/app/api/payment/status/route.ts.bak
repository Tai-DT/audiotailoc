import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const orderId = searchParams.get('orderId');
  const paymentMethod = searchParams.get('paymentMethod');

  if (!orderId || !paymentMethod) {
    return NextResponse.json(
      { error: 'Missing required parameters' },
      { status: 400 }
    );
  }

  try {
    if (paymentMethod === 'payos') {
      const status = await checkPayOSStatus(orderId);
      return NextResponse.json({
        success: true,
        paymentMethod: 'payos',
        orderId,
        status,
        message: 'PayOS payment status retrieved'
      });
    }

    if (paymentMethod === 'cos') {
      const status = await checkCODStatus(orderId);
      return NextResponse.json({
        success: true,
        paymentMethod: 'cos',
        orderId,
        status,
        message: 'COD order status retrieved'
      });
    }

    return NextResponse.json(
      { error: 'Invalid payment method' },
      { status: 400 }
    );

  } catch (error) {
    console.error('Payment status check error:', error);
    return NextResponse.json(
      { error: 'Failed to check payment status' },
      { status: 500 }
    );
  }
}

async function checkPayOSStatus(orderId: string) {
  try {
    // Check if we have real PayOS credentials
    const hasRealCredentials = process.env.PAYOS_PARTNER_CODE &&
                              process.env.PAYOS_API_KEY &&
                              process.env.PAYOS_CHECKSUM_KEY &&
                              process.env.PAYOS_PARTNER_CODE !== 'demo_partner_code';

    if (hasRealCredentials) {
      // Use real PayOS API
      return await checkRealPayOSStatus(orderId);
    } else {
      // Use demo mode
      return await checkDemoPayOSStatus(orderId);
    }

  } catch (error) {
    console.error('PayOS status check error:', error);
    throw new Error('Failed to check PayOS payment status');
  }
}

async function checkRealPayOSStatus(orderId: string) {
  try {
    // Call PayOS API to get payment status
    const verifyUrl = process.env.PAYOS_VERIFY_PAYMENT_URL!.replace('{orderCode}', orderId);

    const response = await fetch(verifyUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': process.env.PAYOS_API_KEY!,
        'x-partner-code': process.env.PAYOS_PARTNER_CODE!,
      },
    });

    if (!response.ok) {
      throw new Error(`PayOS API error: ${response.status} ${response.statusText}`);
    }

    const result = await response.json();

    if (result.code === '00') {
      const paymentData = result.data;

      // Map PayOS status to our format
      let status = 'PENDING';
      if (paymentData.status === 'PAID') {
        status = 'COMPLETED';
      } else if (paymentData.status === 'CANCELLED') {
        status = 'FAILED';
      } else if (paymentData.status === 'PENDING') {
        status = 'PENDING';
      }

      return {
        status: status,
        transactionId: paymentData.reference || `PAYOS-${orderId}`,
        amount: paymentData.amount,
        currency: 'VND',
        createdAt: new Date(paymentData.createdAt * 1000).toISOString(),
        completedAt: paymentData.paidAt ? new Date(paymentData.paidAt * 1000).toISOString() : null,
        description: paymentData.description,
        paymentMethod: 'PayOS',
      };
    } else {
      throw new Error(`PayOS error: ${result.desc || 'Unknown error'}`);
    }

  } catch (error) {
    console.error('PayOS real status check error:', error);
    throw new Error('Failed to check real PayOS payment status');
  }
}

async function checkDemoPayOSStatus(orderId: string) {
  // Demo mode - simulate random status
  const statuses = ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED'];
  const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];

  return {
    status: randomStatus,
    transactionId: `DEMO-${Date.now()}`,
    amount: 1500000, // Mock amount
    currency: 'VND',
    createdAt: new Date().toISOString(),
    completedAt: randomStatus === 'COMPLETED' ? new Date().toISOString() : null,
    description: 'Audio Tai Loc Order (Demo)',
    paymentMethod: 'PayOS (Demo)',
  };
}

async function checkCODStatus(orderId: string) {
  // Mock COD status check - in real implementation, check database
  // Possible statuses: PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED

  return {
    status: 'PENDING',
    orderId,
    createdAt: new Date().toISOString(),
    estimatedDelivery: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString()
  };
}
