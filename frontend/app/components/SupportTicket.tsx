"use client"

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

interface SupportTicketFormProps {
  onSubmit?: (ticket: any) => void;
  userEmail?: string;
  userName?: string;
}

export default function SupportTicketForm({ 
  onSubmit, 
  userEmail = '', 
  userName = '' 
}: SupportTicketFormProps) {
  const [formData, setFormData] = useState({
    subject: '',
    description: '',
    email: userEmail,
    name: userName,
    priority: 'MEDIUM' as 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT',
  });
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.subject.trim() || !formData.description.trim() || !formData.email.trim() || !formData.name.trim()) {
      setError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/support/tickets', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        const ticket = await response.json();
        setSubmitted(true);
        if (onSubmit) {
          onSubmit(ticket);
        }
      } else {
        throw new Error('Failed to create ticket');
      }
    } catch (err) {
      setError('C√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (error) setError('');
  };

  if (submitted) {
    return (
      <Card className="max-w-2xl mx-auto">
        <CardContent className="pt-6">
          <div className="text-center py-8">
            <div className="text-6xl mb-4">‚úÖ</div>
            <h3 className="text-xl font-semibold mb-2">Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!</h3>
            <p className="text-gray-600 mb-4">
              Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu h·ªó tr·ª£ c·ªßa b·∫°n v√† s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.
            </p>
            <p className="text-sm text-gray-500">
              B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n v√† c·∫≠p nh·∫≠t v·ªÅ tr·∫°ng th√°i y√™u c·∫ßu.
            </p>
            <Button 
              onClick={() => {
                setSubmitted(false);
                setFormData({
                  subject: '',
                  description: '',
                  email: userEmail,
                  name: userName,
                  priority: 'MEDIUM',
                });
              }}
              className="mt-4"
            >
              G·ª≠i y√™u c·∫ßu kh√°c
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>G·ª≠i y√™u c·∫ßu h·ªó tr·ª£</CardTitle>
        <CardDescription>
          M√¥ t·∫£ v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i v√† ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          {error && (
            <div className="p-3 bg-red-50 border border-red-200 rounded-md">
              <p className="text-red-600 text-sm">{error}</p>
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium mb-2">
                H·ªç v√† t√™n *
              </label>
              <Input
                id="name"
                type="text"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                placeholder="Nh·∫≠p h·ªç v√† t√™n"
                required
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium mb-2">
                Email *
              </label>
              <Input
                id="email"
                type="email"
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                required
              />
            </div>
          </div>

          <div>
            <label htmlFor="priority" className="block text-sm font-medium mb-2">
              M·ª©c ƒë·ªô ∆∞u ti√™n
            </label>
            <select
              id="priority"
              value={formData.priority}
              onChange={(e) => handleInputChange('priority', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="LOW">Th·∫•p</option>
              <option value="MEDIUM">Trung b√¨nh</option>
              <option value="HIGH">Cao</option>
              <option value="URGENT">Kh·∫©n c·∫•p</option>
            </select>
          </div>

          <div>
            <label htmlFor="subject" className="block text-sm font-medium mb-2">
              Ti√™u ƒë·ªÅ *
            </label>
            <Input
              id="subject"
              type="text"
              value={formData.subject}
              onChange={(e) => handleInputChange('subject', e.target.value)}
              placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·∫•n ƒë·ªÅ"
              required
            />
          </div>

          <div>
            <label htmlFor="description" className="block text-sm font-medium mb-2">
              M√¥ t·∫£ chi ti·∫øt *
            </label>
            <textarea
              id="description"
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              placeholder="M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i, bao g·ªìm c√°c b∆∞·ªõc ƒë√£ th·ª±c hi·ªán v√† k·∫øt qu·∫£ mong mu·ªën"
              rows={6}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 resize-vertical"
              required
            />
          </div>

          <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
            <h4 className="text-sm font-medium text-blue-900 mb-2">üí° M·∫πo ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh h∆°n:</h4>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>‚Ä¢ M√¥ t·∫£ r√µ r√†ng v·∫•n ƒë·ªÅ v√† c√°c b∆∞·ªõc ƒë√£ th·ª±c hi·ªán</li>
              <li>‚Ä¢ Cung c·∫•p th√¥ng tin s·∫£n ph·∫©m (t√™n, model, s·ªë serial n·∫øu c√≥)</li>
              <li>‚Ä¢ ƒê√≠nh k√®m ·∫£nh ch·ª•p m√†n h√¨nh n·∫øu c√≥ l·ªói hi·ªÉn th·ªã</li>
              <li>‚Ä¢ Cho bi·∫øt th·ªùi gian x·∫£y ra v·∫•n ƒë·ªÅ</li>
            </ul>
          </div>

          <div className="flex justify-end space-x-3">
            <Button
              type="button"
              variant="outline"
              onClick={() => {
                setFormData({
                  subject: '',
                  description: '',
                  email: userEmail,
                  name: userName,
                  priority: 'MEDIUM',
                });
                setError('');
              }}
            >
              ƒê·∫∑t l·∫°i
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  ƒêang g·ª≠i...
                </>
              ) : (
                'G·ª≠i y√™u c·∫ßu'
              )}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
