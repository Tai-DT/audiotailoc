"use client"

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { User, Mail, Phone, MapPin, Calendar, Shield, ShoppingBag, Heart, Settings } from 'lucide-react';
import Link from 'next/link';

interface UserProfile {
  id: string;
  name: string;
  email: string;
  phone?: string;
  address?: string;
  role: string;
  createdAt: string;
  updatedAt: string;
}

interface Order {
  id: string;
  orderNo: string;
  status: string;
  totalCents: number;
  createdAt: string;
  items: any[];
}

export default function ProfilePage() {
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editing, setEditing] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    address: ''
  });

  useEffect(() => {
    fetchProfile();
    fetchOrders();
  }, []);

  const fetchProfile = async () => {
    try {
      const response = await fetch('/api/auth/me', { cache: 'no-store' });

      if (response.ok) {
        const userData = await response.json();
        setProfile(userData);
        setFormData({
          name: userData.name || '',
          email: userData.email || '',
          phone: userData.phone || '',
          address: userData.address || ''
        });
      } else if (response.status === 401) {
        setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin c√° nh√¢n');
      } else {
        setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c√° nh√¢n');
      }
    } catch (error) {
      setError('L·ªói k·∫øt n·ªëi');
    } finally {
      setLoading(false);
    }
  };

  const fetchOrders = async () => {
    try {
      const response = await fetch('/api/orders?limit=5', { cache: 'no-store' });

      if (response.ok) {
        const data = await response.json();
        setOrders(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch orders:', error);
    }
  };

  const handleUpdateProfile = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch('/api/users/profile', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        await fetchProfile();
        setEditing(false);
        alert('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
      } else {
        setError('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin');
      }
    } catch (error) {
      setError('L·ªói k·∫øt n·ªëi');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4">ƒêang t·∫£i th√¥ng tin...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">‚ùå</div>
          <h2 className="text-2xl font-bold mb-2">C√≥ l·ªói x·∫£y ra</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          {error.includes('ƒëƒÉng nh·∫≠p') && (
            <Button asChild>
              <Link href="/login">ƒêƒÉng nh·∫≠p</Link>
            </Button>
          )}
        </div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">
          <div className="text-gray-400 text-6xl mb-4">üë§</div>
          <h2 className="text-2xl font-bold mb-2">Kh√¥ng t√¨m th·∫•y th√¥ng tin</h2>
          <p className="text-gray-600 mb-4">Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin c√° nh√¢n</p>
          <Button asChild>
            <Link href="/login">ƒêƒÉng nh·∫≠p</Link>
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">T√†i kho·∫£n c·ªßa t√¥i</h1>
          <p className="text-gray-600">Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n v√† ƒë∆°n h√†ng</p>
        </div>

        <Tabs defaultValue="profile" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="profile" className="flex items-center gap-2">
              <User className="h-4 w-4" />
              Th√¥ng tin c√° nh√¢n
            </TabsTrigger>
            <TabsTrigger value="orders" className="flex items-center gap-2">
              <ShoppingBag className="h-4 w-4" />
              ƒê∆°n h√†ng
            </TabsTrigger>
            <TabsTrigger value="wishlist" className="flex items-center gap-2">
              <Heart className="h-4 w-4" />
              Y√™u th√≠ch
            </TabsTrigger>
            <TabsTrigger value="settings" className="flex items-center gap-2">
              <Settings className="h-4 w-4" />
              C√†i ƒë·∫∑t
            </TabsTrigger>
          </TabsList>

          {/* Profile Tab */}
          <TabsContent value="profile">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Th√¥ng tin c√° nh√¢n</CardTitle>
                    <CardDescription>
                      Qu·∫£n l√Ω th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n
                    </CardDescription>
                  </div>
                  <Button
                    variant={editing ? "outline" : "default"}
                    onClick={() => setEditing(!editing)}
                  >
                    {editing ? 'H·ªßy' : 'Ch·ªânh s·ª≠a'}
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {editing ? (
                  <form onSubmit={handleUpdateProfile} className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="name">H·ªç t√™n</Label>
                        <Input
                          id="name"
                          value={formData.name}
                          onChange={(e) => handleInputChange('name', e.target.value)}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="email">Email</Label>
                        <Input
                          id="email"
                          type="email"
                          value={formData.email}
                          onChange={(e) => handleInputChange('email', e.target.value)}
                          required
                        />
                      </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</Label>
                        <Input
                          id="phone"
                          value={formData.phone}
                          onChange={(e) => handleInputChange('phone', e.target.value)}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="address">ƒê·ªãa ch·ªâ</Label>
                        <Input
                          id="address"
                          value={formData.address}
                          onChange={(e) => handleInputChange('address', e.target.value)}
                        />
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button type="submit" disabled={loading}>
                        {loading ? 'ƒêang c·∫≠p nh·∫≠t...' : 'L∆∞u thay ƒë·ªïi'}
                      </Button>
                      <Button type="button" variant="outline" onClick={() => setEditing(false)}>
                        H·ªßy
                      </Button>
                    </div>
                  </form>
                ) : (
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center space-x-3">
                        <User className="h-5 w-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">H·ªç t√™n</p>
                          <p className="font-medium">{profile.name}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-3">
                        <Mail className="h-5 w-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">Email</p>
                          <p className="font-medium">{profile.email}</p>
                        </div>
                      </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center space-x-3">
                        <Phone className="h-5 w-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">S·ªë ƒëi·ªán tho·∫°i</p>
                          <p className="font-medium">{profile.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-3">
                        <MapPin className="h-5 w-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">ƒê·ªãa ch·ªâ</p>
                          <p className="font-medium">{profile.address || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
                        </div>
                      </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center space-x-3">
                        <Calendar className="h-5 w-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">Ng√†y tham gia</p>
                          <p className="font-medium">{formatDate(profile.createdAt)}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-3">
                        <Shield className="h-5 w-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">Vai tr√≤</p>
                          <Badge variant="outline">
                            {profile.role === 'ADMIN' ? 'Qu·∫£n tr·ªã vi√™n' : 'Kh√°ch h√†ng'}
                          </Badge>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Orders Tab */}
          <TabsContent value="orders">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>ƒê∆°n h√†ng g·∫ßn ƒë√¢y</CardTitle>
                    <CardDescription>
                      Xem l·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa b·∫°n
                    </CardDescription>
                  </div>
                  <Button asChild>
                    <Link href="/orders">Xem t·∫•t c·∫£</Link>
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {orders.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="text-gray-400 text-4xl mb-4">üì¶</div>
                    <p className="text-gray-600 mb-4">B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</p>
                    <Button asChild>
                      <Link href="/products">Mua s·∫Øm ngay</Link>
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {orders.map((order) => (
                      <div key={order.id} className="flex items-center justify-between p-4 border rounded-lg">
                        <div>
                          <h4 className="font-medium">ƒê∆°n h√†ng #{order.orderNo}</h4>
                          <p className="text-sm text-gray-500">
                            {formatDate(order.createdAt)} ‚Ä¢ {order.items.length} s·∫£n ph·∫©m
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="font-medium">
                            {(order.totalCents / 100).toLocaleString('vi-VN', {
                              style: 'currency',
                              currency: 'VND'
                            })}
                          </p>
                          <Badge variant="outline">{order.status}</Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Wishlist Tab */}
          <TabsContent value="wishlist">
            <Card>
              <CardHeader>
                <CardTitle>S·∫£n ph·∫©m y√™u th√≠ch</CardTitle>
                <CardDescription>
                  Danh s√°ch s·∫£n ph·∫©m b·∫°n ƒë√£ th√™m v√†o y√™u th√≠ch
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <div className="text-gray-400 text-4xl mb-4">üíñ</div>
                  <p className="text-gray-600 mb-4">T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn</p>
                  <Button asChild>
                    <Link href="/products">Kh√°m ph√° s·∫£n ph·∫©m</Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Settings Tab */}
          <TabsContent value="settings">
            <Card>
              <CardHeader>
                <CardTitle>C√†i ƒë·∫∑t t√†i kho·∫£n</CardTitle>
                <CardDescription>
                  Qu·∫£n l√Ω c√†i ƒë·∫∑t b·∫£o m·∫≠t v√† th√¥ng b√°o
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h4 className="font-medium mb-2">B·∫£o m·∫≠t</h4>
                    <Button variant="outline" asChild>
                      <Link href="/change-password">ƒê·ªïi m·∫≠t kh·∫©u</Link>
                    </Button>
                  </div>
                  <div>
                    <h4 className="font-medium mb-2">Th√¥ng b√°o</h4>
                    <div className="space-y-2">
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" defaultChecked />
                        Email th√¥ng b√°o ƒë∆°n h√†ng
                      </label>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" defaultChecked />
                        Th√¥ng b√°o khuy·∫øn m√£i
                      </label>
                      <label className="flex items-center">
                        <input type="checkbox" className="mr-2" />
                        Th√¥ng b√°o s·∫£n ph·∫©m m·ªõi
                      </label>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
