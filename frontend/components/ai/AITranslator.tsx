'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Loader2, Languages, Copy, Check, ArrowRight } from 'lucide-react';
import { toast } from 'sonner';

interface TranslationForm {
  text: string;
  targetLanguage: string;
  sourceLanguage: string;
}

interface TranslationResult {
  original: string;
  translation: string;
  sourceLanguage: string;
  targetLanguage: string;
  length: number;
}

export default function AITranslator() {
  const [form, setForm] = useState<TranslationForm>({
    text: '',
    targetLanguage: 'vi',
    sourceLanguage: 'auto'
  });
  
  const [result, setResult] = useState<TranslationResult | null>(null);
  const [isTranslating, setIsTranslating] = useState(false);
  const [copied, setCopied] = useState(false);

  const languages = [
    { code: 'vi', name: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥' },
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' },
    { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
    { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' },
    { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
    { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
    { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'th', name: '‡πÑ‡∏ó‡∏¢', flag: 'üáπüá≠' }
  ];

  const translate = async () => {
    if (!form.text.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn d·ªãch');
      return;
    }

    setIsTranslating(true);
    try {
      const response = await fetch('/api/v1/ai/translate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(form),
      });

      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ d·ªãch vƒÉn b·∫£n');
      }

      const data = await response.json();
      setResult(data.data);
      toast.success('D·ªãch thu·∫≠t th√†nh c√¥ng!');
    } catch (error) {
      console.error('Translation error:', error);
      toast.error('C√≥ l·ªói x·∫£y ra khi d·ªãch thu·∫≠t');
    } finally {
      setIsTranslating(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      toast.success('ƒê√£ sao ch√©p v√†o clipboard!');
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      toast.error('Kh√¥ng th·ªÉ sao ch√©p');
    }
  };

  const swapLanguages = () => {
    setForm({
      ...form,
      sourceLanguage: form.targetLanguage,
      targetLanguage: form.sourceLanguage
    });
  };

  const getLanguageName = (code: string) => {
    return languages.find(lang => lang.code === code)?.name || code;
  };

  const getLanguageFlag = (code: string) => {
    return languages.find(lang => lang.code === code)?.flag || 'üåê';
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold flex items-center justify-center gap-2">
          <Languages className="text-blue-500" />
          AI Translator
        </h1>
        <p className="text-muted-foreground">
          D·ªãch thu·∫≠t ƒëa ng√¥n ng·ªØ th√¥ng minh cho Audio T√†i L·ªôc
        </p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>D·ªãch thu·∫≠t</CardTitle>
          <CardDescription>
            D·ªãch vƒÉn b·∫£n gi·ªØa c√°c ng√¥n ng·ªØ kh√°c nhau v·ªõi ƒë·ªô ch√≠nh x√°c cao
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Language Selection */}
          <div className="flex items-center justify-between gap-4">
            <div className="flex-1 space-y-2">
              <label className="text-sm font-medium">Ng√¥n ng·ªØ ngu·ªìn</label>
              <Select 
                value={form.sourceLanguage} 
                onValueChange={(value) => setForm({ ...form, sourceLanguage: value })}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="auto">üåê T·ª± ƒë·ªông ph√°t hi·ªán</SelectItem>
                  {languages.map((lang) => (
                    <SelectItem key={lang.code} value={lang.code}>
                      <span className="flex items-center gap-2">
                        <span>{lang.flag}</span>
                        {lang.name}
                      </span>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <Button
              variant="outline"
              size="sm"
              onClick={swapLanguages}
              className="mt-6"
            >
              <ArrowRight className="h-4 w-4" />
            </Button>

            <div className="flex-1 space-y-2">
              <label className="text-sm font-medium">Ng√¥n ng·ªØ ƒë√≠ch</label>
              <Select 
                value={form.targetLanguage} 
                onValueChange={(value) => setForm({ ...form, targetLanguage: value })}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {languages.map((lang) => (
                    <SelectItem key={lang.code} value={lang.code}>
                      <span className="flex items-center gap-2">
                        <span>{lang.flag}</span>
                        {lang.name}
                      </span>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Text Input */}
          <div className="space-y-2">
            <label className="text-sm font-medium">VƒÉn b·∫£n c·∫ßn d·ªãch</label>
            <Textarea
              placeholder="Nh·∫≠p vƒÉn b·∫£n c·∫ßn d·ªãch..."
              value={form.text}
              onChange={(e) => setForm({ ...form, text: e.target.value })}
              rows={4}
            />
          </div>

          <Button 
            onClick={translate} 
            disabled={isTranslating || !form.text.trim()}
            className="w-full"
          >
            {isTranslating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ƒêang d·ªãch...
              </>
            ) : (
              <>
                <Languages className="mr-2 h-4 w-4" />
                D·ªãch thu·∫≠t
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {result && (
        <Card>
          <CardHeader>
            <CardTitle>K·∫øt qu·∫£ d·ªãch thu·∫≠t</CardTitle>
            <CardDescription>
              T·ª´ {getLanguageName(result.sourceLanguage)} sang {getLanguageName(result.targetLanguage)}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Original Text */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <h4 className="font-medium flex items-center gap-2">
                  <span>{getLanguageFlag(result.sourceLanguage)}</span>
                  VƒÉn b·∫£n g·ªëc ({getLanguageName(result.sourceLanguage)})
                </h4>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => copyToClipboard(result.original)}
                >
                  {copied ? (
                    <>
                      <Check className="mr-2 h-4 w-4" />
                      ƒê√£ sao ch√©p
                    </>
                  ) : (
                    <>
                      <Copy className="mr-2 h-4 w-4" />
                      Sao ch√©p
                    </>
                  )}
                </Button>
              </div>
              <div className="bg-muted p-4 rounded-lg">
                <p className="whitespace-pre-wrap">{result.original}</p>
              </div>
            </div>

            {/* Translation */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <h4 className="font-medium flex items-center gap-2">
                  <span>{getLanguageFlag(result.targetLanguage)}</span>
                  B·∫£n d·ªãch ({getLanguageName(result.targetLanguage)})
                </h4>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => copyToClipboard(result.translation)}
                >
                  {copied ? (
                    <>
                      <Check className="mr-2 h-4 w-4" />
                      ƒê√£ sao ch√©p
                    </>
                  ) : (
                    <>
                      <Copy className="mr-2 h-4 w-4" />
                      Sao ch√©p
                    </>
                  )}
                </Button>
              </div>
              <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-lg border border-blue-200">
                <p className="whitespace-pre-wrap font-medium">{result.translation}</p>
              </div>
            </div>

            {/* Translation Info */}
            <div className="flex items-center justify-between text-sm text-muted-foreground">
              <span>ƒê·ªô d√†i: {result.length} k√Ω t·ª±</span>
              <Badge variant="secondary">
                AI Translation
              </Badge>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Quick Translation Examples */}
      <Card>
        <CardHeader>
          <CardTitle>D·ªãch nhanh</CardTitle>
          <CardDescription>
            C√°c c√¢u th∆∞·ªùng d√πng trong Audio T√†i L·ªôc
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {[
              {
                text: 'Ch√†o b·∫°n! T√¥i c·∫ßn t∆∞ v·∫•n v·ªÅ tai nghe bluetooth',
                target: 'en',
                label: 'Ch√†o h·ªèi kh√°ch h√†ng'
              },
              {
                text: 'S·∫£n ph·∫©m n√†y c√≥ b·∫£o h√†nh bao l√¢u?',
                target: 'en',
                label: 'H·ªèi b·∫£o h√†nh'
              },
              {
                text: 'C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i!',
                target: 'en',
                label: 'C·∫£m ∆°n kh√°ch h√†ng'
              },
              {
                text: 'B·∫°n c√≥ th·ªÉ giao h√†ng trong bao l√¢u?',
                target: 'en',
                label: 'H·ªèi th·ªùi gian giao h√†ng'
              }
            ].map((example, index) => (
              <Button
                key={index}
                variant="outline"
                className="h-auto p-4 text-left"
                onClick={() => {
                  setForm({
                    text: example.text,
                    targetLanguage: example.target,
                    sourceLanguage: 'vi'
                  });
                }}
              >
                <div>
                  <div className="font-medium text-sm">{example.label}</div>
                  <div className="text-xs text-muted-foreground mt-1">
                    {example.text}
                  </div>
                </div>
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
