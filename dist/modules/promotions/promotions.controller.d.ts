import { PromotionService } from './promotion.service';
import { CreatePromotionDto } from './dto/create-promotion.dto';
import { UpdatePromotionDto } from './dto/update-promotion.dto';
import { ListPromotionsDto } from './dto/list-promotions.dto';
export declare class PromotionsController {
    private readonly promotions;
    constructor(promotions: PromotionService);
    findAll(query: ListPromotionsDto): Promise<{
        promotions: {
            id: string;
            code: string;
            name: string;
            description?: string;
            type: string;
            value: number;
            minOrderAmount?: number;
            maxDiscount?: number;
            usageLimit?: number;
            usageCount: number;
            isActive: boolean;
            startDate: string;
            endDate: string;
            categories: string[];
            products: string[];
            customerSegments: string[];
            createdAt: string;
            updatedAt: string;
            createdBy?: string;
        }[];
        total: number;
        page: number;
        pageSize: number;
        stats: {
            totalPromotions: number;
            activePromotions: number;
            expiredPromotions: number;
            totalSavings: number;
            totalUsage: number;
            conversionRate: number;
        };
    }>;
    getStatus(): {
        module: string;
        status: string;
        timestamp: string;
    };
    findOne(id: string): Promise<{
        id: string;
        code: string;
        name: string;
        description?: string;
        type: string;
        value: number;
        minOrderAmount?: number;
        maxDiscount?: number;
        usageLimit?: number;
        usageCount: number;
        isActive: boolean;
        startDate: string;
        endDate: string;
        categories: string[];
        products: string[];
        customerSegments: string[];
        createdAt: string;
        updatedAt: string;
        createdBy?: string;
    }>;
    create(dto: CreatePromotionDto): Promise<{
        id: string;
        code: string;
        name: string;
        description?: string;
        type: string;
        value: number;
        minOrderAmount?: number;
        maxDiscount?: number;
        usageLimit?: number;
        usageCount: number;
        isActive: boolean;
        startDate: string;
        endDate: string;
        categories: string[];
        products: string[];
        customerSegments: string[];
        createdAt: string;
        updatedAt: string;
        createdBy?: string;
    }>;
    update(id: string, dto: UpdatePromotionDto): Promise<{
        id: string;
        code: string;
        name: string;
        description?: string;
        type: string;
        value: number;
        minOrderAmount?: number;
        maxDiscount?: number;
        usageLimit?: number;
        usageCount: number;
        isActive: boolean;
        startDate: string;
        endDate: string;
        categories: string[];
        products: string[];
        customerSegments: string[];
        createdAt: string;
        updatedAt: string;
        createdBy?: string;
    }>;
    remove(id: string): Promise<{
        deleted: boolean;
    }>;
    duplicate(id: string): Promise<{
        id: string;
        code: string;
        name: string;
        description?: string;
        type: string;
        value: number;
        minOrderAmount?: number;
        maxDiscount?: number;
        usageLimit?: number;
        usageCount: number;
        isActive: boolean;
        startDate: string;
        endDate: string;
        categories: string[];
        products: string[];
        customerSegments: string[];
        createdAt: string;
        updatedAt: string;
        createdBy?: string;
    }>;
}
