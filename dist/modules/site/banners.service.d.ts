import { PrismaService } from '../../prisma/prisma.service';
import { CreateBannerDto } from './dto/banner-create.dto';
import { UpdateBannerDto } from './dto/banner-update.dto';
import { Prisma } from '@prisma/client';
export declare class BannersService {
    private prisma;
    constructor(prisma: PrismaService);
    findAll(params: {
        page?: string;
        isActive?: boolean;
        search?: string;
        skip?: number;
        take?: number;
        orderBy?: Prisma.bannersOrderByWithRelationInput;
    }): Promise<{
        items: {
            description: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            page: string;
            title: string;
            imageUrl: string;
            isActive: boolean;
            isDeleted: boolean;
            subtitle: string;
            mobileImageUrl: string;
            linkUrl: string;
            buttonLabel: string;
            locale: string;
            position: number;
            startAt: Date;
            endAt: Date;
        }[];
        total: number;
        page: number;
        pageSize: number;
        totalPages: number;
    }>;
    findById(id: string): Promise<{
        description: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        page: string;
        title: string;
        imageUrl: string;
        isActive: boolean;
        isDeleted: boolean;
        subtitle: string;
        mobileImageUrl: string;
        linkUrl: string;
        buttonLabel: string;
        locale: string;
        position: number;
        startAt: Date;
        endAt: Date;
    }>;
    create(data: CreateBannerDto): Promise<{
        description: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        page: string;
        title: string;
        imageUrl: string;
        isActive: boolean;
        isDeleted: boolean;
        subtitle: string;
        mobileImageUrl: string;
        linkUrl: string;
        buttonLabel: string;
        locale: string;
        position: number;
        startAt: Date;
        endAt: Date;
    }>;
    update(id: string, data: UpdateBannerDto): Promise<{
        description: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        page: string;
        title: string;
        imageUrl: string;
        isActive: boolean;
        isDeleted: boolean;
        subtitle: string;
        mobileImageUrl: string;
        linkUrl: string;
        buttonLabel: string;
        locale: string;
        position: number;
        startAt: Date;
        endAt: Date;
    }>;
    softDelete(id: string): Promise<{
        description: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        page: string;
        title: string;
        imageUrl: string;
        isActive: boolean;
        isDeleted: boolean;
        subtitle: string;
        mobileImageUrl: string;
        linkUrl: string;
        buttonLabel: string;
        locale: string;
        position: number;
        startAt: Date;
        endAt: Date;
    }>;
    reorder(idsInOrder: string[]): Promise<{
        description: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        page: string;
        title: string;
        imageUrl: string;
        isActive: boolean;
        isDeleted: boolean;
        subtitle: string;
        mobileImageUrl: string;
        linkUrl: string;
        buttonLabel: string;
        locale: string;
        position: number;
        startAt: Date;
        endAt: Date;
    }[]>;
    getActiveBanners(page?: string): Promise<{
        description: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        page: string;
        title: string;
        imageUrl: string;
        isActive: boolean;
        isDeleted: boolean;
        subtitle: string;
        mobileImageUrl: string;
        linkUrl: string;
        buttonLabel: string;
        locale: string;
        position: number;
        startAt: Date;
        endAt: Date;
    }[]>;
}
