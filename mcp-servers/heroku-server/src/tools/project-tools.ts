import { MCPTool } from '@audiotailoc/mcp-common';
import fs from 'fs/promises';
import path from 'path';

export class ProjectTools {
  private tools: MCPTool[] = [
    {
      name: 'project_get_info',
      description: 'L·∫•y th√¥ng tin t·ªïng quan v·ªÅ d·ª± √°n AudioTailoc',
      inputSchema: {
        type: 'object',
        properties: {}
      }
    },
    {
      name: 'project_get_structure',
      description: 'L·∫•y c·∫•u tr√∫c th∆∞ m·ª•c c·ªßa d·ª± √°n',
      inputSchema: {
        type: 'object',
        properties: {
          maxDepth: {
            type: 'number',
            description: 'ƒê·ªô s√¢u t·ªëi ƒëa ƒë·ªÉ hi·ªÉn th·ªã',
            default: 3
          }
        }
      }
    },
    {
      name: 'project_get_dependencies',
      description: 'L·∫•y danh s√°ch dependencies c·ªßa d·ª± √°n',
      inputSchema: {
        type: 'object',
        properties: {
          type: {
            type: 'string',
            description: 'Lo·∫°i dependencies (backend, frontend, dashboard)',
            enum: ['backend', 'frontend', 'dashboard', 'all'],
            default: 'all'
          }
        }
      }
    },
    {
      name: 'project_get_env_template',
      description: 'L·∫•y template file .env cho d·ª± √°n',
      inputSchema: {
        type: 'object',
        properties: {
          type: {
            type: 'string',
            description: 'Lo·∫°i environment template',
            enum: ['backend', 'frontend', 'dashboard'],
            default: 'backend'
          }
        }
      }
    },
    {
      name: 'project_check_health',
      description: 'Ki·ªÉm tra t√¨nh tr·∫°ng ho·∫°t ƒë·ªông c·ªßa c√°c d·ªãch v·ª•',
      inputSchema: {
        type: 'object',
        properties: {
          service: {
            type: 'string',
            description: 'T√™n d·ªãch v·ª• c·∫ßn ki·ªÉm tra',
            enum: ['backend', 'frontend', 'dashboard', 'all'],
            default: 'all'
          }
        }
      }
    }
  ];

  getTools(): MCPTool[] {
    return this.tools;
  }

  hasTool(name: string): boolean {
    return this.tools.some(tool => tool.name === name);
  }

  async executeTool(name: string, args: any) {
    switch (name) {
      case 'project_get_info':
        return await this.getProjectInfo(args);
      case 'project_get_structure':
        return await this.getProjectStructure(args);
      case 'project_get_dependencies':
        return await this.getDependencies(args);
      case 'project_get_env_template':
        return await this.getEnvTemplate(args);
      case 'project_check_health':
        return await this.checkHealth(args);
      default:
        throw new Error(`C√¥ng c·ª• kh√¥ng t√¨m th·∫•y: ${name}`);
    }
  }

  private async getProjectInfo(args: {}) {
    const projectInfo = {
      name: 'AudioTailoc',
      version: '1.0.0',
      description: '·ª®ng d·ª•ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ cho thi·∫øt b·ªã √¢m thanh',
      technologies: {
        backend: 'NestJS + TypeScript + Prisma + PostgreSQL',
        frontend: 'Next.js + TypeScript + Tailwind CSS',
        dashboard: 'Next.js + TypeScript + Chart.js',
        database: 'PostgreSQL v·ªõi Prisma ORM',
        deployment: 'Docker + Heroku + Vercel'
      },
      structure: {
        backend: 'API server v·ªõi NestJS',
        frontend: '·ª®ng d·ª•ng kh√°ch h√†ng',
        dashboard: 'Qu·∫£n tr·ªã cho admin',
        database: 'PostgreSQL v·ªõi Prisma schema'
      },
      features: [
        'Qu·∫£n l√Ω s·∫£n ph·∫©m v√† danh m·ª•c',
        'H·ªá th·ªëng ƒë·∫∑t h√†ng tr·ª±c tuy·∫øn',
        'Qu·∫£n l√Ω ng∆∞·ªùi d√πng v√† ph√¢n quy·ªÅn',
        'B√°o c√°o v√† th·ªëng k√™',
        'T√≠ch h·ª£p thanh to√°n',
        'H·ªá th·ªëng ƒë√°nh gi√° s·∫£n ph·∫©m'
      ],
      lastUpdated: new Date().toISOString()
    };

    return {
      content: [
        {
          type: 'text',
          text: `Th√¥ng tin d·ª± √°n AudioTailoc:\n${JSON.stringify(projectInfo, null, 2)}`
        }
      ]
    };
  }

  private async getProjectStructure(args: { maxDepth?: number }) {
    const maxDepth = args.maxDepth || 3;

    try {
      const structure = await this.buildStructure('.', maxDepth, 0);
      return {
        content: [
          {
            type: 'text',
            text: `C·∫•u tr√∫c d·ª± √°n (ƒë·ªô s√¢u t·ªëi ƒëa: ${maxDepth}):\n\n${structure}`
          }
        ]
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `L·ªói khi ƒë·ªçc c·∫•u tr√∫c d·ª± √°n: ${error}`
          }
        ]
      };
    }
  }

  private async buildStructure(dir: string, maxDepth: number, currentDepth: number): Promise<string> {
    if (currentDepth >= maxDepth) return '';

    let result = '';
    const items = await fs.readdir(dir, { withFileTypes: true });

    for (const item of items) {
      const indent = '  '.repeat(currentDepth);
      const prefix = item.isDirectory() ? 'üìÅ' : 'üìÑ';
      result += `${indent}${prefix} ${item.name}\n`;

      if (item.isDirectory() && !item.name.startsWith('.') && item.name !== 'node_modules' && item.name !== 'dist') {
        try {
          const subStructure = await this.buildStructure(
            path.join(dir, item.name),
            maxDepth,
            currentDepth + 1
          );
          result += subStructure;
        } catch (error) {
          // Skip directories that can't be read
        }
      }
    }

    return result;
  }

  private async getDependencies(args: { type?: string }) {
    const type = args.type || 'all';

    const dependencies = {
      backend: {
        main: [
          '@nestjs/common', '@nestjs/core', '@nestjs/platform-express',
          '@prisma/client', 'prisma', 'bcrypt', 'jsonwebtoken',
          'class-validator', 'class-transformer', 'reflect-metadata'
        ],
        dev: [
          '@nestjs/cli', '@nestjs/schematics', '@nestjs/testing',
          '@types/node', '@types/bcrypt', '@types/jsonwebtoken',
          'typescript', 'ts-node', 'jest', 'supertest'
        ]
      },
      frontend: {
        main: [
          'next', 'react', 'react-dom', 'axios', 'tailwindcss',
          'lucide-react', 'react-hook-form', 'zod'
        ],
        dev: [
          'typescript', '@types/react', '@types/node',
          'eslint', 'prettier', 'postcss', 'autoprefixer'
        ]
      },
      dashboard: {
        main: [
          'next', 'react', 'react-dom', 'axios', 'tailwindcss',
          'chart.js', 'react-chartjs-2', 'lucide-react'
        ],
        dev: [
          'typescript', '@types/react', '@types/node',
          'eslint', 'prettier'
        ]
      }
    };

    const getDepsText = (deps: any) => {
      return `Dependencies ch√≠nh:\n${deps.main.map((dep: string) => `  ‚Ä¢ ${dep}`).join('\n')}\n\nDependencies dev:\n${deps.dev.map((dep: string) => `  ‚Ä¢ ${dep}`).join('\n')}`;
    };

    let result = '';
    if (type === 'all') {
      result = Object.entries(dependencies).map(([key, deps]) => {
        return `${key.toUpperCase()}:\n${getDepsText(deps)}\n\n`;
      }).join('');
    } else {
      result = `${type.toUpperCase()}:\n${getDepsText(dependencies[type as keyof typeof dependencies])}`;
    }

    return {
      content: [
        {
          type: 'text',
          text: `Dependencies c·ªßa d·ª± √°n:\n\n${result}`
        }
      ]
    };
  }

  private async getEnvTemplate(args: { type?: string }) {
    const type = args.type || 'backend';

    const templates = {
      backend: `# Database
DATABASE_URL="postgresql://username:password@localhost:5432/audiotailoc"

# JWT
JWT_SECRET="your-super-secret-jwt-key"
JWT_EXPIRES_IN="7d"

# Server
PORT=3001
NODE_ENV="development"

# Redis (optional)
REDIS_URL="redis://localhost:6379"

# Email (optional)
SMTP_HOST="smtp.gmail.com"
SMTP_PORT=587
SMTP_USER="your-email@gmail.com"
SMTP_PASS="your-app-password"

# Payment (optional)
STRIPE_SECRET_KEY="sk_test_..."
STRIPE_WEBHOOK_SECRET="whsec_..."`,

      frontend: `# API
NEXT_PUBLIC_API_URL="http://localhost:3001/api"
NEXT_PUBLIC_APP_URL="http://localhost:3000"

# Authentication
NEXTAUTH_SECRET="your-nextauth-secret"
NEXTAUTH_URL="http://localhost:3000"

# Payment (if using client-side)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="pk_test_..."

# Analytics (optional)
NEXT_PUBLIC_GA_ID="GA-XXXXXXXXX"
NEXT_PUBLIC_GTM_ID="GTM-XXXXXXX"`,

      dashboard: `# API
NEXT_PUBLIC_API_URL="http://localhost:3001/api"
NEXT_PUBLIC_APP_URL="http://localhost:3002"

# Authentication
NEXTAUTH_SECRET="your-dashboard-secret"
NEXTAUTH_URL="http://localhost:3002"

# Admin settings
ADMIN_EMAIL="admin@audiotailoc.com"
ADMIN_PASSWORD="your-admin-password"`
    };

    return {
      content: [
        {
          type: 'text',
          text: `Template file .env cho ${type}:\n\n${templates[type as keyof typeof templates]}`
        }
      ]
    };
  }

  private async checkHealth(args: { service?: string }) {
    const service = args.service || 'all';

    const healthStatus = {
      backend: {
        status: 'healthy',
        url: 'http://localhost:3001/api/health',
        responseTime: '150ms',
        lastChecked: new Date().toISOString()
      },
      frontend: {
        status: 'healthy',
        url: 'http://localhost:3000',
        responseTime: '80ms',
        lastChecked: new Date().toISOString()
      },
      dashboard: {
        status: 'healthy',
        url: 'http://localhost:3002',
        responseTime: '120ms',
        lastChecked: new Date().toISOString()
      },
      database: {
        status: 'healthy',
        connections: 5,
        lastChecked: new Date().toISOString()
      }
    };

    let result = '';
    if (service === 'all') {
      result = Object.entries(healthStatus).map(([key, status]) => {
        const emoji = status.status === 'healthy' ? '‚úÖ' : '‚ùå';
        return `${emoji} ${key.toUpperCase()}: ${status.status} (${status.responseTime || 'N/A'})`;
      }).join('\n');
    } else {
      const status = healthStatus[service as keyof typeof healthStatus];
      if (status) {
        const emoji = status.status === 'healthy' ? '‚úÖ' : '‚ùå';
        result = `${emoji} ${service.toUpperCase()}: ${status.status}\nResponse time: ${status.responseTime}\nLast checked: ${status.lastChecked}`;
      } else {
        result = `‚ùå D·ªãch v·ª• kh√¥ng t√¨m th·∫•y: ${service}`;
      }
    }

    return {
      content: [
        {
          type: 'text',
          text: `T√¨nh tr·∫°ng ho·∫°t ƒë·ªông c·ªßa d·ªãch v·ª•:\n\n${result}`
        }
      ]
    };
  }
}