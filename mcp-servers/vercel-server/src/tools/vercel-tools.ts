import { MCPTool } from '@audiotailoc/mcp-common';

export class VercelTools {
  private tools: MCPTool[] = [
    {
      name: 'vercel_create_project',
      description: 'T·∫°o d·ª± √°n m·ªõi tr√™n Vercel',
      inputSchema: {
        type: 'object',
        properties: {
          projectName: {
            type: 'string',
            description: 'T√™n d·ª± √°n tr√™n Vercel'
          },
          framework: {
            type: 'string',
            description: 'Framework s·ª≠ d·ª•ng',
            enum: ['nextjs', 'nuxtjs', 'sveltekit', 'react', 'vue'],
            default: 'nextjs'
          }
        },
        required: ['projectName']
      }
    },
    {
      name: 'vercel_deploy',
      description: 'Deploy d·ª± √°n l√™n Vercel',
      inputSchema: {
        type: 'object',
        properties: {
          projectName: {
            type: 'string',
            description: 'T√™n d·ª± √°n tr√™n Vercel'
          },
          production: {
            type: 'boolean',
            description: 'Deploy production hay preview',
            default: false
          }
        },
        required: ['projectName']
      }
    },
    {
      name: 'vercel_list_projects',
      description: 'Li·ªát k√™ t·∫•t c·∫£ d·ª± √°n tr√™n Vercel',
      inputSchema: {
        type: 'object',
        properties: {}
      }
    },
    {
      name: 'vercel_get_domains',
      description: 'L·∫•y danh s√°ch domains c·ªßa d·ª± √°n',
      inputSchema: {
        type: 'object',
        properties: {
          projectName: {
            type: 'string',
            description: 'T√™n d·ª± √°n tr√™n Vercel'
          }
        },
        required: ['projectName']
      }
    },
    {
      name: 'vercel_configure_env',
      description: 'C·∫•u h√¨nh environment variables cho d·ª± √°n',
      inputSchema: {
        type: 'object',
        properties: {
          projectName: {
            type: 'string',
            description: 'T√™n d·ª± √°n tr√™n Vercel'
          },
          environment: {
            type: 'string',
            description: 'M√¥i tr∆∞·ªùng (production, preview, development)',
            default: 'production'
          },
          variables: {
            type: 'object',
            description: 'C√°c environment variables c·∫ßn thi·∫øt'
          }
        },
        required: ['projectName']
      }
    },
    {
      name: 'vercel_setup_edge_functions',
      description: 'C·∫•u h√¨nh Edge Functions cho d·ª± √°n',
      inputSchema: {
        type: 'object',
        properties: {
          projectName: {
            type: 'string',
            description: 'T√™n d·ª± √°n tr√™n Vercel'
          },
          regions: {
            type: 'array',
            description: 'C√°c regions ƒë·ªÉ deploy',
            items: {
              type: 'string',
              enum: ['global', 'iad1', 'sin1', 'syd1']
            },
            default: ['sin1']
          }
        },
        required: ['projectName']
      }
    }
  ];

  getTools(): MCPTool[] {
    return this.tools;
  }

  hasTool(name: string): boolean {
    return this.tools.some(tool => tool.name === name);
  }

  async executeTool(name: string, args: any) {
    switch (name) {
      case 'vercel_create_project':
        return await this.createProject(args);
      case 'vercel_deploy':
        return await this.deploy(args);
      case 'vercel_list_projects':
        return await this.listProjects(args);
      case 'vercel_get_domains':
        return await this.getDomains(args);
      case 'vercel_configure_env':
        return await this.configureEnvironment(args);
      case 'vercel_setup_edge_functions':
        return await this.setupEdgeFunctions(args);
      default:
        throw new Error(`C√¥ng c·ª• kh√¥ng t√¨m th·∫•y: ${name}`);
    }
  }

  private async createProject(args: { projectName: string; framework?: string }) {
    const framework = args.framework || 'nextjs';

    return {
      content: [
        {
          type: 'text',
          text: `ƒêang t·∫°o d·ª± √°n Vercel: ${args.projectName}\n\nTh√¥ng tin d·ª± √°n:\n- Framework: ${framework}\n- Project name: ${args.projectName}\n- Team: AudioTailoc\n\nC√°c b∆∞·ªõc ti·∫øp theo:\n1. K·∫øt n·ªëi Git repository\n2. C·∫•u h√¨nh build settings\n3. Set environment variables\n4. Deploy th·ª≠ nghi·ªám\n\nL·ªánh m·∫´u:\nvercel --prod\nvercel link\nvercel env add NEXT_PUBLIC_API_URL`
        }
      ]
    };
  }

  private async deploy(args: { projectName: string; production?: boolean }) {
    const isProduction = args.production || false;
    const flag = isProduction ? '--prod' : '';

    return {
      content: [
        {
          type: 'text',
          text: `ƒêang deploy d·ª± √°n: ${args.projectName}\n\nDeployment type: ${isProduction ? 'Production' : 'Preview'}\n\nC√°c b∆∞·ªõc th·ª±c hi·ªán:\n1. Build d·ª± √°n locally ƒë·ªÉ ki·ªÉm tra\n2. Push code l√™n Git repository\n3. Vercel t·ª± ƒë·ªông deploy\n4. Ki·ªÉm tra logs tr√™n dashboard\n\nL·ªánh ƒë·ªÉ ki·ªÉm tra:\nvercel ${flag}\nvercel logs ${flag}\n\nURL preview: https://${Math.random().toString(36).substring(7)}.vercel-preview.app\n${isProduction ? 'URL production: https://${args.projectName}.vercel.app' : ''}`
        }
      ]
    };
  }

  private async listProjects(args: {}) {
    return {
      content: [
        {
          type: 'text',
          text: `Li·ªát k√™ d·ª± √°n Vercel:\n\nD·ª± √°n hi·ªán c√≥:\nüìÅ audiotailoc-frontend\n   - Framework: Next.js\n   - Status: Active\n   - URL: https://audiotailoc-frontend.vercel.app\n\nüìÅ audiotailoc-dashboard\n   - Framework: Next.js\n   - Status: Active\n   - URL: https://audiotailoc-dashboard.vercel.app\n\nüìÅ audiotailoc-mcp-vercel\n   - Framework: Node.js\n   - Status: Active\n   - URL: https://audiotailoc-mcp.vercel.app\n\nL·ªánh ƒë·ªÉ xem: vercel list`
        }
      ]
    };
  }

  private async getDomains(args: { projectName: string }) {
    return {
      content: [
        {
          type: 'text',
          text: `Domains cho d·ª± √°n: ${args.projectName}\n\nDomains hi·ªán t·∫°i:\n‚úÖ ${args.projectName}.vercel.app (Vercel managed)\n‚úÖ www.audiotailoc.com (Custom domain)\n‚úÖ api.audiotailoc.com (API subdomain)\n\nC·∫•u h√¨nh DNS:\n- A record: @ -> 76.76.21.21\n- CNAME: www -> cname.vercel-dns.com\n- CNAME: api -> cname.vercel-dns.com\n\nSSL Certificate: ‚úÖ Active (Auto-renewal)`
        }
      ]
    };
  }

  private async configureEnvironment(args: { projectName: string; environment?: string; variables?: any }) {
    const env = args.environment || 'production';
    const variables = args.variables || {
      NEXT_PUBLIC_API_URL: 'https://api.audiotailoc.com',
      DATABASE_URL: 'postgresql://...',
      JWT_SECRET: 'your-secret-key',
      NODE_ENV: env
    };

    return {
      content: [
        {
          type: 'text',
          text: `C·∫•u h√¨nh environment variables cho ${args.projectName}\n\nM√¥i tr∆∞·ªùng: ${env}\n\nVariables s·∫Ω ƒë∆∞·ª£c thi·∫øt l·∫≠p:\n${Object.entries(variables).map(([key, value]) => `${key}=${value}`).join('\n')}\n\nC√°c l·ªánh th·ª±c hi·ªán:\n${Object.entries(variables).map(([key, value]) => `vercel env add ${key} ${env}`).join('\n')}\n\nL∆∞u √Ω b·∫£o m·∫≠t:\n- Kh√¥ng commit .env files\n- S·ª≠ d·ª•ng Vercel secrets cho sensitive data\n- Rotate secrets regularly`
        }
      ]
    };
  }

  private async setupEdgeFunctions(args: { projectName: string; regions?: string[] }) {
    const regions = args.regions || ['sin1'];

    return {
      content: [
        {
          type: 'text',
          text: `C·∫•u h√¨nh Edge Functions cho d·ª± √°n: ${args.projectName}\n\nRegions ƒë∆∞·ª£c ch·ªçn: ${regions.join(', ')}\n\nC·∫•u h√¨nh vercel.json:\n{\n  "functions": {\n    "src/**/*.ts": {\n      "runtime": "edge",\n      "regions": ["${regions.join('", "')}"]\n    }\n  },\n  "regions": ["${regions.join('", "')}"]\n}\n\nC√°c t√≠nh nƒÉng Edge Functions:\n‚úÖ Global deployment\n‚úÖ Instant cold starts\n‚úÖ Automatic scaling\n‚úÖ DDoS protection\n‚úÖ Low latency worldwide\n\nV√≠ d·ª• Edge Function:\nexport default function handler(req: Request) {\n  return new Response('Hello from Edge!');\n}`
        }
      ]
    };
  }
}