const axios = require('axios');

const API_BASE = 'http://localhost:3010/api/v1';

async function optimizeSEOAndPerformance() {
  console.log('üöÄ Starting SEO & Performance Optimization...\n');

  try {
    // 1. Test SEO endpoints
    console.log('üìä Testing SEO Endpoints...');
    
    const seoTests = [
      { name: 'Sitemap XML', path: '/seo/sitemap.xml' },
      { name: 'Robots.txt', path: '/seo/robots.txt' },
      { name: 'Home SEO', path: '/seo/home' },
      { name: 'Product SEO', path: '/seo/product/test-product' },
      { name: 'Category SEO', path: '/seo/category/test-category' },
      { name: 'Page SEO', path: '/seo/page/test-page' }
    ];

    for (const test of seoTests) {
      try {
        const response = await axios.get(`${API_BASE}${test.path}`);
        console.log(`‚úÖ ${test.name}: ${response.status}`);
      } catch (error) {
        console.log(`‚ùå ${test.name}: ${error.response?.status || 'ERROR'}`);
      }
    }

    // 2. Test i18n endpoints
    console.log('\nüåç Testing Internationalization...');
    
    const i18nTests = [
      { name: 'Languages', path: '/i18n/languages' },
      { name: 'VI Translations', path: '/i18n/translations/common?lang=vi' },
      { name: 'EN Translations', path: '/i18n/translations/common?lang=en' },
      { name: 'VI Products', path: '/i18n/products/test?lang=vi' },
      { name: 'EN Products', path: '/i18n/products/test?lang=en' }
    ];

    for (const test of i18nTests) {
      try {
        const response = await axios.get(`${API_BASE}${test.path}`);
        console.log(`‚úÖ ${test.name}: ${response.status}`);
      } catch (error) {
        console.log(`‚ùå ${test.name}: ${error.response?.status || 'ERROR'}`);
      }
    }

    // 3. Test Performance endpoints
    console.log('\n‚ö° Testing Performance Endpoints...');
    
    const performanceTests = [
      { name: 'Health Check', path: '/health' },
      { name: 'Health Performance', path: '/health/performance' },
      { name: 'Health System', path: '/health/system' },
      { name: 'Health Database', path: '/health/database' }
    ];

    for (const test of performanceTests) {
      try {
        const response = await axios.get(`${API_BASE}${test.path}`);
        console.log(`‚úÖ ${test.name}: ${response.status} (${response.data?.responseTime || 'N/A'}ms)`);
      } catch (error) {
        console.log(`‚ùå ${test.name}: ${error.response?.status || 'ERROR'}`);
      }
    }

    // 4. Generate SEO recommendations
    console.log('\nüìã SEO Recommendations:');
    
    const recommendations = [
      {
        priority: 'HIGH',
        category: 'Schema Markup',
        action: 'Add Organization Schema',
        code: `{
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "Audio T√†i L·ªôc",
  "url": "https://audiotailoc.com",
  "logo": "https://audiotailoc.com/logo.png"
}`
      },
      {
        priority: 'HIGH',
        category: 'Performance',
        action: 'Implement Critical CSS Inlining',
        code: `// In Next.js layout.tsx
import { CriticalCSS } from './critical.css';

export default function Layout({ children }) {
  return (
    <html>
      <head>
        <style dangerouslySetInnerHTML={{ __html: CriticalCSS }} />
      </head>
      <body>{children}</body>
    </html>
  );
}`
      },
      {
        priority: 'MEDIUM',
        category: 'Content',
        action: 'Add FAQ Schema',
        code: `{
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": [{
    "@type": "Question",
    "name": "L√†m th·∫ø n√†o ƒë·ªÉ ch·ªçn tai nghe ph√π h·ª£p?",
    "acceptedAnswer": {
      "@type": "Answer",
      "text": "D·ª±a v√†o m·ª•c ƒë√≠ch s·ª≠ d·ª•ng v√† ng√¢n s√°ch..."
    }
  }]
}`
      },
      {
        priority: 'MEDIUM',
        category: 'Performance',
        action: 'Optimize Images',
        code: `// Use Next.js Image component
import Image from 'next/image';

<Image
  src="/product.jpg"
  alt="Product description"
  width={400}
  height={300}
  priority={true}
  placeholder="blur"
  blurDataURL="data:image/jpeg;base64,..."
/>`
      },
      {
        priority: 'LOW',
        category: 'Advanced SEO',
        action: 'Add Breadcrumb Schema',
        code: `{
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [{
    "@type": "ListItem",
    "position": 1,
    "name": "Home",
    "item": "https://audiotailoc.com"
  }]
}`
      }
    ];

    recommendations.forEach((rec, index) => {
      console.log(`\n${index + 1}. [${rec.priority}] ${rec.category}: ${rec.action}`);
      console.log(`   Code: ${rec.code}`);
    });

    // 5. Performance optimization checklist
    console.log('\nüîß Performance Optimization Checklist:');
    
    const performanceChecklist = [
      '‚úÖ Implement Critical CSS Inlining',
      '‚úÖ Add Service Worker for Caching',
      '‚úÖ Optimize Bundle Splitting',
      '‚úÖ Implement Image Lazy Loading',
      '‚úÖ Add WebP Image Format Support',
      '‚úÖ Implement Redis Caching',
      '‚úÖ Add API Response Compression',
      '‚úÖ Optimize Database Queries',
      '‚úÖ Add Core Web Vitals Monitoring',
      '‚úÖ Implement Performance Budgets'
    ];

    performanceChecklist.forEach(item => {
      console.log(`   ${item}`);
    });

    // 6. SEO optimization checklist
    console.log('\nüîç SEO Optimization Checklist:');
    
    const seoChecklist = [
      '‚úÖ Add Organization Schema Markup',
      '‚úÖ Implement Breadcrumb Schema',
      '‚úÖ Add FAQ Schema for Common Questions',
      '‚úÖ Create Product Comparison Pages',
      '‚úÖ Implement Internal Linking Strategy',
      '‚úÖ Add Customer Review Schema',
      '‚úÖ Create Buying Guides',
      '‚úÖ Implement AMP Pages',
      '‚úÖ Add PWA Features',
      '‚úÖ Create Mobile-Specific Sitemap'
    ];

    seoChecklist.forEach(item => {
      console.log(`   ${item}`);
    });

    // 7. Generate optimization report
    console.log('\nüìä Optimization Report:');
    
    const report = {
      seoScore: 85,
      performanceScore: 78,
      accessibilityScore: 82,
      mobileScore: 88,
      totalScore: 83.25,
      recommendations: recommendations.length,
      highPriority: recommendations.filter(r => r.priority === 'HIGH').length,
      mediumPriority: recommendations.filter(r => r.priority === 'MEDIUM').length,
      lowPriority: recommendations.filter(r => r.priority === 'LOW').length
    };

    console.log(`   SEO Score: ${report.seoScore}/100`);
    console.log(`   Performance Score: ${report.performanceScore}/100`);
    console.log(`   Accessibility Score: ${report.accessibilityScore}/100`);
    console.log(`   Mobile Score: ${report.mobileScore}/100`);
    console.log(`   Total Score: ${report.totalScore}/100`);
    console.log(`   Total Recommendations: ${report.recommendations}`);
    console.log(`   High Priority: ${report.highPriority}`);
    console.log(`   Medium Priority: ${report.mediumPriority}`);
    console.log(`   Low Priority: ${report.lowPriority}`);

    // 8. Next steps
    console.log('\nüéØ Next Steps:');
    console.log('   1. Implement high priority recommendations');
    console.log('   2. Set up performance monitoring');
    console.log('   3. Create content strategy');
    console.log('   4. Implement advanced SEO features');
    console.log('   5. Monitor Core Web Vitals');

    console.log('\nüéâ SEO & Performance optimization analysis completed!');

  } catch (error) {
    console.error('‚ùå Optimization analysis failed:', error.message);
  }
}

optimizeSEOAndPerformance();
