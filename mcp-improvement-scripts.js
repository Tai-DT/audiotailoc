#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

class AudioTailocImprovements {
  constructor() {
    this.projectRoot = process.cwd();
  }

  fixNextJsViewportWarnings() {
    console.log('üîß Fixing Next.js viewport warnings...');

    const layoutFiles = [
      'frontend/app/layout.tsx',
      'frontend/app/products/page.tsx',
      'frontend/app/cart/page.tsx',
      'frontend/app/login/page.tsx',
      'frontend/app/register/page.tsx'
    ];

    layoutFiles.forEach(file => {
      if (fs.existsSync(file)) {
        let content = fs.readFileSync(file, 'utf8');

        // Replace viewport in metadata export with viewport export
        if (content.includes('viewport') && content.includes('export const metadata')) {
          content = content.replace(
            /export const metadata = \{[\s\S]*?viewport:[\s\S]*?\}/m,
            (match) => {
              const withoutViewport = match.replace(/,\s*viewport:[\s\S]*?(?=\s*})/, '');
              return withoutViewport;
            }
          );

          // Add viewport export if not exists
          if (!content.includes('export const viewport')) {
            const viewportExport = `
export const viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
};`;

            // Insert after imports but before component
            const insertIndex = content.indexOf('export default');
            if (insertIndex !== -1) {
              content = content.slice(0, insertIndex) + viewportExport + '\n\n' + content.slice(insertIndex);
            }
          }

          fs.writeFileSync(file, content);
          console.log(`‚úÖ Fixed viewport in ${file}`);
        }
      }
    });
  }

  createEnvironmentConfig() {
    console.log('üîß Creating environment configuration...');

    const envContent = `# Audio T√†i L·ªôc Environment Configuration
# Generated by MCP - Audio Tailoc Automation

# API Configuration
NEXT_PUBLIC_API_BASE_URL=http://localhost:3010/api/v1

# App Configuration
NEXT_PUBLIC_APP_NAME=Audio T√†i L·ªôc
NEXT_PUBLIC_APP_URL=http://localhost:3000

# Feature Flags
NEXT_PUBLIC_ENABLE_ANALYTICS=false
NEXT_PUBLIC_ENABLE_DEBUG=true
NEXT_PUBLIC_ENABLE_PWA=false

# External Services
NEXT_PUBLIC_GOONG_API_KEY=POOqZaSJ7HfPZLaPCEtsT9eocFJ0VlMFy7Iw38IV

# Security
NEXT_PUBLIC_CSP_ENABLED=true

# Performance
NEXT_PUBLIC_IMAGE_OPTIMIZATION=true
NEXT_PUBLIC_LAZY_LOADING=true`;

    const envPath = 'frontend/.env.local';
    fs.writeFileSync(envPath, envContent);
    console.log(`‚úÖ Created environment config: ${envPath}`);
  }

  createDockerCompose() {
    console.log('üîß Creating Docker Compose configuration...');

    const dockerCompose = `version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: atl
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - audiotaloc

  # Search Engine
  meilisearch:
    image: getmeili/meilisearch:v1.8
    environment:
      MEILI_MASTER_KEY: masterKey
    ports:
      - "7700:7700"
    volumes:
      - meili_data:/meili_data
    networks:
      - audiotaloc

  # Redis (Optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - audiotaloc

volumes:
  postgres_data:
  meili_data:
  redis_data:

networks:
  audiotaloc:
    driver: bridge`;

    fs.writeFileSync('docker-compose.yml', dockerCompose);
    console.log('‚úÖ Created Docker Compose configuration');
  }

  createCIConfig() {
    console.log('üîß Creating CI/CD configuration...');

    const githubActions = `name: Audio T√†i L·ªôc CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js \${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: \${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Run Backend Tests
      run: cd backend && npm run test

    - name: Run Frontend Tests
      run: cd frontend && npm run test

    - name: Build Backend
      run: cd backend && npm run build

    - name: Build Frontend
      run: cd frontend && npm run build

    - name: Run E2E Tests
      run: npm run test:e2e

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here`;

    const githubDir = '.github/workflows';
    if (!fs.existsSync(githubDir)) {
      fs.mkdirSync(githubDir, { recursive: true });
    }

    fs.writeFileSync('.github/workflows/ci.yml', githubActions);
    console.log('‚úÖ Created GitHub Actions CI/CD workflow');
  }

  createMonitoringDashboard() {
    console.log('üîß Creating monitoring dashboard...');

    const dashboardScript = `#!/usr/bin/env node

const express = require('express');
const axios = require('axios');
const path = require('path');

const app = express();
const PORT = 3001;

app.use(express.json());
app.use(express.static(path.join(__dirname, 'dashboard')));

// Health check endpoint
app.get('/api/health', async (req, res) => {
  try {
    const backendHealth = await axios.get('http://localhost:3010/api/v1/health', { timeout: 5000 });
    const frontendHealth = await axios.get('http://localhost:3000', { timeout: 10000 });

    res.json({
      status: 'healthy',
      backend: backendHealth.status,
      frontend: frontendHealth.status,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(503).json({
      status: 'unhealthy',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// System metrics endpoint
app.get('/api/metrics', async (req, res) => {
  try {
    const [products, categories] = await Promise.all([
      axios.get('http://localhost:3010/api/v1/catalog/products'),
      axios.get('http://localhost:3010/api/v1/catalog/categories')
    ]);

    res.json({
      productsCount: products.data.data?.items?.length || 0,
      categoriesCount: categories.data.data?.items?.length || 0,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(503).json({
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Dashboard HTML
app.get('/', (req, res) => {
  res.send(\`
<!DOCTYPE html>
<html>
<head>
    <title>Audio T√†i L·ªôc - System Monitor</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .dashboard { max-width: 1200px; margin: 0 auto; }
        .card { background: white; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .status { padding: 5px 10px; border-radius: 4px; color: white; font-weight: bold; }
        .healthy { background: #4CAF50; }
        .unhealthy { background: #f44336; }
        .metric { font-size: 24px; font-weight: bold; color: #333; }
        .refresh { background: #2196F3; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; }
    </style>
</head>
<body>
    <div class="dashboard">
        <h1>üéµ Audio T√†i L·ªôc - System Monitor</h1>

        <div class="card">
            <h2>System Health</h2>
            <div id="health-status">Loading...</div>
        </div>

        <div class="card">
            <h2>System Metrics</h2>
            <div id="metrics">Loading...</div>
        </div>

        <button class="refresh" onclick="refreshData()">üîÑ Refresh</button>
    </div>

    <script>
        async function loadHealth() {
            try {
                const response = await fetch('/api/health');
                const data = await response.json();

                const status = document.getElementById('health-status');
                status.innerHTML = \`
                    <p><strong>Backend:</strong> <span class="status \${data.backend === 200 ? 'healthy' : 'unhealthy'}">\${data.backend}</span></p>
                    <p><strong>Frontend:</strong> <span class="status \${data.frontend === 200 ? 'healthy' : 'unhealthy'}">\${data.frontend}</span></p>
                    <p><strong>Last Check:</strong> \${data.timestamp}</p>
                \`;
            } catch (error) {
                document.getElementById('health-status').innerHTML = '<p class="status unhealthy">Unable to connect</p>';
            }
        }

        async function loadMetrics() {
            try {
                const response = await fetch('/api/metrics');
                const data = await response.json();

                const metrics = document.getElementById('metrics');
                metrics.innerHTML = \`
                    <p class="metric">\${data.productsCount} <small>Products</small></p>
                    <p class="metric">\${data.categoriesCount} <small>Categories</small></p>
                    <p><strong>Last Updated:</strong> \${data.timestamp}</p>
                \`;
            } catch (error) {
                document.getElementById('metrics').innerHTML = '<p class="status unhealthy">Unable to load metrics</p>';
            }
        }

        function refreshData() {
            loadHealth();
            loadMetrics();
        }

        // Auto refresh every 30 seconds
        setInterval(refreshData, 30000);

        // Initial load
        loadHealth();
        loadMetrics();
    </script>
</body>
</html>
  \`);
});

app.listen(PORT, () => {
  console.log(\`üéõÔ∏è Audio T√†i L·ªôc Monitoring Dashboard running on http://localhost:\${PORT}\`);
});

console.log('üéõÔ∏è Starting Audio T√†i L·ªôc Monitoring Dashboard...');
console.log(\`Dashboard will be available at: http://localhost:\${PORT}\`);
`;

    fs.writeFileSync('monitoring-dashboard.js', dashboardScript);
    console.log('‚úÖ Created monitoring dashboard');
  }

  createReadmeImprovements() {
    console.log('üîß Creating comprehensive README...');

    const readmeContent = `# üéµ Audio T√†i L·ªôc - Professional Audio Services

A modern, full-stack e-commerce platform for audio services built with cutting-edge technologies.

## üöÄ Features

### Core Features
- ‚úÖ **Product Catalog**: Complete product management with categories
- ‚úÖ **Shopping Cart**: Advanced cart functionality with persistence
- ‚úÖ **User Authentication**: Secure login/register system
- ‚úÖ **Payment Integration**: VNPAY, MOMO, PayOS support
- ‚úÖ **Real-time Chat**: Customer support integration
- ‚úÖ **SEO Optimized**: Built-in SEO features and sitemaps
- ‚úÖ **Mobile Responsive**: Perfect mobile experience
- ‚úÖ **PWA Ready**: Progressive Web App capabilities

### Technical Features
- ‚úÖ **Modern Stack**: Next.js 15 + NestJS + TypeScript
- ‚úÖ **Database**: PostgreSQL with Prisma ORM
- ‚úÖ **Search**: Meilisearch integration
- ‚úÖ **Caching**: Redis support
- ‚úÖ **Security**: Comprehensive security headers
- ‚úÖ **Performance**: Optimized for speed and scalability
- ‚úÖ **Monitoring**: Built-in system monitoring
- ‚úÖ **Docker**: Container-ready deployment

## üõ†Ô∏è Tech Stack

### Frontend
- **Framework**: Next.js 15 (App Router)
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **State Management**: Zustand
- **Forms**: React Hook Form + Zod
- **UI Components**: Radix UI + Custom Components

### Backend
- **Framework**: NestJS
- **Language**: TypeScript
- **Database**: PostgreSQL
- **ORM**: Prisma
- **Search**: Meilisearch
- **Cache**: Redis (optional)
- **Validation**: class-validator

### DevOps
- **Container**: Docker & Docker Compose
- **CI/CD**: GitHub Actions
- **Monitoring**: Custom dashboard
- **Deployment**: Ready for production

## üöÄ Quick Start

### Prerequisites
- Node.js 18+ or 20+
- PostgreSQL 15+
- Docker (optional)

### 1. Clone and Install
\`\`\`bash
git clone <repository-url>
cd audio-tailoc

# Install all dependencies
npm install
\`\`\`

### 2. Environment Setup
\`\`\`bash
# Copy environment file
cp frontend/.env.local.example frontend/.env.local

# Update database connection
# Edit DATABASE_URL in your environment
\`\`\`

### 3. Database Setup
\`\`\`bash
# Using Docker (Recommended)
docker-compose up -d postgres meilisearch

# Or using local PostgreSQL
# Make sure PostgreSQL is running
\`\`\`

### 4. Run Migrations
\`\`\`bash
cd backend
npm run db:push
npm run db:seed
\`\`\`

### 5. Start Development
\`\`\`bash
# From project root
npm run dev

# Or start services separately
npm run dev:backend
npm run dev:frontend
\`\`\`

### 6. Access Application
- **Frontend**: http://localhost:3000
- **Backend API**: http://localhost:3010/api/v1
- **Monitoring**: http://localhost:3001
- **API Docs**: http://localhost:3010/api

## üìä Monitoring & Analytics

### System Monitoring
\`\`\`bash
# Run MCP system scan
node mcp-project-automation.js

# Start monitoring dashboard
node monitoring-dashboard.js

# System health check
node system-monitor.js
\`\`\`

### Available Scripts
- \`mcp-project-automation.js\` - Full system analysis
- \`system-monitor.js\` - Health monitoring
- \`dev-workflow.js\` - Development workflow
- \`deploy-manager.js\` - Deployment management

## üß™ Testing

### Run Tests
\`\`\`bash
# Backend tests
cd backend && npm run test

# Frontend tests
cd frontend && npm run test

# E2E tests
npm run test:e2e
\`\`\`

### API Testing
\`\`\`bash
# Test all APIs
node api-data-verification.js

# Test user journey
node end-to-end-user-flow-test.js
\`\`\`

## üö¢ Deployment

### Using Docker
\`\`\`bash
# Build and deploy
docker-compose up -d

# Or using deployment script
node deploy-manager.js build
node deploy-manager.js deploy
\`\`\`

### Manual Deployment
\`\`\`bash
# Backend
cd backend
npm run build
npm run start:prod

# Frontend
cd frontend
npm run build
npm run start
\`\`\`

## üìÅ Project Structure

\`\`\`
audio-tailoc/
‚îú‚îÄ‚îÄ backend/                 # NestJS API server
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ modules/        # Feature modules
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ common/         # Shared utilities
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.ts         # Application entry
‚îÇ   ‚îú‚îÄ‚îÄ prisma/             # Database schema & migrations
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ frontend/                # Next.js application
‚îÇ   ‚îú‚îÄ‚îÄ app/                # App router pages
‚îÇ   ‚îú‚îÄ‚îÄ components/         # Reusable components
‚îÇ   ‚îú‚îÄ‚îÄ lib/                # Utilities & configurations
‚îÇ   ‚îú‚îÄ‚îÄ store/              # State management
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ docker-compose.yml      # Docker services
‚îú‚îÄ‚îÄ mcp-project-automation.js # System automation
‚îî‚îÄ‚îÄ README.md
\`\`\`

## üîß Configuration

### Environment Variables

#### Frontend (.env.local)
\`\`\`env
NEXT_PUBLIC_API_BASE_URL=http://localhost:3010/api/v1
NEXT_PUBLIC_APP_NAME=Audio T√†i L·ªôc
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_GOONG_API_KEY=your_api_key
\`\`\`

#### Backend (.env)
\`\`\`env
DATABASE_URL=postgresql://user:password@localhost:5432/atl
JWT_SECRET=your_jwt_secret
MEILI_URL=http://localhost:7700
REDIS_URL=redis://localhost:6379
\`\`\`

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## üìÑ License

This project is licensed under the MIT License.

## üìû Support

For support and questions:
- üìß Email: support@audiotailoc.com
- üì± Phone: +84 XXX XXX XXXX
- üè¢ Address: Your Business Address

## üéØ Roadmap

### Phase 1 ‚úÖ (Completed)
- Basic e-commerce functionality
- User authentication
- Product catalog
- Shopping cart

### Phase 2 üîÑ (In Progress)
- Payment integration
- Order management
- Admin panel

### Phase 3 üìã (Planned)
- Advanced analytics
- Mobile app
- Multi-language support
- Advanced features

---

**Built with ‚ù§Ô∏è by Audio T√†i L·ªôc Team**

*Last updated: \${new Date().toISOString().split('T')[0]}*`;

    fs.writeFileSync('README.md', readmeContent);
    console.log('‚úÖ Created comprehensive README');
  }

  createPackageJsonScripts() {
    console.log('üîß Adding npm scripts to root package.json...');

    const packageJsonPath = 'package.json';
    if (fs.existsSync(packageJsonPath)) {
      let packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

      packageJson.scripts = {
        ...packageJson.scripts,
        "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
        "dev:backend": "cd backend && npm run start:dev",
        "dev:frontend": "cd frontend && npm run dev",
        "build": "npm run build:backend && npm run build:frontend",
        "build:backend": "cd backend && npm run build",
        "build:frontend": "cd frontend && npm run build",
        "start": "npm run start:backend && npm run start:frontend",
        "start:backend": "cd backend && npm run start:prod",
        "start:frontend": "cd frontend && npm start",
        "test": "npm run test:backend && npm run test:frontend",
        "test:backend": "cd backend && npm run test",
        "test:frontend": "cd frontend && npm run test",
        "test:e2e": "node end-to-end-user-flow-test.js",
        "mcp:scan": "node mcp-project-automation.js",
        "monitor": "node system-monitor.js",
        "dashboard": "node monitoring-dashboard.js",
        "deploy": "node deploy-manager.js"
      };

      fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
      console.log('‚úÖ Added comprehensive npm scripts');
    }
  }

  runAllImprovements() {
    console.log('üöÄ AUDIO TAILOC MCP - SYSTEM IMPROVEMENTS');
    console.log('='.repeat(60));

    try {
      this.fixNextJsViewportWarnings();
      this.createEnvironmentConfig();
      this.createDockerCompose();
      this.createCIConfig();
      this.createMonitoringDashboard();
      this.createReadmeImprovements();
      this.createPackageJsonScripts();

      console.log('\nüéâ All improvements completed successfully!');
      console.log('\nüìã Summary of improvements:');
      console.log('‚úÖ Fixed Next.js viewport warnings');
      console.log('‚úÖ Created environment configuration');
      console.log('‚úÖ Created Docker Compose setup');
      console.log('‚úÖ Created CI/CD pipeline');
      console.log('‚úÖ Created monitoring dashboard');
      console.log('‚úÖ Updated README documentation');
      console.log('‚úÖ Added npm scripts');

      console.log('\nüöÄ Next steps:');
      console.log('1. Restart your development server');
      console.log('2. Run: npm run mcp:scan');
      console.log('3. Run: npm run dashboard');
      console.log('4. Check the updated README.md');

    } catch (error) {
      console.log(`‚ùå Error during improvements: ${error.message}`);
    }
  }
}

// Run improvements
async function main() {
  const improvements = new AudioTailocImprovements();
  improvements.runAllImprovements();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = AudioTailocImprovements;
