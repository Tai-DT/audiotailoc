version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: audiotailoc-postgres
    environment:
      POSTGRES_DB: audiotailoc
      POSTGRES_USER: audiotailoc
      POSTGRES_PASSWORD: audiotailoc_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - audiotailoc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audiotailoc -d audiotailoc"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: audiotailoc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - audiotailoc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: audiotailoc-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://audiotailoc:audiotailoc_password@postgres:5432/audiotailoc
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      PORT: 3010
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
    ports:
      - "3010:3010"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - audiotailoc-network
    restart: unless-stopped

  # Dashboard (Development)
  dashboard:
    build:
      context: .
      dockerfile: apps/dashboard/Dockerfile
    container_name: audiotailoc-dashboard
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:3010
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - audiotailoc-network
    restart: unless-stopped

  # Frontend (Development)
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: audiotailoc-frontend
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:3010
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - audiotailoc-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: audiotailoc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - dashboard
      - frontend
    networks:
      - audiotailoc-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  audiotailoc-network:
    driver: bridge


