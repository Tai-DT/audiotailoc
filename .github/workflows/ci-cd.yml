name: Audio Tài Lộc CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io

jobs:
  # Test and build backend
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audiotailoc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/audiotailoc_test

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/audiotailoc_test

      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/audiotailoc_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/audiotailoc_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist/

  # Test and build frontend
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/

  # Test and build dashboard
  dashboard:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dashboard

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-build
          path: dashboard/.next/

  # Run comprehensive API tests
  api-tests:
    runs-on: ubuntu-latest
    needs: backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: audiotailoc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist/

      - name: Setup test environment
        working-directory: ./backend
        run: |
          npm ci
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/audiotailoc_test

      - name: Start backend server
        working-directory: ./backend
        run: |
          npm run start:prod > server.log 2>&1 &
          echo $! > server.pid
          sleep 15

      - name: Run API tests
        run: |
          chmod +x auto-test.sh
          ./auto-test.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            auto-test.log
            backend/server.log

      - name: Stop server
        run: |
          if [ -f backend/server.pid ]; then
            kill $(cat backend/server.pid) || true
          fi

  # Deploy to development (only on push to master)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [backend, frontend, dashboard, api-tests]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist/

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/

      - name: Download dashboard build
        uses: actions/download-artifact@v4
        with:
          name: dashboard-build
          path: dashboard/.next/

      - name: Deploy to development
        run: |
          echo "🚀 Deploying to development environment..."
          # Add your deployment commands here
          # Example: rsync, docker, cloud deployment, etc.
          echo "✅ Development deployment completed"

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: [backend, frontend, dashboard]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          cd backend && npm audit --audit-level=moderate
          cd ../frontend && npm audit --audit-level=moderate
          cd ../dashboard && npm audit --audit-level=moderate

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance tests
  performance:
    runs-on: ubuntu-latest
    needs: backend
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz -L | tar xvz
          sudo mv k6-v0.45.0-linux-amd64/k6 /usr/local/bin/

      - name: Run performance tests
        run: |
          # Add your k6 performance test scripts here
          echo "Performance tests would run here"

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [backend, frontend, dashboard, api-tests, security]
    if: always()

    steps:
      - name: Notify success
        if: needs.backend.result == 'success' && needs.frontend.result == 'success' && needs.dashboard.result == 'success' && needs.api-tests.result == 'success'
        run: |
          echo "🎉 All checks passed! Ready for deployment."

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Some checks failed. Please review the logs."

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dashboard | ${{ needs.dashboard.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.api-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View detailed logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY