import { ConfigService } from '@nestjs/config';
import { PrismaClient } from '@prisma/client';
export declare class TestDatabaseService {
    private configService;
    private readonly logger;
    private prisma;
    constructor(configService: ConfigService);
    createTestUser(overrides?: Partial<any>): Promise<{
        id: string;
        email: string;
        password: string;
        name: string;
        phone: string;
        role: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    createTestProduct(overrides?: Partial<any>): Promise<{
        model: string;
        tags: string;
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        slug: string;
        imageUrl: string;
        categoryId: string;
        viewCount: number;
        featured: boolean;
        images: string;
        shortDescription: string;
        features: string;
        isActive: boolean;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        canonicalUrl: string;
        isDeleted: boolean;
        priceCents: bigint;
        originalPriceCents: bigint;
        brand: string;
        sku: string;
        specifications: string;
        warranty: string;
        weight: number;
        dimensions: string;
        stockQuantity: number;
        minOrderQuantity: number;
        maxOrderQuantity: number;
        maxStock: number;
    }>;
    createTestCategory(overrides?: Partial<any>): Promise<{
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        slug: string;
        imageUrl: string;
        isActive: boolean;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        canonicalUrl: string;
        parentId: string;
    }>;
    createTestOrder(userId: string, productIds?: string[], overrides?: Partial<any>): Promise<{
        status: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        orderNo: string;
        userId: string;
        subtotalCents: number;
        discountCents: number;
        shippingCents: number;
        totalCents: number;
        shippingAddress: string;
        shippingCoordinates: string;
        promotionCode: string;
    }>;
    createTestService(overrides?: Partial<any>): Promise<{
        tags: string;
        description: string;
        type: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        duration: number;
        slug: string;
        viewCount: number;
        seoTitle: string;
        seoDescription: string;
        images: string;
        shortDescription: string;
        features: string;
        isActive: boolean;
        isFeatured: boolean;
        price: number;
        metadata: string;
        basePriceCents: number;
        minPrice: number;
        maxPrice: number;
        priceType: string;
        typeId: string;
        requirements: string;
    }>;
    cleanupTestData(): Promise<void>;
    getTestDataCounts(): Promise<{
        users: number;
        products: number;
        categories: number;
        orders: number;
        services: number;
    }>;
    createTestDataset(options?: {
        users?: number;
        categories?: number;
        products?: number;
        services?: number;
        orders?: number;
    }): Promise<{
        userIds: string[];
        categoryIds: string[];
        productIds: string[];
        serviceIds: string[];
    }>;
    checkDatabaseHealth(): Promise<boolean>;
    resetDatabase(): Promise<void>;
    getPrismaClient(): PrismaClient;
    closeConnection(): Promise<void>;
}
