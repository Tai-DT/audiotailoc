import { PrismaService } from '../../prisma/prisma.service';
export declare class ProjectsService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    findAll(params: {
        page?: number;
        limit?: number;
        status?: string;
        featured?: boolean;
        category?: string;
    }): Promise<{
        data: ({
            user: {
                id: string;
                email: string;
                name: string;
            };
        } & {
            category: string;
            client: string;
            status: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            tags: string;
            description: string;
            content: string;
            startDate: Date;
            endDate: Date;
            duration: string;
            slug: string;
            shortDescription: string;
            clientLogo: string;
            technologies: string;
            features: string;
            images: string;
            thumbnailImage: string;
            coverImage: string;
            youtubeVideoId: string;
            youtubeVideoUrl: string;
            demoUrl: string;
            githubUrl: string;
            liveUrl: string;
            teamSize: number;
            budget: string;
            isActive: boolean;
            isFeatured: boolean;
            displayOrder: number;
            viewCount: number;
            testimonial: string;
            results: string;
            challenges: string;
            solutions: string;
            metaTitle: string;
            metaDescription: string;
            metaKeywords: string;
            ogTitle: string;
            ogDescription: string;
            ogImage: string;
            structuredData: string;
            canonicalUrl: string;
            galleryImages: string;
            clientLogoUrl: string;
            projectDate: Date;
            completionDate: Date;
            featured: boolean;
            isDeleted: boolean;
        })[];
        meta: {
            total: number;
            page: number;
            limit: number;
            totalPages: number;
        };
    }>;
    findFeatured(): Promise<{
        category: string;
        client: string;
        status: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        tags: string;
        description: string;
        content: string;
        startDate: Date;
        endDate: Date;
        duration: string;
        slug: string;
        shortDescription: string;
        clientLogo: string;
        technologies: string;
        features: string;
        images: string;
        thumbnailImage: string;
        coverImage: string;
        youtubeVideoId: string;
        youtubeVideoUrl: string;
        demoUrl: string;
        githubUrl: string;
        liveUrl: string;
        teamSize: number;
        budget: string;
        isActive: boolean;
        isFeatured: boolean;
        displayOrder: number;
        viewCount: number;
        testimonial: string;
        results: string;
        challenges: string;
        solutions: string;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        ogTitle: string;
        ogDescription: string;
        ogImage: string;
        structuredData: string;
        canonicalUrl: string;
        galleryImages: string;
        clientLogoUrl: string;
        projectDate: Date;
        completionDate: Date;
        featured: boolean;
        isDeleted: boolean;
    }[]>;
    findBySlug(slug: string): Promise<{
        user: {
            id: string;
            email: string;
            name: string;
        };
    } & {
        category: string;
        client: string;
        status: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        tags: string;
        description: string;
        content: string;
        startDate: Date;
        endDate: Date;
        duration: string;
        slug: string;
        shortDescription: string;
        clientLogo: string;
        technologies: string;
        features: string;
        images: string;
        thumbnailImage: string;
        coverImage: string;
        youtubeVideoId: string;
        youtubeVideoUrl: string;
        demoUrl: string;
        githubUrl: string;
        liveUrl: string;
        teamSize: number;
        budget: string;
        isActive: boolean;
        isFeatured: boolean;
        displayOrder: number;
        viewCount: number;
        testimonial: string;
        results: string;
        challenges: string;
        solutions: string;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        ogTitle: string;
        ogDescription: string;
        ogImage: string;
        structuredData: string;
        canonicalUrl: string;
        galleryImages: string;
        clientLogoUrl: string;
        projectDate: Date;
        completionDate: Date;
        featured: boolean;
        isDeleted: boolean;
    }>;
    findById(id: string): Promise<{
        user: {
            id: string;
            email: string;
            name: string;
        };
    } & {
        category: string;
        client: string;
        status: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        tags: string;
        description: string;
        content: string;
        startDate: Date;
        endDate: Date;
        duration: string;
        slug: string;
        shortDescription: string;
        clientLogo: string;
        technologies: string;
        features: string;
        images: string;
        thumbnailImage: string;
        coverImage: string;
        youtubeVideoId: string;
        youtubeVideoUrl: string;
        demoUrl: string;
        githubUrl: string;
        liveUrl: string;
        teamSize: number;
        budget: string;
        isActive: boolean;
        isFeatured: boolean;
        displayOrder: number;
        viewCount: number;
        testimonial: string;
        results: string;
        challenges: string;
        solutions: string;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        ogTitle: string;
        ogDescription: string;
        ogImage: string;
        structuredData: string;
        canonicalUrl: string;
        galleryImages: string;
        clientLogoUrl: string;
        projectDate: Date;
        completionDate: Date;
        featured: boolean;
        isDeleted: boolean;
    }>;
    create(data: any): Promise<{
        user: {
            id: string;
            email: string;
            name: string;
        };
    } & {
        category: string;
        client: string;
        status: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        tags: string;
        description: string;
        content: string;
        startDate: Date;
        endDate: Date;
        duration: string;
        slug: string;
        shortDescription: string;
        clientLogo: string;
        technologies: string;
        features: string;
        images: string;
        thumbnailImage: string;
        coverImage: string;
        youtubeVideoId: string;
        youtubeVideoUrl: string;
        demoUrl: string;
        githubUrl: string;
        liveUrl: string;
        teamSize: number;
        budget: string;
        isActive: boolean;
        isFeatured: boolean;
        displayOrder: number;
        viewCount: number;
        testimonial: string;
        results: string;
        challenges: string;
        solutions: string;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        ogTitle: string;
        ogDescription: string;
        ogImage: string;
        structuredData: string;
        canonicalUrl: string;
        galleryImages: string;
        clientLogoUrl: string;
        projectDate: Date;
        completionDate: Date;
        featured: boolean;
        isDeleted: boolean;
    }>;
    update(id: string, data: any): Promise<{
        user: {
            id: string;
            email: string;
            name: string;
        };
    } & {
        category: string;
        client: string;
        status: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        tags: string;
        description: string;
        content: string;
        startDate: Date;
        endDate: Date;
        duration: string;
        slug: string;
        shortDescription: string;
        clientLogo: string;
        technologies: string;
        features: string;
        images: string;
        thumbnailImage: string;
        coverImage: string;
        youtubeVideoId: string;
        youtubeVideoUrl: string;
        demoUrl: string;
        githubUrl: string;
        liveUrl: string;
        teamSize: number;
        budget: string;
        isActive: boolean;
        isFeatured: boolean;
        displayOrder: number;
        viewCount: number;
        testimonial: string;
        results: string;
        challenges: string;
        solutions: string;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        ogTitle: string;
        ogDescription: string;
        ogImage: string;
        structuredData: string;
        canonicalUrl: string;
        galleryImages: string;
        clientLogoUrl: string;
        projectDate: Date;
        completionDate: Date;
        featured: boolean;
        isDeleted: boolean;
    }>;
    remove(id: string): Promise<{
        message: string;
    }>;
    toggleFeatured(id: string): Promise<{
        category: string;
        client: string;
        status: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        tags: string;
        description: string;
        content: string;
        startDate: Date;
        endDate: Date;
        duration: string;
        slug: string;
        shortDescription: string;
        clientLogo: string;
        technologies: string;
        features: string;
        images: string;
        thumbnailImage: string;
        coverImage: string;
        youtubeVideoId: string;
        youtubeVideoUrl: string;
        demoUrl: string;
        githubUrl: string;
        liveUrl: string;
        teamSize: number;
        budget: string;
        isActive: boolean;
        isFeatured: boolean;
        displayOrder: number;
        viewCount: number;
        testimonial: string;
        results: string;
        challenges: string;
        solutions: string;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        ogTitle: string;
        ogDescription: string;
        ogImage: string;
        structuredData: string;
        canonicalUrl: string;
        galleryImages: string;
        clientLogoUrl: string;
        projectDate: Date;
        completionDate: Date;
        featured: boolean;
        isDeleted: boolean;
    }>;
    toggleActive(id: string): Promise<{
        category: string;
        client: string;
        status: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        tags: string;
        description: string;
        content: string;
        startDate: Date;
        endDate: Date;
        duration: string;
        slug: string;
        shortDescription: string;
        clientLogo: string;
        technologies: string;
        features: string;
        images: string;
        thumbnailImage: string;
        coverImage: string;
        youtubeVideoId: string;
        youtubeVideoUrl: string;
        demoUrl: string;
        githubUrl: string;
        liveUrl: string;
        teamSize: number;
        budget: string;
        isActive: boolean;
        isFeatured: boolean;
        displayOrder: number;
        viewCount: number;
        testimonial: string;
        results: string;
        challenges: string;
        solutions: string;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        ogTitle: string;
        ogDescription: string;
        ogImage: string;
        structuredData: string;
        canonicalUrl: string;
        galleryImages: string;
        clientLogoUrl: string;
        projectDate: Date;
        completionDate: Date;
        featured: boolean;
        isDeleted: boolean;
    }>;
    updateDisplayOrder(id: string, displayOrder: number): Promise<{
        category: string;
        client: string;
        status: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        tags: string;
        description: string;
        content: string;
        startDate: Date;
        endDate: Date;
        duration: string;
        slug: string;
        shortDescription: string;
        clientLogo: string;
        technologies: string;
        features: string;
        images: string;
        thumbnailImage: string;
        coverImage: string;
        youtubeVideoId: string;
        youtubeVideoUrl: string;
        demoUrl: string;
        githubUrl: string;
        liveUrl: string;
        teamSize: number;
        budget: string;
        isActive: boolean;
        isFeatured: boolean;
        displayOrder: number;
        viewCount: number;
        testimonial: string;
        results: string;
        challenges: string;
        solutions: string;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        ogTitle: string;
        ogDescription: string;
        ogImage: string;
        structuredData: string;
        canonicalUrl: string;
        galleryImages: string;
        clientLogoUrl: string;
        projectDate: Date;
        completionDate: Date;
        featured: boolean;
        isDeleted: boolean;
    }>;
    private generateSlug;
    private extractYouTubeId;
    updateImages(id: string, imageData: {
        thumbnailImage?: string;
        coverImage?: string;
        galleryImages?: string;
    }): Promise<{
        user: {
            id: string;
            email: string;
            name: string;
        };
    } & {
        category: string;
        client: string;
        status: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        tags: string;
        description: string;
        content: string;
        startDate: Date;
        endDate: Date;
        duration: string;
        slug: string;
        shortDescription: string;
        clientLogo: string;
        technologies: string;
        features: string;
        images: string;
        thumbnailImage: string;
        coverImage: string;
        youtubeVideoId: string;
        youtubeVideoUrl: string;
        demoUrl: string;
        githubUrl: string;
        liveUrl: string;
        teamSize: number;
        budget: string;
        isActive: boolean;
        isFeatured: boolean;
        displayOrder: number;
        viewCount: number;
        testimonial: string;
        results: string;
        challenges: string;
        solutions: string;
        metaTitle: string;
        metaDescription: string;
        metaKeywords: string;
        ogTitle: string;
        ogDescription: string;
        ogImage: string;
        structuredData: string;
        canonicalUrl: string;
        galleryImages: string;
        clientLogoUrl: string;
        projectDate: Date;
        completionDate: Date;
        featured: boolean;
        isDeleted: boolean;
    }>;
}
