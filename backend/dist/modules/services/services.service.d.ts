import { PrismaService } from '../../prisma/prisma.service';
import { CreateServiceDto } from './dto/create-service.dto';
import { UpdateServiceDto } from './dto/update-service.dto';
export declare class ServicesService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    createService(data: CreateServiceDto): Promise<{
        service_items: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            serviceId: string;
            price: number;
        }[];
        service_types: {
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            slug: string;
            isActive: boolean;
            icon: string;
            color: string;
        };
    } & {
        tags: string;
        description: string;
        type: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        duration: number;
        slug: string;
        viewCount: number;
        seoTitle: string;
        seoDescription: string;
        images: string;
        shortDescription: string;
        features: string;
        isActive: boolean;
        isFeatured: boolean;
        price: number;
        metadata: string;
        basePriceCents: number;
        minPrice: number;
        maxPrice: number;
        priceType: string;
        typeId: string;
        requirements: string;
    }>;
    getServices(params: {
        categoryId?: string;
        typeId?: string;
        isActive?: boolean;
        page?: number;
        pageSize?: number;
    }): Promise<{
        total: number;
        page: number;
        pageSize: number;
        services: {
            price: number;
            minPriceDisplay: number;
            maxPriceDisplay: number;
            type: {
                description: string;
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                sortOrder: number;
                slug: string;
                isActive: boolean;
                icon: string;
                color: string;
            };
            service_items: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                quantity: number;
                serviceId: string;
                price: number;
            }[];
            service_types: {
                description: string;
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                sortOrder: number;
                slug: string;
                isActive: boolean;
                icon: string;
                color: string;
            };
            _count: {
                service_bookings: number;
            };
            tags: string;
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            duration: number;
            slug: string;
            viewCount: number;
            seoTitle: string;
            seoDescription: string;
            images: string;
            shortDescription: string;
            features: string;
            isActive: boolean;
            isFeatured: boolean;
            metadata: string;
            basePriceCents: number;
            minPrice: number;
            maxPrice: number;
            priceType: string;
            typeId: string;
            requirements: string;
        }[];
    }>;
    getService(id: string): Promise<{
        price: number;
        minPriceDisplay: number;
        maxPriceDisplay: number;
        type: {
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            slug: string;
            isActive: boolean;
            icon: string;
            color: string;
        };
        relatedProjects: {
            client: string;
            status: string;
            tags: string;
            description: string;
            content: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            startDate: Date;
            endDate: Date;
            duration: string;
            category: string;
            slug: string;
            viewCount: number;
            featured: boolean;
            images: string;
            shortDescription: string;
            clientLogo: string;
            technologies: string;
            features: string;
            thumbnailImage: string;
            coverImage: string;
            youtubeVideoId: string;
            youtubeVideoUrl: string;
            demoUrl: string;
            githubUrl: string;
            liveUrl: string;
            teamSize: number;
            budget: string;
            isActive: boolean;
            isFeatured: boolean;
            displayOrder: number;
            testimonial: string;
            results: string;
            challenges: string;
            solutions: string;
            metaTitle: string;
            metaDescription: string;
            metaKeywords: string;
            ogTitle: string;
            ogDescription: string;
            ogImage: string;
            structuredData: string;
            canonicalUrl: string;
            galleryImages: string;
            clientLogoUrl: string;
            projectDate: Date;
            completionDate: Date;
            isDeleted: boolean;
        }[];
        service_bookings: {
            status: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            notes: string;
            serviceId: string;
            technicianId: string;
            scheduledAt: Date;
            scheduledTime: string;
            completedAt: Date;
            estimatedCosts: number;
            actualCosts: number;
        }[];
        service_items: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            serviceId: string;
            price: number;
        }[];
        service_types: {
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            slug: string;
            isActive: boolean;
            icon: string;
            color: string;
        };
        tags: string;
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        duration: number;
        slug: string;
        viewCount: number;
        seoTitle: string;
        seoDescription: string;
        images: string;
        shortDescription: string;
        features: string;
        isActive: boolean;
        isFeatured: boolean;
        metadata: string;
        basePriceCents: number;
        minPrice: number;
        maxPrice: number;
        priceType: string;
        typeId: string;
        requirements: string;
    }>;
    getServiceBySlug(slug: string): Promise<{
        price: number;
        type: {
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            slug: string;
            isActive: boolean;
            icon: string;
            color: string;
        };
        service_items: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            serviceId: string;
            price: number;
        }[];
        service_types: {
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            slug: string;
            isActive: boolean;
            icon: string;
            color: string;
        };
        tags: string;
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        duration: number;
        slug: string;
        viewCount: number;
        seoTitle: string;
        seoDescription: string;
        images: string;
        shortDescription: string;
        features: string;
        isActive: boolean;
        isFeatured: boolean;
        metadata: string;
        basePriceCents: number;
        minPrice: number;
        maxPrice: number;
        priceType: string;
        typeId: string;
        requirements: string;
    }>;
    updateService(id: string, data: UpdateServiceDto): Promise<{
        price: number;
        minPriceDisplay: number;
        maxPriceDisplay: number;
        type: {
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            slug: string;
            isActive: boolean;
            icon: string;
            color: string;
        };
        service_items: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            serviceId: string;
            price: number;
        }[];
        service_types: {
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            slug: string;
            isActive: boolean;
            icon: string;
            color: string;
        };
        tags: string;
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        duration: number;
        slug: string;
        viewCount: number;
        seoTitle: string;
        seoDescription: string;
        images: string;
        shortDescription: string;
        features: string;
        isActive: boolean;
        isFeatured: boolean;
        metadata: string;
        basePriceCents: number;
        minPrice: number;
        maxPrice: number;
        priceType: string;
        typeId: string;
        requirements: string;
    }>;
    updateServiceImage(id: string, imagePath: string): Promise<{
        price: number;
        minPriceDisplay: number;
        maxPriceDisplay: number;
        type: {
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            slug: string;
            isActive: boolean;
            icon: string;
            color: string;
        };
        service_items: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            serviceId: string;
            price: number;
        }[];
        service_types: {
            description: string;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            sortOrder: number;
            slug: string;
            isActive: boolean;
            icon: string;
            color: string;
        };
        tags: string;
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        duration: number;
        slug: string;
        viewCount: number;
        seoTitle: string;
        seoDescription: string;
        images: string;
        shortDescription: string;
        features: string;
        isActive: boolean;
        isFeatured: boolean;
        metadata: string;
        basePriceCents: number;
        minPrice: number;
        maxPrice: number;
        priceType: string;
        typeId: string;
        requirements: string;
    }>;
    deleteService(id: string): Promise<{
        tags: string;
        description: string;
        type: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        duration: number;
        slug: string;
        viewCount: number;
        seoTitle: string;
        seoDescription: string;
        images: string;
        shortDescription: string;
        features: string;
        isActive: boolean;
        isFeatured: boolean;
        price: number;
        metadata: string;
        basePriceCents: number;
        minPrice: number;
        maxPrice: number;
        priceType: string;
        typeId: string;
        requirements: string;
    }>;
    addServiceItem(serviceId: string, data: {
        name: string;
        priceCents: number;
    }): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        quantity: number;
        serviceId: string;
        price: number;
    }>;
    updateServiceItem(itemId: string, data: Partial<{
        name: string;
        priceCents: number;
    }>): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        quantity: number;
        serviceId: string;
        price: number;
    }>;
    deleteServiceItem(itemId: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        quantity: number;
        serviceId: string;
        price: number;
    }>;
    getServiceTypes(): Promise<{
        id: string;
        name: string;
        slug: string;
        description: string;
        icon: string;
        color: string;
        isActive: boolean;
        sortOrder: number;
        createdAt: string;
        updatedAt: string;
    }[]>;
    getServiceType(id: string): Promise<{
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        sortOrder: number;
        slug: string;
        isActive: boolean;
        icon: string;
        color: string;
    }>;
    private generateSlug;
    getServiceStats(): Promise<{
        totalServices: number;
        activeServices: number;
        totalBookings: number;
        pendingBookings: number;
        completedBookings: number;
        totalRevenue: number;
    }>;
    createServiceType(data: {
        name: string;
        slug?: string;
        description?: string;
        isActive?: boolean;
    }): Promise<{
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        sortOrder: number;
        slug: string;
        isActive: boolean;
        icon: string;
        color: string;
    }>;
    updateServiceType(id: string, data: {
        name?: string;
        slug?: string;
        description?: string;
        isActive?: boolean;
        sortOrder?: number;
    }): Promise<{
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        sortOrder: number;
        slug: string;
        isActive: boolean;
        icon: string;
        color: string;
    }>;
    deleteServiceType(id: string): Promise<{
        description: string;
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        sortOrder: number;
        slug: string;
        isActive: boolean;
        icon: string;
        color: string;
    }>;
    private getNextSortOrder;
    private getRelatedProjects;
}
