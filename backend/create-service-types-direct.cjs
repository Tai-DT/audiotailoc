const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createServiceTypes() {
  try {
    console.log('üîÑ T·∫°o service types m·∫´u tr·ª±c ti·∫øp v√†o database...');

    const serviceTypes = [
      {
        name: 'Cho thu√™',
        slug: 'cho-thue',
        description: 'D·ªãch v·ª• cho thu√™ thi·∫øt b·ªã √¢m thanh',
        color: '#FF6B6B',
        isActive: true,
      },
      {
        name: 'B√°n h√†ng',
        slug: 'ban-hang',
        description: 'D·ªãch v·ª• b√°n thi·∫øt b·ªã √¢m thanh',
        color: '#4ECDC4',
        isActive: true,
      },
      {
        name: 'S·ª≠a ch·ªØa',
        slug: 'sua-chua',
        description: 'D·ªãch v·ª• s·ª≠a ch·ªØa thi·∫øt b·ªã √¢m thanh',
        color: '#45B7D1',
        isActive: true,
      }
    ];

    for (const type of serviceTypes) {
      try {
        const created = await prisma.serviceType.create({
          data: type
        });
        console.log('‚úÖ Created service type:', created.name);
      } catch (error) {
        if (error.code === 'P2002') {
          console.log('‚ö†Ô∏è  Service type already exists:', type.name);
        } else {
          console.error('‚ùå Failed to create service type:', type.name, error.message);
        }
      }
    }

    console.log('üéâ Ho√†n th√†nh t·∫°o service types m·∫´u');

    // Verify created service types
    const allTypes = await prisma.serviceType.findMany();
    console.log('üìã Service types hi·ªán t·∫°i:', allTypes.length);
    allTypes.forEach(type => {
      console.log(`  - ${type.name} (${type.slug})`);
    });

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createServiceTypes();