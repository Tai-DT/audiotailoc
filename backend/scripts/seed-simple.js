const { Client } = require('pg');
const bcrypt = require('bcrypt');

async function seedAllData() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu seeding d·ªØ li·ªáu m·∫´u cho Audio T√†i L·ªôc...');

  // K·∫øt n·ªëi database
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');

    // 1. Seed Categories
    console.log('üìÇ Seeding Categories...');
    const categories = [
      { name: '√Çm thanh chuy√™n nghi·ªáp', slug: 'am-thanh-chuyen-nghiep', is_active: true },
      { name: 'Thi·∫øt b·ªã ghi √¢m', slug: 'thiet-bi-ghi-am', is_active: true },
      { name: 'Loa & Amplifier', slug: 'loa-amplifier', is_active: true },
      { name: 'Microphone', slug: 'microphone', is_active: true },
      { name: 'Mixer & Console', slug: 'mixer-console', is_active: true },
      { name: 'Ph·ª• ki·ªán √¢m thanh', slug: 'phu-kien-am-thanh', is_active: true },
      { name: 'Thi·∫øt b·ªã DJ', slug: 'thiet-bi-dj', is_active: true },
      { name: 'H·ªá th·ªëng √¢m thanh h·ªôi tr∆∞·ªùng', slug: 'he-thong-am-thanh-hoi-truong', is_active: true },
      { name: 'Thi·∫øt b·ªã s√¢n kh·∫•u', slug: 'thiet-bi-san-khau', is_active: true },
      { name: '√Çm thanh karaoke', slug: 'am-thanh-karaoke', is_active: true },
    ];

    for (const category of categories) {
      await client.query(`
        INSERT INTO categories (id, name, slug, is_active, "createdAt", "updatedAt")
        VALUES (gen_random_uuid(), $1, $2, $3, NOW(), NOW())
        ON CONFLICT (slug) DO NOTHING
      `, [category.name, category.slug, category.is_active]);
    }
    console.log('‚úÖ ƒê√£ seed categories');

    // 2. Seed Service Types
    console.log('üîß Seeding Service Types...');
    const serviceTypes = [
      { name: 'L·∫Øp ƒë·∫∑t h·ªá th·ªëng', slug: 'lap-dat-he-thong', description: 'L·∫Øp ƒë·∫∑t v√† c·∫•u h√¨nh h·ªá th·ªëng √¢m thanh chuy√™n nghi·ªáp', is_active: true, sort_order: 1 },
      { name: 'B·∫£o tr√¨ - S·ª≠a ch·ªØa', slug: 'bao-tri-sua-chua', description: 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥ v√† s·ª≠a ch·ªØa thi·∫øt b·ªã √¢m thanh', is_active: true, sort_order: 2 },
      { name: 'T∆∞ v·∫•n k·ªπ thu·∫≠t', slug: 'tu-van-ky-thuat', description: 'T∆∞ v·∫•n thi·∫øt k·∫ø v√† l·ª±a ch·ªçn gi·∫£i ph√°p √¢m thanh', is_active: true, sort_order: 3 },
      { name: 'ƒê√†o t·∫°o - Hu·∫•n luy·ªán', slug: 'dao-tao-huan-luyen', description: 'ƒê√†o t·∫°o s·ª≠ d·ª•ng thi·∫øt b·ªã v√† k·ªπ thu·∫≠t √¢m thanh', is_active: true, sort_order: 4 },
      { name: 'Thu√™ thi·∫øt b·ªã', slug: 'thue-thiet-bi', description: 'Cho thu√™ thi·∫øt b·ªã √¢m thanh s·ª± ki·ªán', is_active: true, sort_order: 5 },
      { name: 'Thi c√¥ng √¢m thanh', slug: 'thi-cong-am-thanh', description: 'Thi c√¥ng h·ªá th·ªëng √¢m thanh chuy√™n nghi·ªáp', is_active: true, sort_order: 6 },
      { name: 'T∆∞ v·∫•n gi·∫£i ph√°p', slug: 'tu-van-giai-phap', description: 'T∆∞ v·∫•n gi·∫£i ph√°p √¢m thanh to√†n di·ªán', is_active: true, sort_order: 7 },
      { name: 'H·ªó tr·ª£ k·ªπ thu·∫≠t', slug: 'ho-tro-ky-thuat', description: 'H·ªó tr·ª£ k·ªπ thu·∫≠t 24/7', is_active: true, sort_order: 8 },
    ];

    for (const serviceType of serviceTypes) {
      await client.query(`
        INSERT INTO service_types (id, name, slug, description, is_active, sort_order, "createdAt", "updatedAt")
        VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, NOW(), NOW())
        ON CONFLICT (slug) DO NOTHING
      `, [serviceType.name, serviceType.slug, serviceType.description, serviceType.is_active, serviceType.sort_order]);
    }
    console.log('‚úÖ ƒê√£ seed service types');

    // 3. Seed Users
    console.log('üë• Seeding Users...');
    const hashedPassword = await bcrypt.hash('password123', 10);

    const users = [
      {
        email: 'admin@audiotailoc.com',
        password: hashedPassword,
        name: 'Admin Audio T√†i L·ªôc',
        phone: '0123456789',
        role: 'ADMIN'
      },
      {
        email: 'nguyenvana@gmail.com',
        password: hashedPassword,
        name: 'Nguy·ªÖn VƒÉn A',
        phone: '0987654321',
        role: 'USER'
      },
      {
        email: 'tranthib@gmail.com',
        password: hashedPassword,
        name: 'Tr·∫ßn Th·ªã B',
        phone: '0912345678',
        role: 'USER'
      },
    ];

    const createdUsers = [];
    for (const user of users) {
      const result = await client.query(`
        INSERT INTO users (id, email, password, name, phone, role, is_active, "createdAt", "updatedAt")
        VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, true, NOW(), NOW())
        ON CONFLICT (email) DO NOTHING
        RETURNING id, email, role
      `, [user.email, user.password, user.name, user.phone, user.role]);

      if (result.rows.length > 0) {
        createdUsers.push(result.rows[0]);
      }
    }
    console.log('‚úÖ ƒê√£ seed users');

    // 4. Seed System Config
    console.log('‚öôÔ∏è Seeding System Config...');
    const systemConfigs = [
      { key: 'site_name', value: 'Audio T√†i L·ªôc', type: 'STRING' },
      { key: 'site_description', value: 'Thi·∫øt b·ªã √¢m thanh chuy√™n nghi·ªáp ch·∫•t l∆∞·ª£ng cao', type: 'STRING' },
      { key: 'contact_email', value: 'info@audiotailoc.com', type: 'STRING' },
      { key: 'contact_phone', value: '0123 456 789', type: 'STRING' },
      { key: 'contact_address', value: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM', type: 'STRING' },
      { key: 'business_hours', value: '8:00 - 17:30', type: 'STRING' },
      { key: 'shipping_fee', value: '50000', type: 'NUMBER' },
      { key: 'free_shipping_threshold', value: '1000000', type: 'NUMBER' },
      { key: 'tax_rate', value: '10', type: 'NUMBER' },
      { key: 'maintenance_mode', value: 'false', type: 'BOOLEAN' },
      { key: 'analytics_enabled', value: 'true', type: 'BOOLEAN' },
      { key: 'email_notifications', value: 'true', type: 'BOOLEAN' },
    ];

    for (const config of systemConfigs) {
      await client.query(`
        INSERT INTO system_configs (id, key, value, type, "createdAt", "updatedAt")
        VALUES (gen_random_uuid(), $1, $2, $3, NOW(), NOW())
        ON CONFLICT (key) DO NOTHING
      `, [config.key, config.value, config.type]);
    }
    console.log('‚úÖ ƒê√£ seed system config');

    console.log('üéâ Ho√†n th√†nh seeding d·ªØ li·ªáu m·∫´u!');
    console.log('üìä T√≥m t·∫Øt d·ªØ li·ªáu ƒë√£ t·∫°o:');
    console.log('- Categories: 10 danh m·ª•c s·∫£n ph·∫©m');
    console.log('- Service Types: 8 lo·∫°i d·ªãch v·ª•');
    console.log('- Users: 3 ng∆∞·ªùi d√πng (1 admin, 2 kh√°ch h√†ng)');
    console.log('- System Config: 12 c√†i ƒë·∫∑t h·ªá th·ªëng');

  } catch (error) {
    console.error('‚ùå L·ªói khi seeding:', error);
  } finally {
    await client.end();
  }
}

// Ch·∫°y seeding
seedAllData()
  .then(() => {
    console.log('‚úÖ Seeding ho√†n th√†nh th√†nh c√¥ng!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Seeding th·∫•t b·∫°i:', error);
    process.exit(1);
  });