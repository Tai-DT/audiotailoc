const axios = require('axios');

const BASE_URL = 'http://localhost:3010/api/v1';

// Test data
const testData = {
  contentGeneration: {
    prompt: 'Vi·∫øt m√¥ t·∫£ s·∫£n ph·∫©m tai nghe cao c·∫•p',
    type: 'product_description',
    tone: 'professional',
    maxLength: 300
  },
  
  sentimentAnalysis: {
    text: 'S·∫£n ph·∫©m n√†y th·∫≠t tuy·ªát v·ªùi! T√¥i r·∫•t h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng.',
    context: 'customer_feedback'
  },
  
  textClassification: {
    text: 'T√¥i mu·ªën mua tai nghe bluetooth',
    categories: ['purchase_inquiry', 'technical_support', 'complaint', 'general_question']
  },
  
  languageDetection: {
    text: 'Hello, I would like to buy headphones'
  },
  
  textSummarization: {
    text: 'Tai nghe T√†i L·ªôc Pro l√† s·∫£n ph·∫©m cao c·∫•p v·ªõi c√¥ng ngh·ªá √¢m thanh ti√™n ti·∫øn. S·∫£n ph·∫©m c√≥ thi·∫øt k·∫ø ƒë·∫πp m·∫Øt, ch·∫•t l∆∞·ª£ng √¢m thanh tuy·ªát v·ªùi v√† gi√° c·∫£ h·ª£p l√Ω. Kh√°ch h√†ng ƒë√°nh gi√° r·∫•t cao v·ªÅ ƒë·ªô b·ªÅn v√† hi·ªáu su·∫•t c·ªßa s·∫£n ph·∫©m.',
    maxSentences: 2
  },
  
  keywordExtraction: {
    text: 'Tai nghe bluetooth kh√¥ng d√¢y v·ªõi c√¥ng ngh·ªá noise cancellation v√† th·ªùi l∆∞·ª£ng pin l√™n ƒë·∫øn 30 gi·ªù',
    maxKeywords: 5
  },
  
  translation: {
    text: 'T√¥i mu·ªën mua tai nghe',
    targetLanguage: 'English',
    sourceLanguage: 'Vietnamese'
  },
  
  customerIntent: {
    message: 'T√¥i ƒëang t√¨m ki·∫øm tai nghe c√≥ gi√° d∆∞·ªõi 1 tri·ªáu ƒë·ªìng',
    userId: 'test_user_123'
  },
  
  predictiveAnalytics: {
    metric: 'sales',
    dateFrom: '2024-01-01',
    dateTo: '2024-12-31'
  },
  
  personalization: {
    userId: 'test_user_123',
    context: 'homepage'
  }
};

// Helper function to make API calls
async function makeRequest(endpoint, data = null, method = 'POST') {
  try {
    const config = {
      method,
      url: `${BASE_URL}/ai/${endpoint}`,
      headers: {
        'Content-Type': 'application/json'
      }
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    return response.data;
  } catch (error) {
    console.error(`Error calling ${endpoint}:`, error.response?.data || error.message);
    return null;
  }
}

// Test functions
async function testContentGeneration() {
  console.log('\nüß† Testing Content Generation...');
  const result = await makeRequest('generate-content', testData.contentGeneration);
  if (result) {
    console.log('‚úÖ Content Generation:', {
      success: result.success,
      contentLength: result.content?.length,
      metadata: result.metadata
    });
  }
}

async function testSentimentAnalysis() {
  console.log('\nüòä Testing Sentiment Analysis...');
  const result = await makeRequest('analyze-sentiment', testData.sentimentAnalysis);
  if (result) {
    console.log('‚úÖ Sentiment Analysis:', {
      sentiment: result.sentiment,
      confidence: result.confidence,
      emotions: result.emotions,
      score: result.score
    });
  }
}

async function testTextClassification() {
  console.log('\nüè∑Ô∏è Testing Text Classification...');
  const result = await makeRequest('classify-text', testData.textClassification);
  if (result) {
    console.log('‚úÖ Text Classification:', {
      category: result.category,
      confidence: result.confidence,
      alternatives: result.alternatives
    });
  }
}

async function testLanguageDetection() {
  console.log('\nüåç Testing Language Detection...');
  const result = await makeRequest('detect-language', testData.languageDetection);
  if (result) {
    console.log('‚úÖ Language Detection:', {
      language: result.language,
      confidence: result.confidence,
      name: result.name
    });
  }
}

async function testTextSummarization() {
  console.log('\nüìù Testing Text Summarization...');
  const result = await makeRequest('summarize-text', testData.textSummarization);
  if (result) {
    console.log('‚úÖ Text Summarization:', {
      summary: result.summary,
      compressionRatio: result.compressionRatio,
      originalLength: result.originalLength,
      summaryLength: result.summaryLength
    });
  }
}

async function testKeywordExtraction() {
  console.log('\nüîë Testing Keyword Extraction...');
  const result = await makeRequest('extract-keywords', testData.keywordExtraction);
  if (result) {
    console.log('‚úÖ Keyword Extraction:', {
      keywords: result.keywords,
      keywordCount: result.keywords?.length
    });
  }
}

async function testTranslation() {
  console.log('\nüåê Testing Translation...');
  const result = await makeRequest('translate', testData.translation);
  if (result) {
    console.log('‚úÖ Translation:', {
      original: result.original,
      translation: result.translation,
      targetLanguage: result.targetLanguage
    });
  }
}

async function testCustomerIntentDetection() {
  console.log('\nüéØ Testing Customer Intent Detection...');
  const result = await makeRequest('detect-intent', testData.customerIntent);
  if (result) {
    console.log('‚úÖ Customer Intent Detection:', {
      intent: result.intent,
      confidence: result.confidence,
      urgency: result.urgency,
      suggestedAction: result.suggestedAction
    });
  }
}

async function testPredictiveAnalytics() {
  console.log('\nüìä Testing Predictive Analytics...');
  const result = await makeRequest('predictive-analytics', testData.predictiveAnalytics);
  if (result) {
    console.log('‚úÖ Predictive Analytics:', {
      metric: result.metric,
      prediction: result.prediction,
      confidence: result.confidence
    });
  }
}

async function testPersonalization() {
  console.log('\nüë§ Testing Personalization...');
  const result = await makeRequest('personalize', testData.personalization);
  if (result) {
    console.log('‚úÖ Personalization:', {
      userId: result.userId,
      recommendationsCount: result.recommendations?.length,
      preferences: result.preferences
    });
  }
}

async function testAIHealth() {
  console.log('\nüè• Testing AI Health...');
  const result = await makeRequest('health', null, 'GET');
  if (result) {
    console.log('‚úÖ AI Health:', {
      status: result.status,
      services: result.services,
      version: result.version
    });
  }
}

async function testAICapabilities() {
  console.log('\n‚ö° Testing AI Capabilities...');
  const result = await makeRequest('capabilities', null, 'GET');
  if (result) {
    console.log('‚úÖ AI Capabilities:', {
      capabilitiesCount: result.capabilities?.length,
      enabledCapabilities: result.capabilities?.filter(c => c.enabled).length,
      models: Object.keys(result.models || {})
    });
  }
}

async function testImageAnalysis() {
  console.log('\nüñºÔ∏è Testing Image Analysis...');
  const result = await makeRequest('analyze-image', {
    imageUrl: 'https://example.com/test-image.jpg',
    analysisType: 'general'
  });
  if (result) {
    console.log('‚úÖ Image Analysis:', {
      analysis: result.analysis,
      imageUrl: result.imageUrl
    });
  }
}

async function testVoiceToText() {
  console.log('\nüé§ Testing Voice to Text...');
  const result = await makeRequest('voice-to-text', {
    audioUrl: 'https://example.com/test-audio.mp3',
    language: 'vi'
  });
  if (result) {
    console.log('‚úÖ Voice to Text:', {
      text: result.text,
      confidence: result.confidence,
      language: result.language
    });
  }
}

async function testTextToSpeech() {
  console.log('\nüîä Testing Text to Speech...');
  const result = await makeRequest('text-to-speech', {
    text: 'Xin ch√†o, ƒë√¢y l√† test text to speech',
    voice: 'default',
    language: 'vi'
  });
  if (result) {
    console.log('‚úÖ Text to Speech:', {
      audioUrl: result.audioUrl,
      text: result.text,
      duration: result.duration
    });
  }
}

// Main test runner
async function runAllTests() {
  console.log('üöÄ Starting AI Features Testing...');
  console.log(`üìç Base URL: ${BASE_URL}`);
  
  try {
    // Test core AI features
    await testContentGeneration();
    await testSentimentAnalysis();
    await testTextClassification();
    await testLanguageDetection();
    await testTextSummarization();
    await testKeywordExtraction();
    await testTranslation();
    
    // Test business-specific features
    await testCustomerIntentDetection();
    await testPredictiveAnalytics();
    await testPersonalization();
    
    // Test system features
    await testAIHealth();
    await testAICapabilities();
    
    // Test advanced features (stubs)
    await testImageAnalysis();
    await testVoiceToText();
    await testTextToSpeech();
    
    console.log('\nüéâ All AI Features Tests Completed!');
    
  } catch (error) {
    console.error('‚ùå Test execution failed:', error.message);
  }
}

// Run tests if this file is executed directly
if (require.main === module) {
  runAllTests();
}

module.exports = {
  runAllTests,
  testData,
  makeRequest
};
