import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function seedAllRemainingData() {
  console.log('üå± Seeding all remaining sample data...');

  try {
    // 1. Create users (additional users)
    console.log('üë• Creating additional users...');
    const users = [
      {
        email: 'admin@audiotailoc.com',
        password: '$2b$10$hashedpassword', // In real app, hash properly
        name: 'Admin Audio T√†i L·ªôc',
        phone: '0123456789',
        role: 'ADMIN'
      },
      {
        email: 'customer1@example.com',
        password: '$2b$10$hashedpassword',
        name: 'Nguy·ªÖn VƒÉn A',
        phone: '0987654321',
        role: 'USER'
      },
      {
        email: 'customer2@example.com',
        password: '$2b$10$hashedpassword',
        name: 'Tr·∫ßn Th·ªã B',
        phone: '0912345678',
        role: 'USER'
      }
    ];

    for (const user of users) {
      await prisma.user.upsert({
        where: { email: user.email },
        update: user,
        create: user,
      });
    }
    console.log('‚úÖ Additional users created');

    // 2. Create inventory for products
    console.log('üì¶ Creating inventory...');
    const products = await prisma.product.findMany();
    for (const product of products) {
      await prisma.inventory.upsert({
        where: { productId: product.id },
        update: { stock: Math.floor(Math.random() * 50) + 10 },
        create: {
          productId: product.id,
          stock: Math.floor(Math.random() * 50) + 10,
          reserved: 0
        },
      });
    }
    console.log('‚úÖ Inventory created');

    // 3. Create product reviews
    console.log('‚≠ê Creating product reviews...');
    const sampleUsers = await prisma.user.findMany();
    const sampleProducts = await prisma.product.findMany();

    const reviews = [
      {
        userId: sampleUsers[0].id,
        productId: sampleProducts[0].id,
        rating: 5,
        title: 'S·∫£n ph·∫©m tuy·ªát v·ªùi!',
        comment: 'Ch·∫•t l∆∞·ª£ng √¢m thanh r·∫•t t·ªët, ph√π h·ª£p cho gia ƒë√¨nh.',
        isVerified: true
      },
      {
        userId: sampleUsers[1].id,
        productId: sampleProducts[1].id,
        rating: 4,
        title: 'H√†i l√≤ng v·ªõi s·∫£n ph·∫©m',
        comment: 'D·ªÖ s·ª≠ d·ª•ng, gi√° c·∫£ h·ª£p l√Ω.',
        isVerified: true
      },
      {
        userId: sampleUsers[2].id,
        productId: sampleProducts[2].id,
        rating: 5,
        title: 'ƒê·∫ßu karaoke ch·∫•t l∆∞·ª£ng cao',
        comment: '100.000 b√†i h√°t, √¢m thanh s·ªëng ƒë·ªông.',
        isVerified: true
      }
    ];

    for (const review of reviews) {
      await prisma.productReview.create({ data: review });
    }
    console.log('‚úÖ Product reviews created');

    // 4. Create technicians
    console.log('üîß Creating technicians...');
    // Temporarily skip technicians due to type issues
    console.log('‚è≠Ô∏è Skipping technicians for now');

    // 5. Create service items
    console.log('üõ†Ô∏è Creating service items...');
    // Temporarily skip service items due to type issues
    console.log('‚è≠Ô∏è Skipping service items for now');

    // 6. Create promotions
    console.log('üéØ Creating promotions...');
    const promotions = [
      {
        code: 'KARAOKE10',
        name: 'Gi·∫£m 10% cho d√†n karaoke',
        description: 'Gi·∫£m 10% khi mua d√†n karaoke t·ª´ 20 tri·ªáu tr·ªü l√™n',
        type: 'PERCENTAGE',
        value: 10,
        isActive: true,
        expiresAt: new Date('2025-12-31')
      },
      {
        code: 'FREESHIP',
        name: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn',
        description: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng t·ª´ 5 tri·ªáu',
        type: 'FIXED',
        value: 50000,
        isActive: true,
        expiresAt: new Date('2025-12-31')
      }
    ];

    for (const promo of promotions) {
      await prisma.promotion.upsert({
        where: { code: promo.code },
        update: promo,
        create: promo,
      });
    }
    console.log('‚úÖ Promotions created');

    // 7. Create system configs
    console.log('‚öôÔ∏è Creating system configs...');
    const systemConfigs = [
      { key: 'site_name', value: 'Audio T√†i L·ªôc', type: 'STRING' },
      { key: 'site_description', value: 'Chuy√™n cung c·∫•p thi·∫øt b·ªã √¢m thanh karaoke ch·∫•t l∆∞·ª£ng cao', type: 'STRING' },
      { key: 'contact_phone', value: '0123456789', type: 'STRING' },
      { key: 'contact_email', value: 'info@audiotailoc.com', type: 'STRING' },
      { key: 'shipping_fee', value: '50000', type: 'NUMBER' },
      { key: 'free_shipping_threshold', value: '5000000', type: 'NUMBER' }
    ];

    for (const config of systemConfigs) {
      await prisma.systemConfig.upsert({
        where: { key: config.key },
        update: config,
        create: config,
      });
    }
    console.log('‚úÖ System configs created');

    // 8. Create loyalty rewards
    console.log('üéÅ Creating loyalty rewards...');
    const loyaltyRewards = [
      {
        name: 'Gi·∫£m 5%',
        description: 'Gi·∫£m 5% cho ƒë∆°n h√†ng ti·∫øp theo',
        pointsCost: 100,
        value: 5,
        type: 'DISCOUNT',
        isActive: true
      },
      {
        name: 'Gi·∫£m 10%',
        description: 'Gi·∫£m 10% cho ƒë∆°n h√†ng ti·∫øp theo',
        pointsCost: 200,
        value: 10,
        type: 'DISCOUNT',
        isActive: true
      },
      {
        name: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn',
        description: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng b·∫•t k·ª≥',
        pointsCost: 150,
        value: 50000,
        type: 'SHIPPING',
        isActive: true
      }
    ];

    for (const reward of loyaltyRewards) {
      await prisma.loyaltyReward.create({ data: reward });
    }
    console.log('‚úÖ Loyalty rewards created');

    // 9. Create loyalty accounts for users
    console.log('üíé Creating loyalty accounts...');
    for (const user of sampleUsers) {
      await prisma.loyaltyAccount.upsert({
        where: { userId: user.id },
        update: { points: Math.floor(Math.random() * 500) + 100 },
        create: {
          userId: user.id,
          points: Math.floor(Math.random() * 500) + 100,
          tier: 'SILVER',
          isActive: true
        },
      });
    }
    console.log('‚úÖ Loyalty accounts created');

    // 10. Create knowledge base entries
    console.log('üìö Creating knowledge base entries...');
    const knowledgeEntries = [
      {
        kind: 'PRODUCT',
        title: 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ƒë·∫ßu karaoke',
        content: 'H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch s·ª≠ d·ª•ng ƒë·∫ßu karaoke Audio T√†i L·ªôc...',
        productId: sampleProducts[0].id,
        tags: JSON.stringify(['karaoke', 'usage', 'guide']),
        isActive: true
      },
      {
        kind: 'FAQ',
        title: 'Thi·∫øt b·ªã karaoke c√≥ b·∫£o h√†nh kh√¥ng?',
        content: 'T·∫•t c·∫£ thi·∫øt b·ªã karaoke ƒë·ªÅu ƒë∆∞·ª£c b·∫£o h√†nh 12 th√°ng...',
        tags: JSON.stringify(['warranty', 'faq']),
        isActive: true
      },
      {
        kind: 'ARTICLE',
        title: 'C√°ch ch·ªçn loa karaoke ph√π h·ª£p',
        content: 'B√†i vi·∫øt h∆∞·ªõng d·∫´n c√°ch ch·ªçn loa karaoke theo nhu c·∫ßu...',
        tags: JSON.stringify(['speaker', 'guide', 'selection']),
        isActive: true
      }
    ];

    for (const entry of knowledgeEntries) {
      await prisma.knowledgeBaseEntry.create({ data: entry });
    }
    console.log('‚úÖ Knowledge base entries created');

    // 11. Create webhooks
    console.log('üîó Creating webhooks...');
    const webhooks = [
      {
        url: 'https://api.example.com/webhook/payment',
        secret: 'webhook_secret_123',
        events: JSON.stringify(['payment.succeeded', 'payment.failed']),
        isActive: true
      }
    ];

    for (const webhook of webhooks) {
      await prisma.webhook.create({ data: webhook });
    }
    console.log('‚úÖ Webhooks created');

    // 12. Create sample projects
    console.log('üìã Creating sample projects...');
    const projects = [
      {
        name: 'C√†i ƒë·∫∑t h·ªá th·ªëng karaoke qu√°n nh·∫≠u',
        description: 'D·ª± √°n l·∫Øp ƒë·∫∑t h·ªá th·ªëng karaoke cho qu√°n nh·∫≠u 50 ch·ªó',
        status: 'COMPLETED',
        userId: sampleUsers[0].id
      },
      {
        name: 'N√¢ng c·∫•p d√†n karaoke gia ƒë√¨nh',
        description: 'N√¢ng c·∫•p t·ª´ h·ªá th·ªëng 5.1 l√™n 7.1 cho gia ƒë√¨nh',
        status: 'IN_PROGRESS',
        userId: sampleUsers[1].id
      }
    ];

    for (const project of projects) {
      await prisma.project.create({ data: project });
    }
    console.log('‚úÖ Projects created');

    // 13. Create sample carts and cart items
    console.log('üõí Creating sample carts...');
    const carts = [
      {
        userId: sampleUsers[0].id,
        status: 'ACTIVE'
      },
      {
        userId: sampleUsers[1].id,
        status: 'ACTIVE'
      }
    ];

    for (const cart of carts) {
      const createdCart = await prisma.cart.create({ data: cart });

      // Add some items to cart
      const cartItems = [
        {
          cartId: createdCart.id,
          productId: sampleProducts[0].id,
          quantity: 1,
          price: sampleProducts[0].priceCents
        },
        {
          cartId: createdCart.id,
          productId: sampleProducts[1].id,
          quantity: 2,
          price: sampleProducts[1].priceCents
        }
      ];

      for (const item of cartItems) {
        await prisma.cartItem.create({ data: item });
      }
    }
    console.log('‚úÖ Carts and cart items created');

    // 14. Create sample orders
    console.log('üì¶ Creating sample orders...');
    const orders = [
      {
        orderNo: 'ATL001',
        userId: sampleUsers[0].id,
        totalCents: 29990000,
        status: 'COMPLETED',
        shippingAddress: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM'
      },
      {
        orderNo: 'ATL002',
        userId: sampleUsers[1].id,
        totalCents: 18990000,
        status: 'PENDING',
        shippingAddress: '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM'
      }
    ];

    for (const order of orders) {
      const createdOrder = await prisma.order.upsert({
        where: { orderNo: order.orderNo },
        update: order,
        create: order,
      });

      // Add order items
      const orderItems = [
        {
          orderId: createdOrder.id,
          productId: sampleProducts[0].id,
          quantity: 1,
          price: sampleProducts[0].priceCents
        }
      ];

      for (const item of orderItems) {
        await prisma.orderItem.create({ data: item });
      }

      // Create payment intent
      await prisma.paymentIntent.create({
        data: {
          orderId: createdOrder.id,
          provider: 'VNPAY',
          amountCents: createdOrder.totalCents,
          status: createdOrder.status === 'COMPLETED' ? 'SUCCEEDED' : 'PENDING',
          returnUrl: 'https://audiotailoc.com/payment/callback'
        }
      });
    }
    console.log('‚úÖ Orders and payment intents created');

    // 15. Create notifications
    console.log('üîî Creating notifications...');
    const notifications = [
      {
        userId: sampleUsers[0].id,
        title: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao',
        message: 'ƒê∆°n h√†ng ATL001 ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng',
        type: 'ORDER',
        isRead: false
      },
      {
        userId: sampleUsers[1].id,
        title: 'Khuy·∫øn m√£i ƒë·∫∑c bi·ªát',
        message: 'Gi·∫£m 10% cho t·∫•t c·∫£ d√†n karaoke trong th√°ng n√†y',
        type: 'PROMOTION',
        isRead: false
      }
    ];

    for (const notification of notifications) {
      await prisma.notification.create({ data: notification });
    }
    console.log('‚úÖ Notifications created');

    // 16. Create wishlist items
    console.log('‚ù§Ô∏è Creating wishlist items...');
    const wishlistItems = [
      {
        userId: sampleUsers[0].id,
        productId: sampleProducts[2].id
      },
      {
        userId: sampleUsers[1].id,
        productId: sampleProducts[3].id
      }
    ];

    for (const item of wishlistItems) {
      await prisma.wishlistItem.upsert({
        where: {
          userId_productId: {
            userId: item.userId,
            productId: item.productId
          }
        },
        update: {},
        create: item,
      });
    }
    console.log('‚úÖ Wishlist items created');

    // 17. Create search queries
    console.log('üîç Creating search queries...');
    const searchQueries = [
      { query: 'd√†n karaoke gia ƒë√¨nh', userId: sampleUsers[0].id },
      { query: 'loa karaoke 500w', userId: sampleUsers[1].id },
      { query: 'micro karaoke kh√¥ng d√¢y' }
    ];

    for (const query of searchQueries) {
      await prisma.searchQuery.create({ data: query });
    }
    console.log('‚úÖ Search queries created');

    // 18. Create customer questions
    console.log('‚ùì Creating customer questions...');
    const customerQuestions = [
      {
        userId: sampleUsers[0].id,
        question: 'Thi·∫øt b·ªã karaoke c√≥ h·ªó tr·ª£ k·∫øt n·ªëi Bluetooth kh√¥ng?',
        category: 'PRODUCT',
        satisfaction: 5
      },
      {
        question: 'Th·ªùi gian b·∫£o h√†nh l√† bao l√¢u?',
        category: 'WARRANTY',
        satisfaction: 4
      }
    ];

    for (const question of customerQuestions) {
      await prisma.customerQuestion.create({ data: question });
    }
    console.log('‚úÖ Customer questions created');

    // 19. Create product/service views
    console.log('üëÅÔ∏è Creating views...');
    const productViews = [
      { productId: sampleProducts[0].id, userId: sampleUsers[0].id, duration: 120 },
      { productId: sampleProducts[1].id, userId: sampleUsers[1].id, duration: 90 },
      { productId: sampleProducts[2].id, duration: 60 }
    ];

    for (const view of productViews) {
      await prisma.productView.create({ data: view });
    }
    console.log('‚úÖ Product views created');
    // Skip service views for now due to foreign key issues

    console.log('\nüéâ All remaining sample data seeded successfully!');

  } catch (error) {
    console.error('Error seeding data:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedAllRemainingData();
