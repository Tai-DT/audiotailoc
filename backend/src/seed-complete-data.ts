/*
  Comprehensive Seed Script for All Models
  Usage: npx tsx src/seed-complete-data.ts
*/
import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';
import 'dotenv/config';

const prisma = new PrismaClient();

// Helper function to generate random date in past
function randomPastDate(daysAgo: number = 365): Date {
  const date = new Date();
  date.setDate(date.getDate() - Math.floor(Math.random() * daysAgo));
  return date;
}

// Helper function to generate future date
function randomFutureDate(daysAhead: number = 365): Date {
  const date = new Date();
  date.setDate(date.getDate() + Math.floor(Math.random() * daysAhead));
  return date;
}

async function seedData() {
  console.log('üå± Starting comprehensive data seeding...\n');
  
  try {
    // ========================================
    // 1. SEED TECHNICIANS
    // ========================================
    console.log('üë∑ Creating Technicians...');
    const technicians = [
      {
        name: 'Nguy·ªÖn VƒÉn H√πng',
        phone: '0901234567',
        email: 'hung.nguyen@audiotailoc.com',
        specialties: JSON.stringify(['L·∫Øp ƒë·∫∑t h·ªá th·ªëng √¢m thanh', 'T∆∞ v·∫•n k·ªπ thu·∫≠t']),
        isActive: true
      },
      {
        name: 'Tr·∫ßn Minh Tu·∫•n',
        phone: '0901234568',
        email: 'tuan.tran@audiotailoc.com',
        specialties: JSON.stringify(['S·ª≠a ch·ªØa thi·∫øt b·ªã √¢m thanh', 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥']),
        isActive: true
      },
      {
        name: 'L√™ Ho√†ng Long',
        phone: '0901234569',
        email: 'long.le@audiotailoc.com',
        specialties: JSON.stringify(['T∆∞ v·∫•n √¢m h·ªçc', 'Thi·∫øt k·∫ø ph√≤ng thu']),
        isActive: true
      },
      {
        name: 'Ph·∫°m Qu·ªëc ƒê·∫°t',
        phone: '0901234570',
        email: 'dat.pham@audiotailoc.com',
        specialties: JSON.stringify(['L·∫Øp ƒë·∫∑t karaoke', 'Thi·∫øt k·∫ø h·ªá th·ªëng']),
        isActive: true
      },
      {
        name: 'V≈© ƒê√¨nh Phong',
        phone: '0901234571',
        email: 'phong.vu@audiotailoc.com',
        specialties: JSON.stringify(['B·∫£o tr√¨ ƒë·ªãnh k·ª≥', 'S·ª≠a ch·ªØa kh·∫©n c·∫•p']),
        isActive: true
      }
    ];
    
    for (const tech of technicians) {
      await prisma.technician.upsert({
        where: { email: tech.email },
        update: tech,
        create: tech
      });
    }
    console.log(`  ‚úÖ Created ${technicians.length} technicians`);
    
    // ========================================
    // 2. SEED SERVICE ITEMS
    // ========================================
    console.log('\nüîß Creating Service Items...');
    const services = await prisma.service.findMany({ take: 6 });
    const serviceItems = [];
    
    for (const service of services) {
      const items = [
        {
          serviceId: service.id,
          name: `G√≥i c∆° b·∫£n - ${service.name}`,
          price: service.minPrice || 1000000,
          quantity: 1
        },
        {
          serviceId: service.id,
          name: `G√≥i n√¢ng cao - ${service.name}`,
          price: service.maxPrice || 3000000,
          quantity: 1
        }
      ];
      
      for (const item of items) {
        const created = await prisma.serviceItem.create({ data: item });
        serviceItems.push(created);
      }
    }
    console.log(`  ‚úÖ Created ${serviceItems.length} service items`);
    
    // ========================================
    // 3. SEED SERVICE BOOKINGS
    // ========================================
    console.log('\nüìÖ Creating Service Bookings...');
    const users = await prisma.user.findMany({ where: { role: 'USER' }, take: 3 });
    const techniciansList = await prisma.technician.findMany();
    
    const bookingStatuses = ['PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'];
    const bookings = [];
    
    for (let i = 0; i < 15; i++) {
      const user = users[Math.floor(Math.random() * users.length)];
      const service = services[Math.floor(Math.random() * services.length)];
      const technician = techniciansList[Math.floor(Math.random() * techniciansList.length)];
      const status = bookingStatuses[Math.floor(Math.random() * bookingStatuses.length)];
      
      const booking = await prisma.serviceBooking.create({
        data: {
          userId: user.id,
          serviceId: service.id,
          technicianId: technician.id,
          scheduledAt: randomFutureDate(30),
          scheduledTime: ['08:00-10:00', '10:00-12:00', '14:00-16:00', '16:00-18:00'][Math.floor(Math.random() * 4)],
          status,
          notes: 'Kh√°ch h√†ng y√™u c·∫ßu k·ªπ thu·∫≠t vi√™n ƒë·∫øn ƒë√∫ng gi·ªù',
          estimatedCosts: service.minPrice || 1000000,
          actualCosts: status === 'COMPLETED' ? (service.minPrice || 1000000) : null,
          completedAt: status === 'COMPLETED' ? new Date() : null
        }
      });
      bookings.push(booking);
    }
    console.log(`  ‚úÖ Created ${bookings.length} service bookings`);
    
    // ========================================
    // 4. SEED PRODUCT REVIEWS
    // ========================================
    console.log('\n‚≠ê Creating Product Reviews...');
    const products = await prisma.product.findMany({ take: 8 });
    
    const reviewComments = [
      'S·∫£n ph·∫©m r·∫•t t·ªët, √¢m thanh trong tr·∫ªo',
      'Ch·∫•t l∆∞·ª£ng tuy·ªát v·ªùi, ƒë√°ng ƒë·ªìng ti·ªÅn',
      'Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n',
      '√Çm bass m·∫°nh m·∫Ω, treble r√µ r√†ng',
      'Thi·∫øt k·∫ø ƒë·∫πp, ch·∫•t l∆∞·ª£ng ·ªïn ƒë·ªãnh',
      'Gi√° c·∫£ h·ª£p l√Ω, ch·∫•t l∆∞·ª£ng t·ªët',
      'R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y',
      'D·ªãch v·ª• t∆∞ v·∫•n nhi·ªát t√¨nh, s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng'
    ];
    
    for (const product of products) {
      const numReviews = Math.floor(Math.random() * 3) + 1;
      for (let i = 0; i < numReviews; i++) {
        const user = users[Math.floor(Math.random() * users.length)];
        await prisma.productReview.create({
          data: {
            productId: product.id,
            userId: user.id,
            rating: Math.floor(Math.random() * 2) + 4, // 4-5 stars
            title: 'S·∫£n ph·∫©m tuy·ªát v·ªùi',
            comment: reviewComments[Math.floor(Math.random() * reviewComments.length)],
            isVerified: Math.random() > 0.3,
            status: 'APPROVED',
            upvotes: Math.floor(Math.random() * 20),
            downvotes: Math.floor(Math.random() * 5),
            createdAt: randomPastDate(90)
          }
        });
      }
    }
    console.log(`  ‚úÖ Created product reviews`);
    
    // ========================================
    // 5. SEED WISHLIST ITEMS
    // ========================================
    console.log('\n‚ù§Ô∏è Creating Wishlist Items...');
    for (const user of users) {
      const numItems = Math.floor(Math.random() * 5) + 2;
      const selectedProducts = products.sort(() => 0.5 - Math.random()).slice(0, numItems);
      
      for (const product of selectedProducts) {
        await prisma.wishlistItem.create({
          data: {
            userId: user.id,
            productId: product.id,
            createdAt: randomPastDate(30)
          }
        }).catch(() => {}); // Ignore duplicates
      }
    }
    console.log(`  ‚úÖ Created wishlist items`);
    
    // ========================================
    // 6. SEED NOTIFICATIONS
    // ========================================
    console.log('\nüîî Creating Notifications...');
    const notificationTypes = ['ORDER', 'PROMOTION', 'INFO', 'WARNING', 'SUCCESS'];
    const notificationTemplates = [
      { title: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n', message: 'ƒê∆°n h√†ng #ORDER123 c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n', type: 'ORDER' },
      { title: 'Khuy·∫øn m√£i m·ªõi', message: 'Gi·∫£m 20% cho t·∫•t c·∫£ s·∫£n ph·∫©m loa karaoke', type: 'PROMOTION' },
      { title: 'C·∫≠p nh·∫≠t h·ªá th·ªëng', message: 'H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ t·ª´ 2h-4h s√°ng', type: 'INFO' },
      { title: 'Thanh to√°n th√†nh c√¥ng', message: 'Thanh to√°n ƒë∆°n h√†ng #ORDER456 th√†nh c√¥ng', type: 'SUCCESS' },
      { title: 'S·∫£n ph·∫©m y√™u th√≠ch c√≥ gi·∫£m gi√°', message: 'Loa JBL GO 3 ƒëang gi·∫£m 30%', type: 'PROMOTION' },
      { title: 'ƒê√°nh gi√° s·∫£n ph·∫©m', message: 'H√£y ƒë√°nh gi√° s·∫£n ph·∫©m b·∫°n ƒë√£ mua', type: 'INFO' },
      { title: 'ƒêi·ªÉm th∆∞·ªüng s·∫Øp h·∫øt h·∫°n', message: 'B·∫°n c√≥ 500 ƒëi·ªÉm s·∫Øp h·∫øt h·∫°n', type: 'WARNING' }
    ];
    
    for (const user of users) {
      const numNotifications = Math.floor(Math.random() * 5) + 3;
      for (let i = 0; i < numNotifications; i++) {
        const template = notificationTemplates[Math.floor(Math.random() * notificationTemplates.length)];
        await prisma.notification.create({
          data: {
            userId: user.id,
            ...template,
            isRead: Math.random() > 0.5,
            createdAt: randomPastDate(30)
          }
        });
      }
    }
    console.log(`  ‚úÖ Created notifications`);
    
    // ========================================
    // 7. CHAT SESSIONS & MESSAGES (DISABLED)
    // ========================================
    // Note: chatSession and chatMessage models not available in current schema
    console.log('\nüí¨ Skipping Chat Sessions (model not available in schema)...');
    
    /*
    // Commented out chat session creation
    for (const user of users.slice(0, 3)) {
      const session = await prisma.chatSession.create({
        data: {
          userId: user.id,
          status: 'ACTIVE',
          source: 'WEB',
          createdAt: randomPastDate(15)
        }
      });
      
      const messages = [
        { content: 'Xin ch√†o, t√¥i c·∫ßn t∆∞ v·∫•n v·ªÅ loa karaoke', role: 'user' },
        { content: 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ loa karaoke?', role: 'ASSISTANT' },
        { content: 'T√¥i mu·ªën mua loa cho ph√≤ng 30m2', role: 'user' },
        { content: 'V·ªõi ph√≤ng 30m2, t√¥i recommend d√≤ng loa JBL KP6012', role: 'ASSISTANT' },
        { content: 'Gi√° bao nhi√™u v·∫≠y?', role: 'user' },
        { content: 'Gi√° hi·ªán t·∫°i l√† 12 tri·ªáu, ƒëang c√≥ khuy·∫øn m√£i 10%', role: 'ASSISTANT' },
        { content: 'C√≥ b·∫£o h√†nh kh√¥ng?', role: 'user' },
        { content: 'C√≥ b·∫£o h√†nh 24 th√°ng ch√≠nh h√£ng', role: 'ASSISTANT' }
      ];
      
      for (const msg of messages) {
        await prisma.chatMessage.create({
          data: {
            sessionId: session.id,
            ...msg,
            createdAt: randomPastDate(15)
          }
        });
      }
    }
    */
    
    // ========================================
    // 8. SEED CUSTOMER QUESTIONS
    // ========================================
    console.log('\n‚ùì Creating Customer Questions...');
    const questions = [
      'Loa n√†y c√≥ k·∫øt n·ªëi Bluetooth kh√¥ng?',
      'C√¥ng su·∫•t th·ª±c t·∫ø l√† bao nhi√™u W?',
      'C√≥ h·ªó tr·ª£ l·∫Øp ƒë·∫∑t t·∫°i nh√† kh√¥ng?',
      'Th·ªùi gian b·∫£o h√†nh l√† bao l√¢u?',
      'C√≥ th·ªÉ k·∫øt n·ªëi v·ªõi TV kh√¥ng?',
      'Ph·ª• ki·ªán ƒëi k√®m g·ªìm nh·ªØng g√¨?',
      'C√≥ h·ªó tr·ª£ tr·∫£ g√≥p kh√¥ng?',
      'Kho·∫£ng c√°ch bluetooth xa nh·∫•t l√† bao nhi√™u?',
      'C√≥ ch·ªëng n∆∞·ªõc kh√¥ng?',
      'Pin d√πng ƒë∆∞·ª£c bao l√¢u?'
    ];
    
    for (const product of products.slice(0, 6)) {
      const numQuestions = Math.floor(Math.random() * 3) + 1;
      for (let i = 0; i < numQuestions; i++) {
        const user = users[Math.floor(Math.random() * users.length)];
        const question = await prisma.customerQuestion.create({
          data: {
            userId: user.id,
            question: questions[Math.floor(Math.random() * questions.length)],
            category: 'product',
            satisfaction: Math.floor(Math.random() * 2) + 4,
            timestamp: randomPastDate(60)
          }
        });
      }
    }
    console.log(`  ‚úÖ Created customer questions`);
    
    // ========================================
    // 9. SEED PROMOTIONS
    // ========================================
    console.log('\nüéÅ Creating Promotions...');
    const promotions = [
      {
        code: 'NEWYEAR2025',
        name: 'Khuy·∫øn m√£i nƒÉm m·ªõi 2025',
        description: 'Gi·∫£m 25% cho t·∫•t c·∫£ s·∫£n ph·∫©m',
        type: 'PERCENTAGE',
        value: 25,
        isActive: true,
        expiresAt: new Date('2025-01-31')
      },
      {
        code: 'FIRSTORDER',
        name: '∆Øu ƒë√£i ƒë∆°n h√†ng ƒë·∫ßu ti√™n',
        description: 'Gi·∫£m 200k cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n',
        type: 'FIXED',
        value: 200000,
        isActive: true,
        expiresAt: new Date('2025-12-31')
      },
      {
        code: 'FREESHIP',
        name: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn',
        description: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n t·ª´ 1 tri·ªáu',
        type: 'FREESHIP',
        value: 0,
        isActive: true,
        expiresAt: new Date('2025-03-31')
      },
      {
        code: 'VIP20',
        name: '∆Øu ƒë√£i VIP',
        description: 'Gi·∫£m 20% cho kh√°ch h√†ng VIP',
        type: 'PERCENTAGE',
        value: 20,
        isActive: true,
        expiresAt: new Date('2025-06-30')
      },
      {
        code: 'SUMMER50K',
        name: 'Khuy·∫øn m√£i m√πa h√®',
        description: 'Gi·∫£m 50k cho ƒë∆°n t·ª´ 500k',
        type: 'FIXED',
        value: 50000,
        isActive: false,
        expiresAt: new Date('2024-08-31')
      }
    ];
    
    for (const promo of promotions) {
      await prisma.promotion.upsert({
        where: { code: promo.code },
        update: promo,
        create: promo
      });
    }
    console.log(`  ‚úÖ Created ${promotions.length} promotions`);
    
    // ========================================
    // 10. SEED LOYALTY ACCOUNTS & REWARDS
    // ========================================
    console.log('\nüèÜ Creating Loyalty Accounts & Rewards...');
    
    // Create rewards first
    const rewards = [
      {
        name: 'Gi·∫£m 100k',
        description: 'Voucher gi·∫£m 100k cho ƒë∆°n t·ª´ 1 tri·ªáu',
        pointsCost: 1000,
        value: 100000,
        type: 'DISCOUNT',
        isActive: true
      },
      {
        name: 'Gi·∫£m 200k',
        description: 'Voucher gi·∫£m 200k cho ƒë∆°n t·ª´ 2 tri·ªáu',
        pointsCost: 1800,
        value: 200000,
        type: 'DISCOUNT',
        isActive: true
      },
      {
        name: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn',
        description: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho 1 ƒë∆°n h√†ng',
        pointsCost: 500,
        value: 0,
        type: 'FREESHIP',
        isActive: true
      },
      {
        name: 'Qu√† t·∫∑ng ƒë·ªôc quy·ªÅn',
        description: 'Nh·∫≠n qu√† t·∫∑ng ƒë·ªôc quy·ªÅn t·ª´ Audio T√†i L·ªôc',
        pointsCost: 3000,
        value: 500000,
        type: 'GIFT',
        isActive: true
      },
      {
        name: 'N√¢ng c·∫•p VIP',
        description: 'N√¢ng c·∫•p l√™n t√†i kho·∫£n VIP trong 1 th√°ng',
        pointsCost: 5000,
        value: 0,
        type: 'UPGRADE',
        isActive: true
      }
    ];
    
    for (const reward of rewards) {
      await prisma.loyaltyReward.create({ data: reward });
    }
    console.log(`  ‚úÖ Created ${rewards.length} loyalty rewards`);
    
    // Create loyalty accounts for users
    for (const user of users) {
      const points = Math.floor(Math.random() * 5000) + 100;
      const tier = points > 3000 ? 'GOLD' : points > 1500 ? 'SILVER' : 'BRONZE';
      
      await prisma.loyaltyAccount.create({
        data: {
          userId: user.id,
          points,
          tier,
          isActive: true
        }
      }).catch(() => {}); // Ignore if already exists
    }
    console.log(`  ‚úÖ Created loyalty accounts`);
    
    // ========================================
    // 11. SEED CAMPAIGNS
    // ========================================
    console.log('\nüìß Creating Marketing Campaigns...');
    const campaigns = [
      {
        name: 'Khuy·∫øn m√£i T·∫øt 2025',
        description: 'Chi·∫øn d·ªãch khuy·∫øn m√£i ƒë·∫∑c bi·ªát d·ªãp T·∫øt Nguy√™n ƒê√°n',
        type: 'EMAIL' as const,
        status: 'SENT' as const,
        targetAudience: 'T·∫•t c·∫£ kh√°ch h√†ng',
        discountPercent: 30,
        startDate: new Date('2025-01-20'),
        endDate: new Date('2025-02-10'),
        sentAt: new Date('2025-01-15')
      },
      {
        name: 'Ra m·∫Øt s·∫£n ph·∫©m m·ªõi',
        description: 'Gi·ªõi thi·ªáu d√≤ng loa karaoke m·ªõi',
        type: 'EMAIL' as const,
        status: 'SCHEDULED' as const,
        targetAudience: 'Kh√°ch h√†ng VIP',
        discountPercent: 15,
        startDate: new Date('2025-02-01'),
        endDate: new Date('2025-02-28')
      },
      {
        name: 'Black Friday 2024',
        description: 'Si√™u sale Black Friday',
        type: 'SOCIAL' as const,
        status: 'SENT' as const,
        targetAudience: 'Kh√°ch h√†ng tr·∫ª',
        discountPercent: 50,
        startDate: new Date('2024-11-24'),
        endDate: new Date('2024-11-30'),
        sentAt: new Date('2024-11-20')
      },
      {
        name: 'Sinh nh·∫≠t Audio T√†i L·ªôc',
        description: 'K·ª∑ ni·ªám 10 nƒÉm th√†nh l·∫≠p',
        type: 'PUSH' as const,
        status: 'DRAFT' as const,
        targetAudience: 'T·∫•t c·∫£ kh√°ch h√†ng',
        discountAmount: 500000,
        startDate: new Date('2025-05-01'),
        endDate: new Date('2025-05-31')
      },
      {
        name: 'Flash Sale cu·ªëi tu·∫ßn',
        description: 'Gi·∫£m gi√° nhanh cu·ªëi tu·∫ßn',
        type: 'SMS' as const,
        status: 'SCHEDULED' as const,
        targetAudience: 'Kh√°ch h√†ng active',
        discountPercent: 20,
        startDate: new Date('2025-01-25'),
        endDate: new Date('2025-01-26')
      }
    ];
    
    for (const campaign of campaigns) {
      await prisma.campaign.create({ data: campaign });
    }
    console.log(`  ‚úÖ Created ${campaigns.length} campaigns`);
    
    // ========================================
    // 12. SEED CART & CART ITEMS
    // ========================================
    console.log('\nüõí Creating Carts & Cart Items...');
    for (const user of users) {
      const cart = await prisma.cart.create({
        data: {
          userId: user.id,
          status: 'ACTIVE',
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days from now
        }
      });
      
      // Add random items to cart
      const numItems = Math.floor(Math.random() * 4) + 1;
      const selectedProducts = products.sort(() => 0.5 - Math.random()).slice(0, numItems);
      
      for (const product of selectedProducts) {
        await prisma.cartItem.create({
          data: {
            cartId: cart.id,
            productId: product.id,
            quantity: Math.floor(Math.random() * 3) + 1,
            price: product.priceCents
          }
        }).catch(() => {}); // Ignore duplicates
      }
    }
    console.log(`  ‚úÖ Created carts with items`);
    
    // ========================================
    // 13. SEED MORE ORDERS & PAYMENTS
    // ========================================
    console.log('\nüì¶ Creating More Orders & Payments...');
    const orderStatuses = ['PENDING', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED'];
    
    for (let i = 0; i < 15; i++) {
      const user = users[Math.floor(Math.random() * users.length)];
      const status = orderStatuses[Math.floor(Math.random() * orderStatuses.length)];
      const numItems = Math.floor(Math.random() * 4) + 1;
      const selectedProducts = products.sort(() => 0.5 - Math.random()).slice(0, numItems);
      
      let subtotal = 0;
      const orderItems = selectedProducts.map(product => {
        const quantity = Math.floor(Math.random() * 3) + 1;
        const price = product.priceCents;
        subtotal += price * quantity;
        return {
          productId: product.id,
          quantity,
          price,
          name: product.name,
          unitPrice: price,
          imageUrl: product.imageUrl
        };
      });
      
      const discount = Math.random() > 0.7 ? Math.floor(subtotal * 0.1) : 0;
      const shipping = 30000; // 30k VND
      const total = subtotal - discount + shipping;
      
      const order = await prisma.order.create({
        data: {
          orderNo: `ORD${Date.now()}${i}`,
          userId: user.id,
          subtotalCents: subtotal,
          discountCents: discount,
          shippingCents: shipping,
          totalCents: total,
          status,
          shippingAddress: [
            '123 Nguy·ªÖn Hu·ªá, Q1, TP.HCM',
            '456 L√™ L·ª£i, Q1, TP.HCM',
            '789 Hai B√† Tr∆∞ng, Q3, TP.HCM'
          ][Math.floor(Math.random() * 3)],
          promotionCode: Math.random() > 0.7 ? 'NEWYEAR2025' : null,
          items: {
            create: orderItems
          },
          createdAt: randomPastDate(90)
        }
      });
      
      // Create payment for completed orders
      if (status === 'DELIVERED' || status === 'SHIPPED') {
        const paymentIntent = await prisma.paymentIntent.create({
          data: {
            orderId: order.id,
            provider: ['VNPAY', 'MOMO', 'PAYOS'][Math.floor(Math.random() * 3)],
            amountCents: total,
            status: 'SUCCEEDED',
            clientSecret: `pi_${Date.now()}_secret`,
            returnUrl: 'http://localhost:3000/checkout/success'
          }
        });
        
        await prisma.payment.create({
          data: {
            orderId: order.id,
            intentId: paymentIntent.id,
            provider: paymentIntent.provider,
            amountCents: total,
            status: 'COMPLETED',
            transactionId: `TXN${Date.now()}${i}`,
            metadata: JSON.stringify({ method: 'online' })
          }
        });
      }
    }
    console.log(`  ‚úÖ Created additional orders with payments`);
    
    // ========================================
    // 14. SEED INVENTORY
    // ========================================
    console.log('\nüìä Creating Inventory Records...');
    for (const product of products) {
      const stock = Math.floor(Math.random() * 100) + 10;
      const reserved = Math.floor(stock * 0.1);
      
      await prisma.inventory.create({
        data: {
          productId: product.id,
          stock,
          reserved,
          lowStockThreshold: 10
        }
      }).catch(() => {}); // Ignore if already exists
    }
    console.log(`  ‚úÖ Created inventory records`);
    
    // ========================================
    // 15. SEED ANALYTICS DATA
    // ========================================
    console.log('\nüìà Creating Analytics Data...');
    
    // Product Views
    for (const product of products) {
      const numViews = Math.floor(Math.random() * 20) + 5;
      for (let i = 0; i < numViews; i++) {
        const user = Math.random() > 0.5 ? users[Math.floor(Math.random() * users.length)] : null;
        await prisma.productView.create({
          data: {
            productId: product.id,
            userId: user?.id,
            timestamp: randomPastDate(30),
            duration: Math.floor(Math.random() * 300) + 10
          }
        });
      }
    }
    console.log(`  ‚úÖ Created product views`);
    
    // Service Views
    for (const service of services) {
      const numViews = Math.floor(Math.random() * 10) + 3;
      for (let i = 0; i < numViews; i++) {
        const user = Math.random() > 0.5 ? users[Math.floor(Math.random() * users.length)] : null;
        await prisma.serviceView.create({
          data: {
            serviceId: service.id,
            userId: user?.id,
            timestamp: randomPastDate(30),
            duration: Math.floor(Math.random() * 180) + 5
          }
        });
      }
    }
    console.log(`  ‚úÖ Created service views`);
    
    // Search Queries
    const searchTerms = [
      'loa karaoke', 'loa bluetooth', 'micro kh√¥ng d√¢y', 'amply', 'soundbar',
      'tai nghe', 'loa JBL', 'loa Sony', 'd·ªãch v·ª• l·∫Øp ƒë·∫∑t', 's·ª≠a ch·ªØa loa',
      'b·∫£o tr√¨ √¢m thanh', 't∆∞ v·∫•n √¢m h·ªçc', 'ph√≤ng thu', 'mixer', 'loa bass'
    ];
    
    for (let i = 0; i < 30; i++) {
      const user = Math.random() > 0.3 ? users[Math.floor(Math.random() * users.length)] : null;
      await prisma.searchQuery.create({
        data: {
          query: searchTerms[Math.floor(Math.random() * searchTerms.length)],
          userId: user?.id,
          timestamp: randomPastDate(30)
        }
      });
    }
    console.log(`  ‚úÖ Created search queries`);
    
    // Activity Logs
    const actions = ['LOGIN', 'LOGOUT', 'VIEW_PRODUCT', 'ADD_TO_CART', 'CHECKOUT', 'UPDATE_PROFILE'];
    for (let i = 0; i < 100; i++) {
      const user = Math.random() > 0.2 ? users[Math.floor(Math.random() * users.length)] : null;
      await prisma.activityLog.create({
        data: {
          userId: user?.id,
          action: actions[Math.floor(Math.random() * actions.length)],
          resource: ['products', 'orders', 'users', 'services'][Math.floor(Math.random() * 4)],
          resourceId: Math.random() > 0.5 ? products[Math.floor(Math.random() * products.length)].id : null,
          ipAddress: `192.168.1.${Math.floor(Math.random() * 255)}`,
          userAgent: 'Mozilla/5.0',
          method: 'GET',
          url: '/api/v1/products',
          statusCode: 200,
          duration: Math.floor(Math.random() * 500) + 50,
          category: 'user_activity',
          severity: 'info',
          createdAt: randomPastDate(30)
        }
      });
    }
    console.log(`  ‚úÖ Created activity logs`);
    
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ SEEDING COMPLETED SUCCESSFULLY!');
    console.log('='.repeat(60));
    
  } catch (error) {
    console.error('‚ùå Seeding failed:', error);
    throw error;
  }
}

async function main() {
  try {
    await seedData();
  } catch (error) {
    console.error('Fatal error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();
