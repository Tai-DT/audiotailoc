// Test chat analysis v√† search features
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testChatAnalysis() {
  try {
    console.log('üîç Testing Chat Analysis Features...\n');

    // 1. Create test chat session
    console.log('1Ô∏è‚É£ Creating test chat session...');
    const testSession = await prisma.chatSession.create({
      data: {
        source: 'WEB',
        status: 'OPEN'
      }
    });

    // 2. Add test messages
    console.log('2Ô∏è‚É£ Adding test messages...');
    await prisma.chatMessage.createMany({
      data: [
        {
          sessionId: testSession.id,
          role: 'USER',
          text: 'Xin ch√†o, t√¥i mu·ªën mua tai nghe ch·ªëng ·ªìn'
        },
        {
          sessionId: testSession.id,
          role: 'ASSISTANT',
          text: 'Ch√†o b·∫°n! Ch√∫ng t√¥i c√≥ Tai nghe T√†i L·ªôc Pro v·ªõi ch·ªëng ·ªìn ch·ªß ƒë·ªông r·∫•t t·ªët.'
        },
        {
          sessionId: testSession.id,
          role: 'USER',
          text: 'Gi√° bao nhi√™u v√† c√≥ b·∫£o h√†nh kh√¥ng?'
        },
        {
          sessionId: testSession.id,
          role: 'ASSISTANT',
          text: 'Tai nghe T√†i L·ªôc Pro gi√° 2.990.000 VNƒê v√† c√≥ b·∫£o h√†nh 24 th√°ng.'
        },
        {
          sessionId: testSession.id,
          role: 'USER',
          text: 'Tuy·ªát v·ªùi! T√¥i s·∫Ω mua. C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu.'
        }
      ]
    });

    console.log(`‚úÖ Created test session: ${testSession.id}`);
    console.log('üìä Messages added successfully!\n');

    // 3. Test chat search 
    console.log('3Ô∏è‚É£ Testing chat search...');
    const sessions = await prisma.chatSession.findMany({
      where: {
        messages: {
          some: {
            text: {
              contains: 'tai nghe',
              mode: 'insensitive'
            }
          }
        }
      },
      include: {
        messages: true
      }
    });

    console.log(`üîç Found ${sessions.length} sessions with "tai nghe"`);
    
    // 4. Display session info
    if (sessions.length > 0) {
      const session = sessions[0];
      console.log(`üìù Session ${session.id}:`);
      console.log(`   - Status: ${session.status}`);
      console.log(`   - Messages: ${session.messages.length}`);
      console.log(`   - Created: ${session.createdAt.toLocaleString('vi-VN')}`);
      
      console.log('\nüí¨ Messages:');
      session.messages.forEach((msg, index) => {
        console.log(`   ${index + 1}. [${msg.role}] ${msg.text.substring(0, 50)}...`);
      });
    }

    console.log('\nüéâ Chat analysis setup completed!');
    console.log('\nüìã Available API endpoints:');
    console.log('   POST /api/v1/ai/analyze-chat - Ph√¢n t√≠ch chat v·ªõi AI');
    console.log('   POST /api/v1/ai/search-chats - T√¨m ki·∫øm l·ªãch s·ª≠ chat');
    console.log('   POST /api/v1/ai/summarize-chats - T√≥m t·∫Øt nhi·ªÅu chat');
    console.log('   POST /api/v1/ai/chat-insights - B√°o c√°o insights');
    console.log('   GET  /api/v1/ai/chat-sessions - Danh s√°ch chat sessions');

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·ªâ ch·∫°y n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  testChatAnalysis();
}

export { testChatAnalysis };
