const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3010/api/v1';

// Sample data for seeding
const sampleData = {
  users: [
    {
      email: 'admin@audiotailoc.com',
      password: 'Admin123!',
      name: 'Admin Audio T√†i L·ªôc',
      phone: '0901234567',
      role: 'ADMIN'
    },
    {
      email: 'nguyenvana@example.com',
      password: 'password123',
      name: 'Nguy·ªÖn VƒÉn A',
      phone: '0901234567',
      role: 'USER'
    },
    {
      email: 'tranthib@example.com',
      password: 'password123',
      name: 'Tr·∫ßn Th·ªã B',
      phone: '0902345678',
      role: 'USER'
    },
    {
      email: 'levanc@example.com',
      password: 'password123',
      name: 'L√™ VƒÉn C',
      phone: '0903456789',
      role: 'USER'
    },
    {
      email: 'phamthid@example.com',
      password: 'password123',
      name: 'Ph·∫°m Th·ªã D',
      phone: '0904567890',
      role: 'USER'
    }
  ],

  categories: [
    {
      name: '√Çm thanh Karaoke',
      slug: 'karaoke-audio',
      isActive: true
    },
    {
      name: 'Microphone',
      slug: 'microphones',
      isActive: true
    },
    {
      name: 'Loa & Amplifier',
      slug: 'speakers-amplifiers',
      isActive: true
    },
    {
      name: 'Mixer & Console',
      slug: 'mixers-consoles',
      isActive: true
    },
    {
      name: 'C√°p & K·∫øt n·ªëi',
      slug: 'cables-connectors',
      isActive: true
    },
    {
      name: 'Ph·ª• ki·ªán √¢m thanh',
      slug: 'audio-accessories',
      isActive: true
    }
  ],

  products: [
    {
      name: 'Microphone Karaoke Professional',
      slug: 'micro-karaoke-pro',
      description: 'Microphone chuy√™n nghi·ªáp cho h·ªá th·ªëng karaoke v·ªõi ch·∫•t l∆∞·ª£ng √¢m thanh cao',
      priceCents: 2500000,
      categorySlug: 'microphones',
      featured: true,
      isActive: true,
      images: '["https://res.cloudinary.com/dib7tbv7w/image/upload/v1735756800/audio-products/micro-1.jpg"]'
    },
    {
      name: 'Loa Karaoke 1000W',
      slug: 'loa-karaoke-1000w',
      description: 'Loa karaoke c√¥ng su·∫•t 1000W, √¢m thanh s·ªëng ƒë·ªông',
      priceCents: 8500000,
      categorySlug: 'speakers-amplifiers',
      featured: true,
      isActive: true,
      images: '["https://res.cloudinary.com/dib7tbv7w/image/upload/v1735756800/audio-products/speaker-1.jpg"]'
    },
    {
      name: 'Mixer Console 16 k√™nh',
      slug: 'mixer-16-channel',
      description: 'B√†n mixer 16 k√™nh chuy√™n nghi·ªáp cho studio v√† s√¢n kh·∫•u',
      priceCents: 12500000,
      categorySlug: 'mixers-consoles',
      featured: false,
      isActive: true,
      images: '["https://res.cloudinary.com/dib7tbv7w/image/upload/v1735756800/audio-products/mixer-1.jpg"]'
    },
    {
      name: 'C√°p XLR 5m',
      slug: 'cable-xlr-5m',
      description: 'C√°p k·∫øt n·ªëi XLR ch·∫•t l∆∞·ª£ng cao, ƒë·ªô d√†i 5m',
      priceCents: 150000,
      categorySlug: 'cables-connectors',
      featured: false,
      isActive: true,
      images: '["https://res.cloudinary.com/dib7tbv7w/image/upload/v1735756800/audio-products/cable-1.jpg"]'
    },
    {
      name: 'Stand Microphone Professional',
      slug: 'stand-micro-pro',
      description: 'Ch√¢n micro chuy√™n nghi·ªáp, ƒëi·ªÅu ch·ªânh ƒë·ªô cao linh ho·∫°t',
      priceCents: 450000,
      categorySlug: 'audio-accessories',
      featured: false,
      isActive: true,
      images: '["https://res.cloudinary.com/dib7tbv7w/image/upload/v1735756800/audio-products/stand-1.jpg"]'
    }
  ],

  services: [
    {
      name: 'L·∫Øp ƒë·∫∑t h·ªá th·ªëng Karaoke',
      slug: 'lap-dat-karaoke',
      description: 'D·ªãch v·ª• l·∫Øp ƒë·∫∑t v√† c·∫•u h√¨nh h·ªá th·ªëng karaoke chuy√™n nghi·ªáp',
      basePriceCents: 1500000,
      price: 1500000,
      duration: 120,
      category: 'Installation',
      type: 'INSTALLATION',
      isActive: true,
      isFeatured: true
    },
    {
      name: 'B·∫£o tr√¨ √¢m thanh',
      slug: 'bao-tri-am-thanh',
      description: 'D·ªãch v·ª• b·∫£o tr√¨ v√† s·ª≠a ch·ªØa thi·∫øt b·ªã √¢m thanh',
      basePriceCents: 800000,
      price: 800000,
      duration: 60,
      category: 'Maintenance',
      type: 'MAINTENANCE',
      isActive: true,
      isFeatured: false
    },
    {
      name: 'T∆∞ v·∫•n h·ªá th·ªëng √¢m thanh',
      slug: 'tu-van-am-thanh',
      description: 'T∆∞ v·∫•n thi·∫øt k·∫ø v√† l·ª±a ch·ªçn h·ªá th·ªëng √¢m thanh ph√π h·ª£p',
      basePriceCents: 500000,
      price: 500000,
      duration: 90,
      category: 'Consulting',
      type: 'CONSULTING',
      isActive: true,
      isFeatured: true
    }
  ]
};

// Helper function to make API requests
async function makeRequest(endpoint, method = 'GET', body = null, token = null) {
  const url = `${BASE_URL}${endpoint}`;
  const headers = {
    'Content-Type': 'application/json',
  };

  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  const config = {
    method,
    headers,
  };

  if (body) {
    config.body = JSON.stringify(body);
  }

  try {
    const response = await fetch(url, config);
    const data = await response.json();

    if (!response.ok) {
      console.error(`‚ùå API Error [${response.status}]:`, data);
      return null;
    }

    return data;
  } catch (error) {
    console.error('‚ùå Network Error:', error);
    return null;
  }
}

// Main seeding function
async function seedData() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u qua API...\n');

  let adminToken = '';

  try {
    // 1. ƒêƒÉng nh·∫≠p admin ƒë·ªÉ l·∫•y token
    console.log('üîê ƒêƒÉng nh·∫≠p admin...');
    const loginResponse = await makeRequest('/auth/login', 'POST', {
      email: 'admin@audiotailoc.com',
      password: 'Admin123!'
    });

    if (loginResponse && loginResponse.data && loginResponse.data.accessToken) {
      adminToken = loginResponse.data.accessToken;
      console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!\n');
    } else {
      console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p admin, th·ª≠ t·∫°o t√†i kho·∫£n admin...');

      // T·∫°o t√†i kho·∫£n admin
      const createAdminResponse = await makeRequest('/users', 'POST', sampleData.users[0]);
      if (createAdminResponse) {
        console.log('‚úÖ T·∫°o admin th√†nh c√¥ng!');

        // ƒêƒÉng nh·∫≠p l·∫°i
        const loginAgain = await makeRequest('/auth/login', 'POST', {
          email: 'admin@audiotailoc.com',
          password: 'Admin123!'
        });

        if (loginAgain && loginAgain.data && loginAgain.data.accessToken) {
          adminToken = loginAgain.data.accessToken;
          console.log('‚úÖ ƒêƒÉng nh·∫≠p admin th√†nh c√¥ng!\n');
        }
      }
    }

    // 2. T·∫°o users
    console.log('üë• T·∫°o users...');
    for (const user of sampleData.users.slice(1)) { // B·ªè admin
      const response = await makeRequest('/users', 'POST', user, adminToken);
      if (response) {
        console.log(`‚úÖ T·∫°o user: ${user.name}`);
      }
    }
    console.log('');

    // 3. T·∫°o categories
    console.log('üìÇ T·∫°o categories...');
    const categoryIds = [];
    for (const category of sampleData.categories) {
      const response = await makeRequest('/catalog/categories', 'POST', category, adminToken);
      if (response && response.data && response.data.id) {
        categoryIds.push(response.data.id);
        console.log(`‚úÖ T·∫°o category: ${category.name}`);
      }
    }
    console.log('');

    // 4. T·∫°o products
    console.log('üì¶ T·∫°o products...');
    for (const product of sampleData.products) {
      const response = await makeRequest('/catalog/products', 'POST', product, adminToken);
      if (response) {
        console.log(`‚úÖ T·∫°o product: ${product.name}`);
      }
    }
    console.log('');

    // 5. T·∫°o services
    console.log('üîß T·∫°o services...');
    for (const service of sampleData.services) {
      const response = await makeRequest('/services', 'POST', service, adminToken);
      if (response) {
        console.log(`‚úÖ T·∫°o service: ${service.name}`);
      }
    }
    console.log('');

    console.log('üéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!');
    console.log('\nüìä T√≥m t·∫Øt:');
    console.log(`   - Users: ${sampleData.users.length}`);
    console.log(`   - Categories: ${sampleData.categories.length}`);
    console.log(`   - Products: ${sampleData.products.length}`);
    console.log(`   - Services: ${sampleData.services.length}`);

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu:', error);
  }
}

// Run the seeding
seedData();
