const { GoogleGenerativeAI } = require('@google/generative-ai');

// Test all AI features with new model
async function testAIFeaturesComplete() {
  console.log('ü§ñ Testing All AI Features with gemini-1.5-flash...\n');

  const apiKey = 'AIzaSyBmnRG-kZB9QFUPXgZBEz8zrOzHM7MyF0E';
  
  try {
    // Initialize Gemini with new model
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    
    console.log('‚úÖ Gemini initialized with gemini-1.5-flash');
    
    // 1. Test AI Chat
    console.log('\n1. Testing AI Chat...');
    const chatPrompt = `
B·∫°n l√† tr·ª£ l√Ω AI c·ªßa Audio T√†i L·ªôc - c·ª≠a h√†ng thi·∫øt b·ªã √¢m thanh chuy√™n nghi·ªáp.

Kh√°ch h√†ng h·ªèi: "Xin ch√†o, t√¥i mu·ªën t√¨m tai nghe ch·ªëng ·ªìn ch·∫•t l∆∞·ª£ng t·ªët"

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† chuy√™n nghi·ªáp. Gi·ªõi thi·ªáu v·ªÅ c√°c lo·∫°i tai nghe ch·ªëng ·ªìn v√† l·ªùi khuy√™n ch·ªçn mua.
`;

    const chatResult = await model.generateContent(chatPrompt);
    const chatResponse = await chatResult.response;
    console.log('‚úÖ AI Chat Response:', chatResponse.text().substring(0, 200) + '...');
    
    // 2. Test AI Product Recommendations
    console.log('\n2. Testing AI Product Recommendations...');
    const recPrompt = `
B·∫°n l√† chuy√™n gia t∆∞ v·∫•n thi·∫øt b·ªã √¢m thanh c·ªßa Audio T√†i L·ªôc. 
Kh√°ch h√†ng t√¨m ki·∫øm: "tai nghe ch·ªëng ·ªìn cho gaming"

Danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn:
- Tai nghe Sony WH-1000XM4: Tai nghe ch·ªëng ·ªìn cao c·∫•p (Gi√°: 8,500,000 VNƒê)
- Tai nghe Bose QuietComfort 35 II: Ch·ªëng ·ªìn tuy·ªát v·ªùi (Gi√°: 7,200,000 VNƒê)
- Tai nghe Audio-Technica ATH-M50x: Chuy√™n nghi·ªáp cho studio (Gi√°: 3,500,000 VNƒê)
- Tai nghe Sennheiser HD 660S: Ch·∫•t l∆∞·ª£ng √¢m thanh tuy·ªát v·ªùi (Gi√°: 6,800,000 VNƒê)

H√£y:
1. Ph√¢n t√≠ch nhu c·∫ßu c·ªßa kh√°ch h√†ng
2. Gi·ªõi thi·ªáu 2-3 s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t
3. Gi·∫£i th√≠ch t·∫°i sao nh·ªØng s·∫£n ph·∫©m n√†y ph√π h·ª£p
4. ƒê∆∞a ra l·ªùi khuy√™n v·ªÅ c√°ch s·ª≠ d·ª•ng
5. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† chuy√™n nghi·ªáp
`;

    const recResult = await model.generateContent(recPrompt);
    const recResponse = await recResult.response;
    console.log('‚úÖ AI Recommendations:', recResponse.text().substring(0, 300) + '...');
    
    // 3. Test AI Search Keywords
    console.log('\n3. Testing AI Search Keywords...');
    const keywordPrompt = `
H√£y m·ªü r·ªông t·ª´ kh√≥a t√¨m ki·∫øm "tai nghe ch·ªëng ·ªìn" th√†nh c√°c t·ª´ kh√≥a li√™n quan ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m.

Tr·∫£ v·ªÅ danh s√°ch c√°c t·ª´ kh√≥a, m·ªói t·ª´ kh√≥a m·ªôt d√≤ng:
`;

    const keywordResult = await model.generateContent(keywordPrompt);
    const keywordResponse = await keywordResult.response;
    console.log('‚úÖ AI Search Keywords:', keywordResponse.text().substring(0, 200) + '...');
    
    // 4. Test AI Product Description
    console.log('\n4. Testing AI Product Description...');
    const descPrompt = `
H√£y t·∫°o m√¥ t·∫£ chi ti·∫øt v√† h·∫•p d·∫´n cho s·∫£n ph·∫©m √¢m thanh sau:

T√™n s·∫£n ph·∫©m: Tai nghe Sony WH-1000XM4
Lo·∫°i: Tai nghe ch·ªëng ·ªìn kh√¥ng d√¢y
Gi√°: 8,500,000 VNƒê

H√£y vi·∫øt m√¥ t·∫£ s·∫£n ph·∫©m b·∫±ng ti·∫øng Vi·ªát, bao g·ªìm:
- ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t
- C√¥ng ngh·ªá ch·ªëng ·ªìn
- Ch·∫•t l∆∞·ª£ng √¢m thanh
- Th·ªùi l∆∞·ª£ng pin
- T√≠nh nƒÉng ƒë·∫∑c bi·ªát
- ƒê·ªëi t∆∞·ª£ng ph√π h·ª£p
`;

    const descResult = await model.generateContent(descPrompt);
    const descResponse = await descResult.response;
    console.log('‚úÖ AI Product Description:', descResponse.text().substring(0, 300) + '...');
    
    console.log('\nüéâ All AI Features Test Successful!');
    console.log('‚úÖ AI Chat: Working');
    console.log('‚úÖ AI Recommendations: Working');
    console.log('‚úÖ AI Search Keywords: Working');
    console.log('‚úÖ AI Product Description: Working');
    console.log('‚úÖ Model gemini-1.5-flash: Compatible');
    console.log('‚úÖ API Key: Valid');
    console.log('‚úÖ Vietnamese responses: Working');
    
    console.log('\nüìù Backend Integration Ready:');
    console.log('- Update gemini.service.ts with gemini-1.5-flash');
    console.log('- Use API key: AIzaSyBmnRG-kZB9QFUPXgZBEz8zrOzHM7MyF0E');
    console.log('- All AI features should work in backend');
    
  } catch (error) {
    console.error('‚ùå AI Features test failed:', error.message);
    
    if (error.message?.includes('429')) {
      console.log('‚ö†Ô∏è Rate limit exceeded - try again later');
    } else if (error.message?.includes('400')) {
      console.log('‚ö†Ô∏è Bad request - check prompt format');
    } else if (error.message?.includes('401')) {
      console.log('‚ö†Ô∏è Unauthorized - check API key');
    } else {
      console.log('‚ö†Ô∏è Unknown error');
    }
  }
}

// Run the test
testAIFeaturesComplete();
