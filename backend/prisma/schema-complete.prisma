// Complete Prisma Schema for Audio Tài Lộc with all required models
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum ServiceCategory {
  INSTALLATION
  MAINTENANCE
  REPAIR
  LIQUIDATION
  RENTAL
  CONSULTATION
  DELIVERY
  OTHER
}

enum ServiceType {
  AUDIO_EQUIPMENT
  HOME_THEATER
  PROFESSIONAL_SOUND
  LIGHTING
  CONSULTATION
  MAINTENANCE
  OTHER
}

enum ServiceBookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  REQUIRES_ACTION
  SUCCEEDED
  FAILED
  CANCELLED
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELED
}

// User Model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders       Order[]
  carts        Cart[]
  chatSessions ChatSession[]
  notifications Notification[]
  wishlistItems WishlistItem[]
  reviews      ProductReview[]

  @@map("users")
}

// Product Model
model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  priceCents  Int
  imageUrl    String?
  images      String?
  categoryId  String?
  featured    Boolean  @default(false)
  isActive    Boolean  @default(true)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    ProductReview[]
  inventory  Inventory?
  wishlistItems WishlistItem[]

  @@map("products")
}

// Category Model
model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  parentId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// Cart Model
model Cart {
  id        String    @id @default(cuid())
  userId    String?
  guestId   String?
  status    String    @default("ACTIVE")
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user  User?      @relation(fields: [userId], references: [id])
  items CartItem[]

  @@map("carts")
}

// Cart Item Model
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

// Order Model
model Order {
  id              String   @id @default(cuid())
  orderNo         String   @unique
  userId          String
  totalCents      Int
  status          OrderStatus @default(PENDING)
  shippingAddress String?
  promotionCode   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User        @relation(fields: [userId], references: [id])
  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

// Order Item Model
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Payment Model
model Payment {
  id            String   @id @default(cuid())
  orderId       String
  provider      String
  amountCents   Int
  status        PaymentStatus @default(PENDING)
  transactionId String?
  metadata      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

// Service Model
model Service {
  id             String   @id @default(cuid())
  slug           String   @unique
  name           String
  description    String?
  basePriceCents Int
  price          Int
  duration       Int
  categoryId     String?
  images         String?
  isActive       Boolean  @default(true)
  isFeatured     Boolean  @default(false)
  seoTitle       String?
  seoDescription String?
  category       String?
  type           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("services")
}

// Notification Model
model Notification {
  id      String   @id @default(cuid())
  userId  String
  title   String
  message String
  type    String   @default("INFO")
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Inventory Model
model Inventory {
  id        String   @id @default(cuid())
  productId String   @unique
  stock     Int      @default(0)
  reserved  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("inventory")
}

// Wishlist Item Model
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Product Review Model
model ProductReview {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("product_reviews")
}

// Chat Session Model
model ChatSession {
  id        String   @id @default(cuid())
  userId    String?
  guestId   String?
  status    String   @default("ACTIVE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?         @relation(fields: [userId], references: [id])
  messages ChatMessage[]

  @@map("chat_sessions")
}

// Chat Message Model
model ChatMessage {
  id         String   @id @default(cuid())
  sessionId  String
  content    String
  isFromUser Boolean  @default(true)
  timestamp  DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id])

  @@map("chat_messages")
}

// Page Model
model Page {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pages")
}

// Additional Models for Complete Functionality

// Search Query Model
model SearchQuery {
  id        String   @id @default(cuid())
  query     String
  userId    String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("search_queries")
}

// Product View Model
model ProductView {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  timestamp DateTime @default(now())
  duration  Int? // seconds

  user    User?    @relation(fields: [userId], references: [id])
  product Product? @relation(fields: [productId], references: [id])

  @@map("product_views")
}

// Service View Model
model ServiceView {
  id        String   @id @default(cuid())
  serviceId String
  userId    String?
  timestamp DateTime @default(now())
  duration  Int? // seconds

  user    User?    @relation(fields: [userId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])

  @@map("service_views")
}

// Customer Question Model
model CustomerQuestion {
  id          String   @id @default(cuid())
  userId      String?
  question    String
  category    String?
  satisfaction Int?
  timestamp   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("customer_questions")
}

// Technician Model
model Technician {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  specialties String? // JSON array
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@map("technicians")
}

// Service Item Model
model ServiceItem {
  id        String   @id @default(cuid())
  serviceId String
  name      String
  price     Int
  quantity  Int
  createdAt DateTime @default(now())

  service Service @relation(fields: [serviceId], references: [id])

  @@map("service_items")
}

// Service Booking Model
model ServiceBooking {
  id          String   @id @default(cuid())
  userId      String
  serviceId   String
  technicianId String?
  status      ServiceBookingStatus @default(PENDING)
  scheduledAt DateTime?
  completedAt DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User?       @relation(fields: [userId], references: [id])
  service    Service?    @relation(fields: [serviceId], references: [id])
  technician Technician? @relation(fields: [technicianId], references: [id])

  @@map("service_bookings")
}

// Service Booking Item Model
model ServiceBookingItem {
  id         String @id @default(cuid())
  bookingId  String
  serviceItemId String
  quantity   Int
  price      Int
  createdAt  DateTime @default(now())

  booking     ServiceBooking @relation(fields: [bookingId], references: [id])
  serviceItem ServiceItem    @relation(fields: [serviceItemId], references: [id])

  @@map("service_booking_items")
}

// Technician Schedule Model
model TechnicianSchedule {
  id           String   @id @default(cuid())
  technicianId String
  date         DateTime
  startTime    String
  endTime      String
  isAvailable  Boolean  @default(true)
  createdAt    DateTime @default(now())

  technician Technician @relation(fields: [technicianId], references: [id])

  @@map("technician_schedules")
}

// Promotion Model
model Promotion {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  type        String   @default("PERCENTAGE")
  value       Int
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  @@map("promotions")
}

// System Config Model
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("STRING")

  @@map("system_configs")
}

// Loyalty Account Model
model LoyaltyAccount {
  id           String   @id @default(cuid())
  userId       String   @unique
  points       Int      @default(0)
  tier         String   @default("BRONZE")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User                @relation(fields: [userId], references: [id])
  transactions PointTransaction[]
  redemptions  RedemptionHistory[]

  @@map("loyalty_accounts")
}

// Point Transaction Model
model PointTransaction {
  id          String   @id @default(cuid())
  accountId   String
  amount      Int
  type        String // EARNED, REDEEMED, EXPIRED
  description String?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  account LoyaltyAccount @relation(fields: [accountId], references: [id])

  @@map("point_transactions")
}

// Redemption History Model
model RedemptionHistory {
  id         String   @id @default(cuid())
  accountId  String
  rewardId   String
  pointsUsed Int
  status     String   @default("COMPLETED")
  createdAt  DateTime @default(now())

  account LoyaltyAccount @relation(fields: [accountId], references: [id])
  reward  LoyaltyReward  @relation(fields: [rewardId], references: [id])

  @@map("redemption_history")
}

// Loyalty Reward Model
model LoyaltyReward {
  id          String   @id @default(cuid())
  name        String
  description String?
  pointsCost  Int
  value       Int
  type        String   @default("DISCOUNT")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  redemptions RedemptionHistory[]

  @@map("loyalty_rewards")
}

// Webhook Model
model Webhook {
  id          String   @id @default(cuid())
  url         String
  secret      String
  events      String // JSON array of events
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@map("webhooks")
}

// Knowledge Base Entry Model
model KnowledgeBaseEntry {
  id        String   @id @default(cuid())
  kind      String // PRODUCT, FAQ, ARTICLE
  title     String
  content   String
  productId String?
  tags      String? // JSON array
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product? @relation(fields: [productId], references: [id])

  @@map("knowledge_base_entries")
}

// Project Model
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("DRAFT")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("projects")
}
