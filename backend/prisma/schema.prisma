generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Basic User Model (simplified)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  role      String   @default("USER") // USER, ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders       Order[]
  carts        Cart[]
  chatSessions ChatSession[]
  Notification Notification[]

  @@map("users")
}

// Product Model
model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  priceCents  Int // Price in Vietnamese dong cents
  imageUrl    String?
  images      String? // JSON string of image URLs
  categoryId  String?
  featured    Boolean  @default(false)
  isActive    Boolean  @default(true)
  stock       Int      @default(0) // Available stock quantity
  minStock    Int      @default(0) // Minimum stock level for alerts
  sku         String?  @unique // Stock Keeping Unit
  weight      Float?   // Product weight in kg
  dimensions  String?  // JSON string with dimensions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  inventory  Inventory?
  transactions InventoryTransaction[]

  @@map("products")
}

// Inventory Model
model Inventory {
  id               String   @id @default(cuid())
  productId        String   @unique
  stock            Int      @default(0) // Current stock level
  reserved         Int      @default(0) // Reserved for orders
  available        Int      @default(0) // Actually available (stock - reserved)
  lowStockThreshold Int     @default(5) // Alert when stock drops below this
  reorderPoint     Int      @default(10) // Point to reorder stock
  maxStock         Int?     // Maximum stock level
  location         String?  // Warehouse location
  lastCount        DateTime? // Last physical count date
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("inventory")
}

// Inventory Transaction Model
model InventoryTransaction {
  id        String   @id @default(cuid())
  productId String
  type      String   // IN, OUT, ADJUSTMENT, TRANSFER
  quantity  Int      // Positive for IN, negative for OUT
  reason    String   // PURCHASE, SALE, RETURN, ADJUSTMENT, etc.
  reference String?  // Order ID, Purchase ID, etc.
  notes     String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])

  @@map("inventory_transactions")
}

// Category Model
model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  parentId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// Cart Model
model Cart {
  id        String    @id @default(cuid())
  userId    String?
  guestId   String?
  status    String    @default("ACTIVE") // ACTIVE, CHECKED_OUT, ABANDONED
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user  User?      @relation(fields: [userId], references: [id])
  items CartItem[]

  @@map("carts")
}

// Cart Item Model
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  unitPrice Int      // Price per unit at time of adding
  totalPrice Int     // Total price (quantity * unitPrice)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

// Order Model
model Order {
  id              String   @id @default(cuid())
  orderNo         String   @unique
  userId          String
  subtotalCents   Int      // Subtotal before discounts
  discountCents   Int      @default(0) // Total discount amount
  taxCents        Int      @default(0) // Tax amount
  shippingCents   Int      @default(0) // Shipping cost
  totalCents      Int      // Final total
  status          String   @default("PENDING") // PENDING, CONFIRMED, PAID, SHIPPED, DELIVERED, CANCELED
  shippingAddress String?  // JSON string with address details
  billingAddress  String?  // JSON string with billing details
  promotionCode   String?
  notes           String?
  trackingNumber  String?
  estimatedDelivery DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User        @relation(fields: [userId], references: [id])
  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

// Order Item Model
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  name      String   // Product name at time of order
  imageUrl  String?  // Product image at time of order
  quantity  Int
  unitPrice Int      // Price per unit at time of order
  totalPrice Int     // Total price (quantity * unitPrice)
  discount  Int      @default(0) // Discount applied to this item
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Payment Intent Model (simplified)
model PaymentIntent {
  id           String   @id @default(cuid())
  orderId      String
  provider     String // VNPAY, MOMO, PAYOS
  amountCents  Int
  status       String   @default("PENDING") // PENDING, REQUIRES_ACTION, SUCCEEDED, FAILED
  clientSecret String?
  returnUrl    String?
  metadata     String? // JSON string
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  payments Payment[]

  @@map("payment_intents")
}

// Payment Model (simplified)
model Payment {
  id            String   @id @default(cuid())
  intentId      String
  orderId       String
  provider      String
  amountCents   Int
  status        String   @default("PENDING")
  transactionId String?
  raw           String? // JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  intent PaymentIntent @relation(fields: [intentId], references: [id])
  order  Order         @relation(fields: [orderId], references: [id])

  @@map("payments")
}

// Service Model (basic)
model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Int // Price in cents
  category    String // INSTALLATION, MAINTENANCE, etc.
  type        String // AUDIO_EQUIPMENT, HOME_THEATER, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings ServiceBooking[]

  @@map("services")
}

// Service Booking Model (basic)
model ServiceBooking {
  id            String   @id @default(cuid())
  serviceId     String
  customerName  String
  customerEmail String
  customerPhone String
  scheduledAt   DateTime
  address       String
  status        String   @default("PENDING") // PENDING, CONFIRMED, COMPLETED, CANCELLED
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  service Service @relation(fields: [serviceId], references: [id])

  @@map("service_bookings")
}

// Promotion Model (basic)
model Promotion {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  type        String   @default("PERCENT") // PERCENT, FIXED
  value       Int // Percentage or fixed amount
  minAmount   Int? // Minimum order amount
  maxAmount   Int? // Maximum discount amount
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("promotions")
}

// Knowledge Base Model (simplified for AI)
model KnowledgeBaseEntry {
  id        String   @id @default(cuid())
  kind      String // PRODUCT, FAQ, DOC
  title     String
  content   String
  embedding String? // JSON string representation of vector
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("knowledge_base_entries")
}

// Chat Session Model (basic)
model ChatSession {
  id         String   @id @default(cuid())
  userId     String?
  guestId    String?
  status     String   @default("OPEN") // OPEN, ESCALATED, CLOSED
  source     String   @default("WEB") // WEB, ZALO
  assignedTo String?
  metadata   String? // JSON string
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User?         @relation(fields: [userId], references: [id])
  messages ChatMessage[]

  @@map("chat_sessions")
}

// Chat Message Model (basic)
model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  role      String // USER, ASSISTANT, STAFF, SYSTEM
  text      String
  metadata  String? // JSON string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session ChatSession @relation(fields: [sessionId], references: [id])

  @@map("chat_messages")
}

// Notification Model (simple)
model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String // ORDER, PAYMENT, PROMOTION, SYSTEM, WELCOME
  title     String
  message   String
  data      String? // JSON string
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, read])
  @@map("notifications")
}
