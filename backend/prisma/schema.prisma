// Simplified Prisma Schema for Audio Tài Lộc (PostgreSQL compatible)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders         Order[]
  carts          Cart[]
  chatSessions   ChatSession[]
  notifications  Notification[]
  wishlistItems  WishlistItem[]
  reviews        ProductReview[]
  searchQueries  SearchQuery[]
  productViews   ProductView[]
  serviceViews   ServiceView[]
  questions      CustomerQuestion[]
  loyaltyAccount LoyaltyAccount?
  projects       Project[]
  ServiceBooking ServiceBooking[]
  activityLogs   ActivityLog[]

  @@map("users")
}

// Product Model
model Product {
  id                String   @id @default(cuid())
  slug              String   @unique
  name              String
  description       String?
  shortDescription  String?
  priceCents        Int
  originalPriceCents Int?
  imageUrl          String?
  images            Json?    // Array of image URLs
  categoryId        String?
  brand             String?
  model             String?
  sku               String?  @unique
  specifications    Json?    // Product specifications as JSON
  features          String?  // Key features (comma separated)
  warranty          String?  // Warranty information
  weight            Float?   // Weight in kg
  dimensions        String?  // Dimensions (LxWxH)
  stockQuantity     Int      @default(0)
  minOrderQuantity  Int      @default(1)
  maxOrderQuantity  Int?     // Maximum order quantity
  tags              String?  // Tags (comma separated)

  // SEO Fields
  metaTitle         String?
  metaDescription   String?
  metaKeywords      String?  // Keywords (comma separated)
  canonicalUrl      String?

  featured          Boolean  @default(false)
  isActive          Boolean  @default(true)
  isDeleted         Boolean  @default(false)
  viewCount         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  category         Category?            @relation(fields: [categoryId], references: [id])
  cartItems        CartItem[]
  orderItems       OrderItem[]
  reviews          ProductReview[]
  inventory        Inventory?
  wishlistItems    WishlistItem[]
  views            ProductView[]
  knowledgeEntries KnowledgeBaseEntry[]

  @@index([isDeleted])
  @@index([isActive])
  @@index([featured])
  @@index([categoryId])
  @@map("products")
}

// Category Model
model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  parentId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// Cart Model
model Cart {
  id        String    @id @default(cuid())
  userId    String?
  guestId   String?
  status    String    @default("ACTIVE")
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user  User?      @relation(fields: [userId], references: [id])
  items CartItem[]

  @@map("carts")
}

// Cart Item Model  
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

// Order Model
model Order {
  id                 String   @id @default(cuid())
  orderNo            String   @unique
  userId             String
  subtotalCents      Int      @default(0)
  discountCents      Int      @default(0)
  shippingCents      Int      @default(0)
  totalCents         Int
  status             String   @default("PENDING")
  shippingAddress    String?
  shippingCoordinates String?
  promotionCode      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id])
  items          OrderItem[]
  payments       Payment[]
  paymentIntents PaymentIntent[]

  @@map("orders")
}

// Order Item Model
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  name      String?
  unitPrice Int?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Payment Model
model Payment {
  id            String   @id @default(cuid())
  orderId       String
  intentId      String?
  provider      String
  amountCents   Int
  status        String   @default("PENDING")
  transactionId String?
  metadata      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order  Order          @relation(fields: [orderId], references: [id])
  intent PaymentIntent? @relation(fields: [intentId], references: [id])

  @@map("payments")
}

// Service Category Model
model ServiceCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services Service[]
  types    ServiceType[]

  @@index([isActive])
  @@index([sortOrder])
  @@map("service_categories")
}

// Service Type Model
model ServiceType {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  categoryId  String
  icon        String?
  color       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category ServiceCategory @relation(fields: [categoryId], references: [id])
  services Service[]

  @@index([isActive])
  @@index([categoryId])
  @@index([sortOrder])
  @@map("service_types")
}

// Service Model
model Service {
  id             String   @id @default(cuid())
  slug           String   @unique
  name           String
  description    String?
  shortDescription String?
  basePriceCents Int
  price          Int
  duration       Int
  categoryId     String?
  typeId         String?
  images         String?
  isActive       Boolean  @default(true)
  isFeatured     Boolean  @default(false)
  seoTitle       String?
  seoDescription String?
  category       String?
  type           String?
  tags           String?  // JSON array of tags
  features       String?  // JSON array of features
  requirements   String?  // JSON array of requirements
  metadata       String?  // JSON object for additional data
  viewCount      Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  serviceCategory ServiceCategory? @relation(fields: [categoryId], references: [id])
  serviceType      ServiceType?     @relation(fields: [typeId], references: [id])
  views    ServiceView[]
  bookings ServiceBooking[]
  items    ServiceItem[]

  @@index([isActive])
  @@index([isFeatured])
  @@index([categoryId])
  @@index([typeId])
  @@map("services")
}

// Notification Model
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("INFO")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Inventory Model
model Inventory {
  id                String   @id @default(cuid())
  productId         String   @unique
  stock             Int      @default(0)
  reserved          Int      @default(0)
  lowStockThreshold Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("inventory")
}

// Wishlist Item Model
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Product Review Model
model ProductReview {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  status     ReviewStatus @default(APPROVED)
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  votes   ProductReviewVote[]
  reports ProductReviewReport[]

  @@map("product_reviews")
}

// Review status enum for moderation
enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

// Users can vote helpful/report on reviews
model ProductReviewVote {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  isUpvote  Boolean  @default(true)
  createdAt DateTime @default(now())

  review ProductReview @relation(fields: [reviewId], references: [id])

  @@unique([reviewId, userId])
  @@index([reviewId])
  @@map("product_review_votes")
}

// Reports for admin moderation
model ProductReviewReport {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  reason    String
  createdAt DateTime @default(now())

  review ProductReview @relation(fields: [reviewId], references: [id])

  @@index([reviewId])
  @@map("product_review_reports")
}

// Chat Session Model
model ChatSession {
  id        String   @id @default(cuid())
  userId    String?
  guestId   String?
  status    String   @default("ACTIVE")
  source    String   @default("WEB") // WEB, ZALO, MOBILE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?         @relation(fields: [userId], references: [id])
  messages ChatMessage[]

  @@map("chat_sessions")
}

// Chat Message Model
model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  role      String   @default("user") // USER, ASSISTANT, STAFF, SYSTEM
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session ChatSession @relation(fields: [sessionId], references: [id])

  @@map("chat_messages")
}

// Page Model
model Page {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pages")
}

// Search Query Model
model SearchQuery {
  id        String   @id @default(cuid())
  query     String
  userId    String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("search_queries")
}

// Product View Model
model ProductView {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  timestamp DateTime @default(now())
  duration  Int? // seconds

  user    User?    @relation(fields: [userId], references: [id])
  product Product? @relation(fields: [productId], references: [id])

  @@map("product_views")
}

// Service View Model
model ServiceView {
  id        String   @id @default(cuid())
  serviceId String
  userId    String?
  timestamp DateTime @default(now())
  duration  Int? // seconds

  user    User?    @relation(fields: [userId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])

  @@map("service_views")
}

// Customer Question Model
model CustomerQuestion {
  id           String   @id @default(cuid())
  userId       String?
  question     String
  category     String?
  satisfaction Int?
  timestamp    DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("customer_questions")
}

// Technician Model
model Technician {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  specialties String? // JSON array (stored as string)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  bookings  ServiceBooking[]
  schedules TechnicianSchedule[]

  @@map("technicians")
}

// Service Item Model
model ServiceItem {
  id        String   @id @default(cuid())
  serviceId String
  name      String
  price     Int
  quantity  Int
  createdAt DateTime @default(now())

  service      Service              @relation(fields: [serviceId], references: [id])
  bookingItems ServiceBookingItem[]

  @@map("service_items")
}

// Service Booking Model
model ServiceBooking {
  id             String    @id @default(cuid())
  userId         String
  serviceId      String
  technicianId   String?
  status         String    @default("PENDING")
  scheduledAt    DateTime?
  scheduledTime  String?
  completedAt    DateTime?
  notes          String?
  estimatedCosts Int?      @default(0)
  actualCosts    Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user       User?                  @relation(fields: [userId], references: [id])
  service    Service?               @relation(fields: [serviceId], references: [id])
  technician Technician?            @relation(fields: [technicianId], references: [id])
  items      ServiceBookingItem[]
  history    ServiceStatusHistory[]
  payments   ServicePayment[]

  @@map("service_bookings")
}

// Service Booking Item Model
model ServiceBookingItem {
  id            String   @id @default(cuid())
  bookingId     String
  serviceItemId String
  quantity      Int
  price         Int
  createdAt     DateTime @default(now())

  booking     ServiceBooking @relation(fields: [bookingId], references: [id])
  serviceItem ServiceItem    @relation(fields: [serviceItemId], references: [id])

  @@map("service_booking_items")
}

// Technician Schedule Model
model TechnicianSchedule {
  id           String   @id @default(cuid())
  technicianId String
  date         DateTime
  startTime    String
  endTime      String
  isAvailable  Boolean  @default(true)
  createdAt    DateTime @default(now())

  technician Technician @relation(fields: [technicianId], references: [id])

  @@map("technician_schedules")
}

// Booking Status History
model ServiceStatusHistory {
  id        String   @id @default(cuid())
  bookingId String
  status    String
  newStatus String
  note      String?
  changedBy String?
  createdAt DateTime @default(now())

  booking ServiceBooking @relation(fields: [bookingId], references: [id])

  @@map("service_status_history")
}

// Service Booking Payment
model ServicePayment {
  id            String    @id @default(cuid())
  bookingId     String
  provider      String
  amountCents   Int
  status        String    @default("PENDING")
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime  @default(now())

  booking ServiceBooking @relation(fields: [bookingId], references: [id])

  @@map("service_payments")
}

// Promotion Model
model Promotion {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  description String?
  type        String    @default("PERCENTAGE")
  value       Int
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  @@map("promotions")
}

// System Config Model
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("STRING")

  @@map("system_configs")
}

// Loyalty Account Model
model LoyaltyAccount {
  id        String   @id @default(cuid())
  userId    String   @unique
  points    Int      @default(0)
  tier      String   @default("BRONZE")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User                @relation(fields: [userId], references: [id])
  transactions PointTransaction[]
  redemptions  RedemptionHistory[]

  @@map("loyalty_accounts")
}

// Point Transaction Model
model PointTransaction {
  id          String    @id @default(cuid())
  accountId   String
  amount      Int
  type        String // EARNED, REDEEMED, EXPIRED
  description String?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  account LoyaltyAccount @relation(fields: [accountId], references: [id])

  @@map("point_transactions")
}

// Redemption History Model
model RedemptionHistory {
  id         String   @id @default(cuid())
  accountId  String
  rewardId   String
  pointsUsed Int
  status     String   @default("COMPLETED")
  createdAt  DateTime @default(now())

  account LoyaltyAccount @relation(fields: [accountId], references: [id])
  reward  LoyaltyReward  @relation(fields: [rewardId], references: [id])

  @@map("redemption_history")
}

// Loyalty Reward Model
model LoyaltyReward {
  id          String   @id @default(cuid())
  name        String
  description String?
  pointsCost  Int
  value       Int
  type        String   @default("DISCOUNT")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  redemptions RedemptionHistory[]

  @@map("loyalty_rewards")
}

// Webhook Model
model Webhook {
  id        String   @id @default(cuid())
  url       String
  secret    String
  events    String // JSON array of events
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("webhooks")
}

// Knowledge Base Entry Model
model KnowledgeBaseEntry {
  id        String   @id @default(cuid())
  kind      String // PRODUCT, FAQ, ARTICLE
  title     String
  content   String
  productId String?
  tags      String? // JSON array
  embedding String? // JSON string representation of vector
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product? @relation(fields: [productId], references: [id])

  @@map("knowledge_base_entries")
}

// Payment Intent Model
model PaymentIntent {
  id           String   @id @default(cuid())
  orderId      String
  provider     String // VNPAY, MOMO, PAYOS
  amountCents  Int
  status       String   @default("PENDING") // PENDING, REQUIRES_ACTION, SUCCEEDED, FAILED
  clientSecret String?
  returnUrl    String?
  metadata     String? // JSON string
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  order    Order     @relation(fields: [orderId], references: [id])
  payments Payment[]

  @@map("payment_intents")
}

// Project Model
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("DRAFT")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("projects")
}

// Activity Log Model
model ActivityLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  resource    String?  // users, products, orders, etc.
  resourceId  String?  // ID of the affected resource
  details     String?  // JSON string with additional details
  ipAddress   String?
  userAgent   String?
  method      String?  // HTTP method
  url         String?  // Request URL
  statusCode  Int?     // HTTP status code
  duration    Int?     // Request duration in ms
  category    String   @default("user_activity") // user_activity, security, audit, system
  severity    String   @default("info") // info, warn, error
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([category])
  @@index([createdAt])
  @@map("activity_logs")
}

// ==========================
// Marketing Models & Enums
// ==========================

enum CampaignType {
  EMAIL
  SMS
  PUSH
  SOCIAL
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
  CANCELLED
}

model Campaign {
  id              String          @id @default(cuid())
  name            String
  description     String
  type            CampaignType
  status          CampaignStatus  @default(DRAFT)
  targetAudience  String?
  discountPercent Int?
  discountAmount  Int?
  startDate       DateTime?
  endDate         DateTime?
  sentAt          DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  recipients      CampaignRecipient[]
  opens           CampaignOpen[]
  clicks          CampaignClick[]
  emailLogs       EmailLog[]

  @@map("campaigns")
}

model CampaignRecipient {
  id         String   @id @default(cuid())
  campaignId String
  email      String
  name       String?
  createdAt  DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("campaign_recipients")
}

model CampaignOpen {
  id             String   @id @default(cuid())
  campaignId     String
  recipientEmail String?
  createdAt      DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("campaign_opens")
}

model CampaignClick {
  id             String   @id @default(cuid())
  campaignId     String
  recipientEmail String?
  url            String?
  createdAt      DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("campaign_clicks")
}

model EmailLog {
  id             String   @id @default(cuid())
  campaignId     String?
  recipientEmail String
  subject        String
  status         String   // SENT, FAILED
  error          String?
  sentAt         DateTime?
  createdAt      DateTime @default(now())

  campaign Campaign? @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("email_logs")
}
