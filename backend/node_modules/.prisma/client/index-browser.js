
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  description: 'description',
  shortDescription: 'shortDescription',
  priceCents: 'priceCents',
  originalPriceCents: 'originalPriceCents',
  imageUrl: 'imageUrl',
  images: 'images',
  categoryId: 'categoryId',
  brand: 'brand',
  model: 'model',
  sku: 'sku',
  specifications: 'specifications',
  features: 'features',
  warranty: 'warranty',
  weight: 'weight',
  dimensions: 'dimensions',
  stockQuantity: 'stockQuantity',
  minOrderQuantity: 'minOrderQuantity',
  maxOrderQuantity: 'maxOrderQuantity',
  maxStock: 'maxStock',
  tags: 'tags',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords',
  canonicalUrl: 'canonicalUrl',
  featured: 'featured',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  viewCount: 'viewCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  parentId: 'parentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  canonicalUrl: 'canonicalUrl',
  description: 'description',
  imageUrl: 'imageUrl',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords',
  metaTitle: 'metaTitle'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  guestId: 'guestId',
  status: 'status',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNo: 'orderNo',
  userId: 'userId',
  subtotalCents: 'subtotalCents',
  discountCents: 'discountCents',
  shippingCents: 'shippingCents',
  totalCents: 'totalCents',
  status: 'status',
  shippingAddress: 'shippingAddress',
  shippingCoordinates: 'shippingCoordinates',
  promotionCode: 'promotionCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  price: 'price',
  name: 'name',
  unitPrice: 'unitPrice',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  intentId: 'intentId',
  provider: 'provider',
  amountCents: 'amountCents',
  status: 'status',
  transactionId: 'transactionId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefundScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  amountCents: 'amountCents',
  reason: 'reason',
  status: 'status',
  providerRefundId: 'providerRefundId',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  errorMessage: 'errorMessage'
};

exports.Prisma.ServiceTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  icon: 'icon',
  color: 'color',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  description: 'description',
  shortDescription: 'shortDescription',
  basePriceCents: 'basePriceCents',
  price: 'price',
  minPrice: 'minPrice',
  maxPrice: 'maxPrice',
  priceType: 'priceType',
  duration: 'duration',
  typeId: 'typeId',
  images: 'images',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  type: 'type',
  tags: 'tags',
  features: 'features',
  requirements: 'requirements',
  metadata: 'metadata',
  viewCount: 'viewCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  stock: 'stock',
  reserved: 'reserved',
  lowStockThreshold: 'lowStockThreshold',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryMovementScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  type: 'type',
  quantity: 'quantity',
  previousStock: 'previousStock',
  newStock: 'newStock',
  reason: 'reason',
  referenceId: 'referenceId',
  referenceType: 'referenceType',
  userId: 'userId',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.InventoryAlertScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  type: 'type',
  message: 'message',
  threshold: 'threshold',
  currentStock: 'currentStock',
  isResolved: 'isResolved',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryReportScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  description: 'description',
  parameters: 'parameters',
  data: 'data',
  generatedBy: 'generatedBy',
  generatedAt: 'generatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WishlistItemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  createdAt: 'createdAt'
};

exports.Prisma.ProductReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  isVerified: 'isVerified',
  status: 'status',
  upvotes: 'upvotes',
  downvotes: 'downvotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductReviewVoteScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  userId: 'userId',
  isUpvote: 'isUpvote',
  createdAt: 'createdAt'
};

exports.Prisma.ProductReviewReportScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  userId: 'userId',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.PageScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  content: 'content',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SearchQueryScalarFieldEnum = {
  id: 'id',
  query: 'query',
  userId: 'userId',
  timestamp: 'timestamp'
};

exports.Prisma.ProductViewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  userId: 'userId',
  timestamp: 'timestamp',
  duration: 'duration'
};

exports.Prisma.ServiceViewScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  userId: 'userId',
  timestamp: 'timestamp',
  duration: 'duration'
};

exports.Prisma.CustomerQuestionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  question: 'question',
  category: 'category',
  satisfaction: 'satisfaction',
  timestamp: 'timestamp'
};

exports.Prisma.TechnicianScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  specialties: 'specialties',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceItemScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  name: 'name',
  price: 'price',
  quantity: 'quantity',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceBookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serviceId: 'serviceId',
  technicianId: 'technicianId',
  status: 'status',
  scheduledAt: 'scheduledAt',
  scheduledTime: 'scheduledTime',
  completedAt: 'completedAt',
  notes: 'notes',
  estimatedCosts: 'estimatedCosts',
  actualCosts: 'actualCosts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceBookingItemScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  serviceItemId: 'serviceItemId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt'
};

exports.Prisma.TechnicianScheduleScalarFieldEnum = {
  id: 'id',
  technicianId: 'technicianId',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceStatusHistoryScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  status: 'status',
  newStatus: 'newStatus',
  note: 'note',
  changedBy: 'changedBy',
  createdAt: 'createdAt'
};

exports.Prisma.ServicePaymentScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  provider: 'provider',
  amountCents: 'amountCents',
  status: 'status',
  transactionId: 'transactionId',
  paidAt: 'paidAt',
  createdAt: 'createdAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  type: 'type',
  value: 'value',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  description: 'description',
  imageUrl: 'imageUrl',
  mobileImageUrl: 'mobileImageUrl',
  linkUrl: 'linkUrl',
  buttonLabel: 'buttonLabel',
  page: 'page',
  locale: 'locale',
  position: 'position',
  isActive: 'isActive',
  startAt: 'startAt',
  endAt: 'endAt',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoyaltyAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  points: 'points',
  tier: 'tier',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PointTransactionScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  amount: 'amount',
  type: 'type',
  description: 'description',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.RedemptionHistoryScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  rewardId: 'rewardId',
  pointsUsed: 'pointsUsed',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.LoyaltyRewardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  pointsCost: 'pointsCost',
  value: 'value',
  type: 'type',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  url: 'url',
  secret: 'secret',
  events: 'events',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.KnowledgeBaseEntryScalarFieldEnum = {
  id: 'id',
  kind: 'kind',
  title: 'title',
  content: 'content',
  productId: 'productId',
  tags: 'tags',
  embedding: 'embedding',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentIntentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  provider: 'provider',
  amountCents: 'amountCents',
  status: 'status',
  clientSecret: 'clientSecret',
  returnUrl: 'returnUrl',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  client: 'client',
  clientLogo: 'clientLogo',
  category: 'category',
  technologies: 'technologies',
  features: 'features',
  images: 'images',
  thumbnailImage: 'thumbnailImage',
  coverImage: 'coverImage',
  youtubeVideoId: 'youtubeVideoId',
  youtubeVideoUrl: 'youtubeVideoUrl',
  demoUrl: 'demoUrl',
  githubUrl: 'githubUrl',
  liveUrl: 'liveUrl',
  startDate: 'startDate',
  endDate: 'endDate',
  duration: 'duration',
  teamSize: 'teamSize',
  budget: 'budget',
  status: 'status',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  displayOrder: 'displayOrder',
  viewCount: 'viewCount',
  userId: 'userId',
  tags: 'tags',
  testimonial: 'testimonial',
  results: 'results',
  challenges: 'challenges',
  solutions: 'solutions',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords',
  ogTitle: 'ogTitle',
  ogDescription: 'ogDescription',
  ogImage: 'ogImage',
  structuredData: 'structuredData',
  canonicalUrl: 'canonicalUrl',
  content: 'content',
  galleryImages: 'galleryImages',
  clientLogoUrl: 'clientLogoUrl',
  projectDate: 'projectDate',
  completionDate: 'completionDate',
  featured: 'featured',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  method: 'method',
  url: 'url',
  statusCode: 'statusCode',
  duration: 'duration',
  category: 'category',
  severity: 'severity',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  status: 'status',
  targetAudience: 'targetAudience',
  discountPercent: 'discountPercent',
  discountAmount: 'discountAmount',
  startDate: 'startDate',
  endDate: 'endDate',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignRecipientScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  email: 'email',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignOpenScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  recipientEmail: 'recipientEmail',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignClickScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  recipientEmail: 'recipientEmail',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.EmailLogScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  recipientEmail: 'recipientEmail',
  subject: 'subject',
  status: 'status',
  error: 'error',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.Contact_messagesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  subject: 'subject',
  message: 'message',
  company: 'company',
  serviceType: 'serviceType',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Site_settingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SoftwareScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  category: 'category',
  platform: 'platform',
  version: 'version',
  downloadUrl: 'downloadUrl',
  websiteUrl: 'websiteUrl',
  imageUrl: 'imageUrl',
  features: 'features',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.CampaignType = exports.$Enums.CampaignType = {
  PROMOTIONAL: 'PROMOTIONAL',
  NEWSLETTER: 'NEWSLETTER',
  PRODUCT_UPDATE: 'PRODUCT_UPDATE',
  WELCOME: 'WELCOME',
  ABANDONED_CART: 'ABANDONED_CART',
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH: 'PUSH',
  SOCIAL: 'SOCIAL'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  SENT: 'SENT',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Product: 'Product',
  Category: 'Category',
  Cart: 'Cart',
  CartItem: 'CartItem',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Payment: 'Payment',
  Refund: 'Refund',
  ServiceType: 'ServiceType',
  Service: 'Service',
  Notification: 'Notification',
  Inventory: 'Inventory',
  InventoryMovement: 'InventoryMovement',
  InventoryAlert: 'InventoryAlert',
  InventoryReport: 'InventoryReport',
  WishlistItem: 'WishlistItem',
  ProductReview: 'ProductReview',
  ProductReviewVote: 'ProductReviewVote',
  ProductReviewReport: 'ProductReviewReport',
  Page: 'Page',
  SearchQuery: 'SearchQuery',
  ProductView: 'ProductView',
  ServiceView: 'ServiceView',
  CustomerQuestion: 'CustomerQuestion',
  Technician: 'Technician',
  ServiceItem: 'ServiceItem',
  ServiceBooking: 'ServiceBooking',
  ServiceBookingItem: 'ServiceBookingItem',
  TechnicianSchedule: 'TechnicianSchedule',
  ServiceStatusHistory: 'ServiceStatusHistory',
  ServicePayment: 'ServicePayment',
  Promotion: 'Promotion',
  Banner: 'Banner',
  SystemConfig: 'SystemConfig',
  LoyaltyAccount: 'LoyaltyAccount',
  PointTransaction: 'PointTransaction',
  RedemptionHistory: 'RedemptionHistory',
  LoyaltyReward: 'LoyaltyReward',
  Webhook: 'Webhook',
  KnowledgeBaseEntry: 'KnowledgeBaseEntry',
  PaymentIntent: 'PaymentIntent',
  Project: 'Project',
  ActivityLog: 'ActivityLog',
  Campaign: 'Campaign',
  CampaignRecipient: 'CampaignRecipient',
  CampaignOpen: 'CampaignOpen',
  CampaignClick: 'CampaignClick',
  EmailLog: 'EmailLog',
  contact_messages: 'contact_messages',
  site_settings: 'site_settings',
  software: 'software'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
